{"pages":[{"title":"404 Not Found","text":"Oops！Can’t find the post : (But you can always try to search on the navgation bar! 天啊！是傳說中的404! 。･ﾟ･(つд`ﾟ)･ﾟ･別緊張，有可能只是文章搬家惹，不妨試試在上方導覽列輸入關鍵字搜尋！","link":"/404.html"},{"title":"關於作者","text":"技術宅+畫圖仔，自認興趣還挺多，無聊的時候會畫畫圖、畫累了寫寫 code (主攻前端)、不想寫扣的時候就拿起工具當個小 Maker，或是裝起方向盤、帶上耳機，到 Nordschleife 晃幾圈。 平時喜歡看各式各樣的網路文章或短片，感謝無數 blogger/youtuber 的無私分享，讓本人受益良多，所以也嘗試著寫了一些文章和大家分享。在下文筆可能不算好，但我會盡力讓不同領域的讀者都能輕鬆理解。當然，若有疏漏歡迎指正、理性討論 d(d＇∀＇) 以下是一些關於本人的無用訊息： 音樂是我的精神糧食，沒有音樂的我做不了事情 -`д´- ！！！ 順便推薦下朋友的頻道 Silaver 本人艦これ萌豚一只，也對二戰的各種船艦戰役有興趣雖然就是個軍盲，如果對我的圖有興趣(主要都是艦これ)，可以去晃晃 Pixiv ｽﾞｲ₍₍(ง˘ω˘)ว⁾⁾ｽﾞｲ 恩？還有其他的？還請自行探索囉(つд⊂) 軟體相關可以參考 Github，大部分這裡寫的小玩具都可以在那邊找到。 至於為何選擇自行架站寫 blog 而不選擇市面上的寫做平臺？ 或許是基於凡事想動手的心、還有希望大家能夠有最乾淨舒服的閱讀環境吧！若想瞭解本站詳細資訊，本站使用 hexo 架設於 Github Pages，主題以 Minos 為基底做些少許的修改，特別感謝上述服務/作者讓這個網站存在。 最後 printf(“%s”, “Stay Curious, Stay Creative”)","link":"/about/index.html"}],"posts":[{"title":"Express.js 接收 Text/Plain 請求只解析出空物件問題","text":"最近使用 Express 接收 FilePond 套件回傳的 Content-Type: text/plain 請求時，透過 req.body 取得資料時總是拿到空資料。 解法是要另外使用 express.text() 來進行解析： 12// app.jsapp.use(express.text()) 網路上大部分查到的是用 body-parser 的解法，但此方法已 Deprecated。但這邊有個地方需要特別注意：express.text() 需要 4.17.0 以上才能夠使用，可透過 npm i express@latest --save 升級。 參考資料Express 4.x API","link":"/QuickFix/expressjs-parse-text-plain-request/"},{"title":"Quick Fix - 無法在 iPad 的 Affinity Photo 中開啟 PSD 檔案？","text":"Q: 我無法在 iPad 的 Affinity Photo 中開啟 PSD 檔案？ A: 如果裝了 Adobe Fresco，可能會造成 PSD 檔案在 Affinity Photo 中無法開啟，刪除 Fr 之後即可解決問題。 這可能是 Affinity Photo 的一個 Bug，要看未來開發者是否會去修復 Quick Fix 是一些我自己平時遇到各種小問題的合輯，並提供自己的快速解法 參考Cant import .psd file to Affinity designer/photo","link":"/QuickFix/cant-import-psd-on-affinity-photo-ipad/"},{"title":"Quick Fix - 網頁利用錨點連結導航時，導覽列遮住了標題怎麼辦","text":"Q：這是個常見的 CSS 問題，當利用錨點連結 &lt;a href=&quot;#heading&quot;&gt;&lt;/a&gt; 跳到該標題時，如果是 Fixed 或 Sticky 的導覽列就會擋住標題，可以參考這個 CodePen範例 A：這問題的解法有相當多種，但這邊想推薦一個最簡單的純 CSS 解法： 123:root &#123; scroll-padding-top: 3rem;&#125; 將上述 3em 的部分替換成自己的導覽列高度即可，可以在 CodePen範例 中玩玩看！ Quick Fix 是一些我自己平時遇到各種小問題的合輯，並提供自己的快速解法 參考3 More Life-Changing CSS Tips 5 More Must Know CSS Tricks That Almost Nobody Knows MDN: scroll-padding-top","link":"/QuickFix/navbar-covers-heading-with-anchor-link/"},{"title":"Quick Fix - macOS 連接公用 WiFi 出現登入錯誤訊息","text":"Q: macOS 連接公用 WiFi 登入畫面一片空白並出現登入錯誤訊息？ A: 在 ~/Library/LaunchAgents 中新增一個檔案名為 my.shim.catalina.captivenetworkassistant.plist 內容如下： 12345678910111213141516171819202122&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;&lt;plist version=\"1.0\"&gt; &lt;dict&gt; &lt;key&gt;Label&lt;/key&gt; &lt;string&gt;my.shim.catalina.captivenetworkassistant&lt;/string&gt; &lt;key&gt;LowPriorityIO&lt;/key&gt; &lt;true/&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt; &lt;string&gt;open&lt;/string&gt; &lt;string&gt;/System/Library/CoreServices/Captive Network Assistant.app&lt;/string&gt; &lt;/array&gt; &lt;key&gt;WatchPaths&lt;/key&gt; &lt;array&gt; &lt;string&gt;/Library/Preferences/SystemConfiguration&lt;/string&gt; &lt;/array&gt; &lt;key&gt;RunAtLoad&lt;/key&gt; &lt;true/&gt; &lt;/dict&gt;&lt;/plist&gt; 接著依序執行如下指令 1cd ~/Library/LaunchAgents 1launchctl load my.shim.catalina.captivenetworkassistant.plist 1launchctl start my.shim.catalina.captivenetworkassistant 重啟電腦即可解決問題 👌 若要刪除此背景服務： 1cd ~/Library/LaunchAgents 1launchctl stop my.shim.catalina.captivenetworkassistant 1launchctl unload my.shim.catalina.captivenetworkassistant.plist 1rm my.shim.catalina.captivenetworkassistant.plist 我參考的解決文章中提到 10.15.1 版本中已解決此問題，但我 11.2.3 版本仍遇到此問題 😭 Quick Fix 是一些我自己平時遇到各種小問題的合輯，並提供自己的快速解法 參考macOS Catalina WiFi issue — captive portal broken","link":"/QuickFix/macos-wifi-captive-portal-broken/"},{"title":"Quick-Fix node-sass no such file or directory 錯誤","text":"Q: 最近在利用 Vue-Cli 建立專案時遇到 node-sass 出現如下錯誤： 12345 ERROR Failed to compile with 1 error error in ./src/App.vue?vue&amp;type=style&amp;index=0&amp;lang=scss&amp;Syntax Error: Error: ENOENT: no such file or directory, scandir '/***/node_modules/node-sass/vendor' A: Rebuild 即可：npm rebuild node-sass 參考Error: ENOENT: no such file or directory, scandir ‘**/node_modules/node-sass/vendor’ #1579","link":"/QuickFix/node-sass-error/"},{"title":"PM2 各專案 Dotenv 路徑設定","text":"使用 PM2 管理 Node App 時如果有使用 doenv 會讀取目前目錄的 .env 檔案，例如在以下的資料結構下： 123myApp/ app.js .env 在 myApp 同級目錄中執行 pm2 start myApp/app.js 時會去讀取同層級的 .env ，而不會讀取到 myApp/.env 此時除了可以進入 myApp 後再執行 pm2 start 外，也可以在 app.js 中設定 .env 路徑，如下： 12const path = require('path'); require('dotenv').config(&#123; path: path.join(__dirname, '.env') &#125;); 這樣設定後在使用 ecosystem.config.js 管理多個 App 時，就可以讀取到各 App 資料夾中個別的 .env。 參考資料node dotenv won’t work with pm2","link":"/QuickFix/pm2-dotenv-configuration/"},{"title":"在 localStorage 儲存布林值(Boolean)","text":"由於 localStorage 規範中只能儲存字串，但如果想儲存布林值或其他格式可利用 JSON 的方式達成： 1234localStorage.setItem(\"item\", true)let value = localStorage.getItem(\"item\");console.log(value) // \"true\"console.log(JSON.parse(value)) // true 參考資料Cannot set boolean values in LocalStorage?","link":"/QuickFix/save-boolean-value-using-localstorage /"},{"title":"Vue.js dotenv 環境變數使用及注意事項","text":"最近遇到了 API URL 分 Development 及 Production 不同設定的問題，想使用環境變數來解決，讓 URL 在不同的環境下自動使用對應的設定，嘗試後發現有些使用重點跟容易忽略的地方： Vue 使用的是 .env 格式儲存環境變數，需要放置在專案根目錄(非 /src)。 變數名稱需要以 VUE_APP_ 當作開頭。 需要重啟 Development Server 才會生效。 舊版的 Vue 設定路徑為 config/ 下。 可透過 .env.development .env.production .env.test 等方式在不同情況下載入不同的設定，若是 .env 則所有情況下都會載入相關設定。 參考資料Vue-cli 3 Environment Variables all undefined https://cli.vuejs.org/guide/mode-and-env.html","link":"/QuickFix/vuejs-dotenv-file-configuration/"},{"title":"Vuetify 圖片垂直置中","text":"利用 v-layout 達成： 123&lt;v-layout fill-height align-center&gt; &lt;v-img&gt;&lt;/v-img&gt;&lt;/v-layout&gt; 參考資料[Bug Report] Vertical centering not working in v-img when using max-height","link":"/QuickFix/vuetify-image-vertical-centering/"},{"title":"SketchUp 2017 修復無法啟動問題","text":"今天打開SketchUp突然跳出這玩意… 試過重新安裝和網路上的各種方法也沒有效…就是開不了 弄了老半天簡直要發瘋直到我傳送了錯誤報告, 跳出這個頁面有推薦的解決方法OS:你怎麼不再錯誤頁面跟我說(#`Д´)ﾉ 按照上面的教學, 到設定程式那邊把Microsoft Visual C++ 2015相關的套件全數移除 然後把SketchUp卸載之後重新安裝一遍, 就成功解決問題囉(^u^)","link":"/2017/09/sketchup-2017-修復無法啟動問題/"},{"title":"Raspberry Zero W Headless 自動連上無線網路與開啟SSH","text":"沒想到一拖就拖到12月才更新了, 應該勤奮點的(ry之前因緣際會下, 請朋友從英國帶回來了觀望已久的 RPI ZERO W ✧◝(⁰▿⁰)◜✧先上張美圖 原本想多帶幾張回來的, 想說台灣代理的都好貴…但是發現一單只能買一張, 只好先收一張回來玩, 看來真的很搶手阿QQ加碼自然風外殼!! 這簡直超棒阿XDDD 雖然我也有買官方的Zero殼, 以後如果要用到攝影機相關的project會比較方便(^u^) 好了, 廢話少說, 立刻進入正題：雖然RPI有HDMI跟USB接口, 但我就是很懶得接東接西, 希望能夠直接在PC上控制他, 這種叫做Headless的啟動設定 沒裝螢幕 稱為無頭Zero W跟普通PI3的差異除了外觀還有就是Zero W並沒有乙太網路口 所以平常把PI3接上路由器設定的方法是沒辦法直接移植到Zero W身上的不過Zero W有內建WIFI晶片, 所以我們可以設定一下讓Zero自動連上家中的WIFI來進行操作, 而不需要外接螢幕鍵盤或OTG轉乙太再接路由器如此麻煩 先將要裝的系統image燒錄到SD卡中, 然後在Windows下應該能看到一個label為BOOT, 且檔案格式為FAT32的分區(另一個為ext4, Windows下無法讀取) 首先開啟SSH功能, 記得很久以前Raspbian預設是開的, 但後來關掉了, 不過我們還是能手動開啟他首先打開Notepad++之類的軟體, 新增一個完全空白的檔案, 然後另存在boot根目錄, 存檔時選擇所有類型, 檔名”ssh” (注意 無副檔名) 這樣就會啟動SSH的功能 接著要設定無線網路, 首先新建一個名為”wpa_supplicant.conf”的檔案, 一樣另存在boot的根目錄, 接著在內容打上： 1234567ctrl_interface=/var/run/wpa_supplicant update_config=1network=&#123; ssid=\"SSID\" //打上要連的無線網路SSID psk=\"PASSWORD\" //打上要連的無線網路的密碼&#125; 這樣開機的時候, 系統就會去把設定檔抓到 /etc/wpa_supplicant/底下, 開機自動連線 接著就可以把SD卡插進RPI裡面接上電源囉稍等幾秒後, 打開提示命令字元, 輸入 arp -a 查看有沒有多出一組新的連線(或是到路由器的管理頁面找), 然後再將IP打上putty等SSH軟體就大功告成拉！ 備註開機後可使用 sudo raspi-config 進入 Boot Option 啟動 Wait for network at Boot ，這樣 Pi 啟動時會先嘗試啟動網路在進行後續的開機，如果打算 headless 使用建議開啟。","link":"/2017/12/raspberry-zero-w-headless-自動連上無線網路與開啟SSH筆記/"},{"title":"Hexo Github deploy 問題修正","text":"今天用另一台電腦寫blog要用Powershell部屬到Github上時發生了錯誤 錯誤訊息如下 1234567891011121314151617181920212223PS C:\\Users\\DriftKingTW\\blog&gt; hexo dINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...On branch masternothing to commit, working tree cleanfatal: HttpRequestException encountered. An error occurred while sending the request.bash: /dev/tty: No such device or addresserror: failed to execute prompt script (exit code 1)fatal: could not read Username for 'https://github.com': No errorFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: fatal: HttpRequestException encountered. An error occurred while sending the request.bash: /dev/tty: No such device or addresserror: failed to execute prompt script (exit code 1)fatal: could not read Username for 'https://github.com': No error at ChildProcess.&lt;anonymous&gt; (C:\\Users\\DriftKingTW\\blog\\node_modules\\hexo-util\\lib\\spawn.js:37:17) at emitTwo (events.js:126:13) at ChildProcess.emit (events.js:214:7) at ChildProcess.cp.emit (C:\\Users\\DriftKingTW\\blog\\node_modules\\cross-spawn\\lib\\enoent.js:40:29) at maybeClose (internal/child_process.js:925:16) at Process.ChildProcess._handle.onexit (internal/child_process.js:209:5) 上網翻了不少資料, 一些git設定跟ssh設定也都測試過了依然無法解決問題後來使用了另一種設定方法 原本的_config.yml 1234deploy: type: git repo: https://github.com/username/your_repo.git branch: 修改成 1234deploy: type: git repo: git@github.com:username/your_repo.git branch: 就能夠正常Deploy, 不過在原本架設hexo的電腦上是能夠使用第一種方法的這裡放上我的解決方法, 提供參考 參考資料:Hexo + Github 簡單使用教學","link":"/2018/03/Hexo-Github-deploy-問題修正筆記/"},{"title":"Ducky ONE RGB 解決空白鍵漏光問題","text":"ONE RGB用到目前為止都很滿意, 不過有個小缺點就是看鍵盤角度太低的時候空白鍵下兩側的補光LED會閃到眼睛RRR雖然我自己的角度不常看到, 但有時候被閃一下還是不太爽(#`Д´)ﾉ這時候既然原廠沒有設計擋光板, 只好自己動手了 恩 拍起來還好, 可是實際被閃到就是這個樣子 要解決也不難就是, 當然首先把空白鍵拆下 然後裁個大概3x1.5cm的描圖紙(一個LED要兩層效果比較好) 接著找個無痕雙面膠之類的把它固定在定位板上, 光線就不會辣麼刺眼了(ﾟ∀ﾟ)這樣也不至於影響到燈光讓那邊變得比較暗d(`･∀･)b 大功告成!! 雖然不是什麼太麻煩的MOD不過希望Ducky以後設計這部分的燈光要注意一下啊XD","link":"/2018/01/ducky-one-rgb-解決空白鍵漏光問題/"},{"title":"Logitech G27方向盤 回正/校正問題維修","text":"大概九月時幸運用不錯的價格收了一套二手的G27, 對於車控來說簡直太爽拉, 每天必跑一趟Nurburgring(?雖然G27現在上面有Thrustmaster跟Fanatec等更高檔次的方向盤, 不過對我目前來說有G27就很棒了XDD 窮學生麻 不過就在約一個月前, 出了點小問題, 每次插上USB G27就會自檢之後回正, 但有時候卻回不到中間(角度也不大,約10度左右)雖然10度但是開起來超有感阿, 整個人都歪一邊拉!! 而且玩Project Cars 2的時候還會越歪越多(汗, 跑趟拉力賽下來整個方向盤歪了快90度QQ後來越來越容易出現這種問題, 於是上網查了下, 中文的資料不多(可能就是邊緣玩的設備…), 不過國外很多同好也都遇到了類似的問題。 只要是校正有問題/歪斜/檢測時打到底無法回正(轉速指示燈有亮)的話八九不離十都是內部光學編碼器(Optical Encoder)的部分出了問題, 也有人叫他光柵,如下圖這個 這個黑色小圓片就是處理G27判斷方向盤轉了多少的裝置, 然而我不知道為啥Logitech的工程師在設計的時候這塊用塑膠….熱漲冷縮呢www(可能才有機會送修吧, 不然其他的部份的品質都很牢靠, 金屬的部分也很厚實堅固) 仔細看圖片右下的那條裂痕, 這就是造成校正失準的原因(雖然很小但就是這樣沒錯QQ)原本想說按照網上一些說法拆下拿強力膠or三秒膠把縫隙補起來但是我這麼做的時候裝上去居然就, 啪的一聲又裂拉QQ, 而且裂更大惹……裝回去連校正都無法拉QQ於是, 只好想辦法去淘了個不鏽鋼製的光柵回來….等了幾天終於運來台灣惹(BTW這被官方認定是特貨,所以得找私人運)價格約NTD350~400左右, 之前看YT有人說澳洲有人在賣, 但出貨慢又貴….(1.5k)還好至少TB有賣, 不然就GG惹 收到貨發現賣家包的超仔細XDD我拆了好幾層, 最裡面還是用戒指盒包的簡直超用心阿XDDD 對了這邊提醒一下, G27有兩種光柵, 舊版的(綠盒包裝)是60柵跟G25共用新版的G27(黑盒裝)是30柵, G29跟G920應該也一樣?可能要拆開來看或查過比較好 2018/06/06 更新 可能要注意一下，上述的不鏽鋼光柵在幾個月之後居然也開始失靈了，又開始慢慢歪掉 Orz不知道是不是便宜了經度不夠或剛好瑕疵等…取出來的時候好像有些刮痕，也可能是我一開始沒裝好造成的淘寶有些評價都是正常使用的，如果要買可能自己先評估一下了 總之我換成YT上不少人買的泰國製黃銅製光柵(30USD一個+8USD運費) 黃銅光柵連結 接下來簡單紀錄一下維修的方法, 如果覺得我圖片不清楚或不懂可以去YT, 國外有不少拆解影片~ 首先拆下方向盤上的六角螺絲 打開的時候小心, 方向盤上的按鈕有連接線連到一張綠色的T型電路板上 後面有個連接端子把它小心的拔掉, 然後會變成這個樣子 記得順便把轉速指示燈的遮蓋拿起來放好 接著將紅圈的三個螺絲拆下(這螺絲要裝回去的時候莫名的難鎖,還很長……)PS下面那個螺絲被端子擋到周圍四個螺絲是鎖著撥片用的, 如果要換大撥片再拆那四個螺絲即可 拔下後的樣子 接著把G27翻到背面, 卸下螺絲(紅色), 綠圈處我建議晚點再拆,那邊是固定馬達跟旋轉軸的部分 放好螺絲後上蓋應該可以輕鬆的提起然後會看到電路板, 感測器在右方馬達的尾部(有個黑蓋子的)然後把電路板上有端子的連結都拆起來(別太暴力R 雖然我覺得還蠻堅固的)把周圍的螺絲(包含電路板下面的固定鋼板)卸下 (拍糊了QQ) 此時可以用一字起子沿著黑蓋邊緣撬開, 這部分沒拍到然後再把下面剛才提到的綠圈處的螺絲卸下小心這時候馬達中間那塊的軸心就會分離, 不要摔到了還有裡面有齒輪和一片固定位置用的金屬彈片小心不要搞飛上面都有塗潤滑油, 別雞婆把它擦掉阿XD接著我們就可以看到光學感測電路板了 可以先檢查一下是不是螺絲鬆掉, 鬆掉也可能會造成失準的問題, 如果鎖緊就好了可以不用換光柵~欸抱歉我發現細部的圖片沒拍到簡單敘述一下就是把綠色的電路板拆下(小心螺絲下面有華司別弄丟)如果要換就把黑色那片光柵拔下換上即可之後按照原本的動作組裝回去就沒問題記得電路板接線要檢查有沒有接穩QQ 我第一次裝回去有一個沒裝好結果又拆開來壓緊(ry 2018/06/06 更新 附上安裝上新光柵的大圖，可以讓光柵盡可能地靠近黑色(接收器)，但是注意不要摩擦到PCB就好 順便提醒一下把馬達齒輪組那一大塊安裝回去時要特別注意塑膠擋塊有沒有對齊，G27是靠那個判斷有沒有轉到底的如果沒對準也是沒法校正哦，建議可以卡上去後壓著把方向盤兩邊轉到底看有沒有卡好對齊(齒輪那也有個藍點可以對準) YA等了一個禮拜終於復活拉 趕緊飆車去囉","link":"/2018/01/logitech-g27-方向盤-回正-校正問題維修筆記/"},{"title":"Ducky ONE RGB 青軸 極簡易開箱","text":"之前跟朋友買的二手MK80開始連點, 到後面嚴重到不能用了, 於是決定來換個鍵盤hmm 我個人是要求蠻多的龜毛, 平常雖然盲打但是想要發光..然後不喜歡單色所以想用RGB, 又不希望白底座反光太亮之類…..(ry在各種需求考量下, 發現目前市面上比較接近我想要的就是Ducky ONE RGB版了(汗雖然跟理想中還差一截就是(欸 可能之後有錢得自己搞一把DIY相信介紹ONE RGB應該大家都稍微看過了, 就不多說, 跟Shine6比起來我喜歡她窄框的部分, 其他用料貌似差不多, 而且ONE還便宜一些就選她惹XDD(窮窮窮 外盒部分(抱歉只有手機能拍QQ 包裝內容(好像少拍了說明書來者) 背面 Cherry RGB青軸本體 對了 現在的ONE跟SHINE系列都改用PBT鍵帽了剛好我不喜歡太亮的, 然後PBT手感好又不容易打油, 太爽拉感謝Ducky努力的研發而且價格還不貴◝( ﾟ∀ ﾟ )◟佛心公司 佛心公司(? 接上電腦囉~(USB3.0) 拍起來比實際亮不少….手機相機太廢QQ, 各位大概當個參考就好XD詳細可能要參考一下其他人拍的或找原廠照片…..燈光設定的部分按照說明書教學, 蠻好上手的XDCal按鍵呼叫計算機超方便R, 大愛這功能 &lt;3 然後 青軸好爽阿阿阿阿阿阿阿阿阿XDDDDDDDDDD大家都說現在Cherry青好像品質不太穩, 不過我這把除了F7聲音特別小其他倒是沒問題, 感覺還OK, 不過要求嚴格的朋友們可能就要多加考慮惹(*ﾟーﾟ)~ 青軸好爽阿阿阿阿阿阿阿阿阿(被打感覺以後跟別人住會被人家揍 開箱文就到這, 诶 你說怎麼那麼少?因為極簡開箱阿XD 好啦 順便附一下新鍵盤試打成績 應該還OK, 現在還有點不習慣青軸以後看能不能到130WPM(欸感謝觀看 :3","link":"/2017/12/ducky-one-rgb-青軸-極簡易開箱/"},{"title":"iPad Pro 10.5 簡易開箱+繪圖心得","text":"有空先來記錄下年前買的iPad Pro，其實原本是想買New Surface Pro的想說有筆可以直接當繪圖螢幕，然後又是台Windows電腦，開發網頁寫寫code都很方便不過爬文過後發現M$的QC感覺實在有點問題，一個在賭人品的概念(ry實在不想買那麼貴的東西還要賭人品，加上Surface的繪圖功能雖然規格看上去不錯不過看到一些實際畫的影片，在延遲跟準度上都還有待加強的樣子(當然以普通書寫來說相當夠了 於是，就選了目前平板/筆電繪圖螢幕裡整體評價最高的iPad Pro拉~(開發之類的…到時候在買筆電吧，現在還沒能滿意的整合型產品，考慮MBP或XPS選擇10.5吋也是因為考量到攜帶的關係，多工的確12.9吋的比較爽，但是畫圖我是覺得還好XD 水果的開箱基本上就是長那樣，很有質感很爽，開箱也都有輔助拉條很方便這裡就簡單放個圖就好 然後我發現好像忘了拍裸機了，不過就是一如往常的，金屬的機身很有質感當然還有潮到爆炸的LOGO由於這玩意實在太貴了，而且又有帶著跑的需求怕會有灰塵刮傷玻璃(想說當成隨身的繪板看能不能逼自己產圖所以先幫他找了個家又貼了玻璃貼玻璃貼我是貼iMos的，目前iPad Pro評價最好的玻璃貼好像也就這個選擇不會影響Apple Pencil非常重要RR 有的太厚好像會有抖動的問題原本有考慮霧面增加手感…不過這樣太可惜那Retina螢幕了而且真要手感直接用Intuos Pro比較快XDD(有貼類似紙質的膜) 滿板的玻璃貼，很薄，官方說0.33mm 當然我也沒去量XD不仔細看也看不出有貼，另外也有順便貼上鏡頭跟Home鍵的保護貼 跟iPhone7相同的鏡頭，拍起來好但是也沒人會拿著平板到處拍吧XDD掃描文件之類很好用就是 然後外殼的部分，我翻遍了各種保護殼…要嘛是很醜要嘛太厚重或是沒有Studio Mode(接近平躺那種適合打字畫圖的角度)後來終於找到Speck出品的for 10.5”保護殼好看外也有1.2m防摔(當然我是不會無聊測試的)，重量也比UAG的輕價格1k多NTD，我覺得算挺不錯的原本因為不確定是否能相容滿板玻璃貼，所以特地跑去Studio A看，剛好他們剩下一個10.5吋的XDD 包裝 正面 背面 掀開裙子 立起來的樣子(有多段卡準可以調整角度) 然後這是剛才提到的Studio Mode 旁邊還有個小扣子 再來是那隻神奇的Apple Pencil有人說他很貴但是以壓感筆來說挺正常的價格官方沒給出壓感數據，聽說大概是1024，畫起來是挺夠了XD只是當然比不上Intuos Pro 8192壓感的爽感XDD 本體跟lightning轉接器+替換筆芯重量拿起來挺舒適的，大概是目前拿過最好拿的電池筆(Wacom基本上都是無電池)筆蓋是磁吸式的，吸力適中應該是不會隨便掉只是充電還要轉接，筆蓋得另外放就要比較小心了，東西都挺小的還會滾 然後這筆有個小彩蛋，裡面有特別配重，所以把筆放在桌上時會剛好讓Pencil的字樣朝上雖然只是小細節，不過可以感受的到設計師很用心啊XD 用轉接器充電 長雞雞充電法 雖然說真的我也想不到其他可以直接連接iPad又好看的充電法可是這樣看起來真的挺蠢糟的 配對的話就是開個藍芽，扶他一下就可以了，挺方便的之後直接畫就會自動連上了筆如果沒電只要充個15sec就可以畫30分鐘倒是挺不錯，在外面應急才不會太尷尬但是這充電法怎麼看就是很尷尬 替換筆芯的部分 先拿MediPaint來試畫一下，感覺很棒，玻璃滑我是覺得還好畢竟平常都在畫板子滑習慣了，如果平時是手繪的朋友可能就要注意一下了貼上玻璃貼比原本的滑一些，看過蠻多人說超不習慣然後又貼回普通保護貼了 所以我再畫什麼 試著上點色 真的有種拿著鉛筆的感覺，用Sketches的時候傾斜感應也很明顯，我覺得甚至比Wacom的傾斜手感還好XDD其他詳細的部分我會再多畫一陣子跟多嘗試各種繪圖軟體之後再寫一篇文章 iPad Pro除了當畫板也可以做些其他輔助的工作，加上iOS的多工功能非常方便要看參考圖也可以邊看邊畫(沒截到圖下次在一起寫心得好了)雖然貴但是真的好用啊推坑中，Pro終於讓人不會單純覺得iPad只是個玩具而已XD看來Apple也算是在生產力的部分往前了一大步了，希望之後會有更多方便的功能只是拜託先把系統做穩R Thx for watching (〃∀〃)","link":"/2018/02/iPad-Pro-10.5-簡易開箱+繪圖心得/"},{"title":"DIY IR Tracker 紅外線頭戴追蹤器筆記","text":"用VR玩模擬駕駛之類的遊戲是很多玩家的夢想, 不過目前VR頭戴顯示器還不算相當成熟, 而且價格又偏高的情況下(對拉這才是重點), 不過窮人是很聰明的, 沒有VR我們當然有便宜的替代品!那就是IR Tracker(紅外線追蹤器, Infrared:紅外線縮寫為IR), 可以搭配OpenTrack等開源軟體, 利用IR攝影機拍攝IR LED做定位, 來達到偵測物體移動的功能材料買下來成本差不多可以控制在NTD500以內, 當然網路上也有賣現成的, 不過相對價格都比較高, 當然是選擇DIY既便宜又不失樂趣! Ready所需材料 PSEYE 攝影機 x 1 (注意!市面上有兩種版本, 我會在步驟中提及其中的差異) IR LED x 3 (推薦SFH485P, 亮度高效果較佳) 6.8Ω 1/4W電阻 x 1 (串聯5V, 每顆LED電流約75mA) 這邊可以用參考阻值計算機計算 5V電源(電池、USB, etc) 磁碟片一張 就是那個存檔圖案的實體拉 所需工具 烙鐵 焊錫 一些連接用線材 熱縮套/絕緣膠帶 Let’s Do It!PSEYE首先處理PSEYE, 也就是我們的IR攝影機, 他原本只是個普通的攝影機, 但是我們可以手動拆除IR濾鏡改造成IR攝影機小科普:CMOS感光元件對於IR的敏感度很高, 所以普通相機都會裝上IR濾鏡濾除大多數的紅外線(不是完全濾除, 所以可以利用手機鏡頭等去照IR遙控器, 就能夠透過相機看到IR了!)至於選PSEYE而不是其他WebCam的原因, 主要就是因為PSEYE的幀率可以高達100以上, 對於移動是非常靈敏的做IR Traceker也不需要很高的解析度, 有480P就已經綽綽有餘了, PSEYE價格也不高, 所以當然是首選囉!用其他的攝影機當然也可以, 原理都是一樣的, 只是大部分都會推薦PSEYE PSEYE比較不過問題來了, 在準備部分提及的有兩種PSEYE, 一種是能夠拆除IR濾鏡一種無法(放在夾層中) 從上圖中可以看到左邊的那種(應該是較新款), 鏡頭中有白圈的是無法拆除IR濾鏡的!不過不必太過擔心, 因為功能上基本也是沒問題的, 只是條件許可下最好能選到右邊這種, 能達到最好的效果(說真的我覺得使用上沒差多少就是) 拆解首先先把PSEYE後面的墊片拆起(新款的是軟墊, 舊款的是硬的要注意)由於舊款是塑膠墊片, 所以我直接用手鑽把它鑽出來(注意不要鑽到底下的螺絲) 接著把螺絲轉開, 然後沿著邊邊撬開後蓋(非常…難拆, 尤其到圓球那部分要很用力地把它暴力扯開) 小心拆解過程不要傷到手跟內部的PCB 接下來比較輕鬆, 把PCB上的螺絲都轉下來, 分離下方的支架, 並且拆下前鏡頭 接下來拆解IR濾鏡, 如果是買到無法拆IR濾鏡的可以直接跳到這繼續 拆解IR Filter這部分需要比較大的耐心, 除了拆背蓋在這裡也會有種讓人想去買成品的衝動 上圖中最外層的圓形玻璃小透鏡就是IR濾鏡, 我們要將它拆下才能達到最好的IR感測效果可以拿小刀或是像我沒耐心直接手鑽往旁邊鑽, 不過不管怎樣都要很小心而且要花些時間至於多難拆, 體驗一下就知道了(笑) 成功拆除! 過濾可見光接著我們拿出磁碟片, 然後把它給拆爆溫柔地拆開 拿出剪刀, 把磁片剪成跟鏡頭那塊方形差不多的大小並放上去 還原PSEYE好了, 此時完成IR攝影機的改裝, 現在按著步驟反向裝回去原本的樣子先丟一邊, 開始做IR Tracker的本體 可以順便通個電看剛才有沒有把它毀了 IR Tracker先來處理電路的部分, 電路很簡單就是單純串聯 5V-&gt;電阻-&gt;LED-&gt;LED-&gt;LED-&gt;GND 電源看想用電池或USB供電都可以(打算之後要用小型鋰聚電池供電, 目前先接USB) 此時我們要先準備個支架, 我直接用了YouTuber Seytonic (推薦去逛逛, 他的頻道有許多好玩的東西) 提供的版型去修改成3D列印檔案, 然後請人列印出來可以順便按照個人喜好在上面做裝飾, 這時候當然貼上Carbon紋路超輕量化 接著看要如何安裝固定, 我個人是綁在耳機上, 如圖(歪歪的沒關係 因為軟體可以校正) 軟體設定軟體的部分首先要下載CL-EYE DRIVER, 連結是Donate版, 免費版可以自己搜尋, 畢竟也不貴應該支持一下開發者安裝過程就是不斷的下一步就可以, 不多做說明, 裝好後可以開啟”CL-EYE TEST”這個程式看看有沒有正常(已經改裝好攝影機的話應該看不太到可見光, 所以可以拿剛才做好的頭戴追蹤器或遙控器之類對著鏡頭測試) 如上圖有看到亮點就代表驅動跟硬體都正常囉!注意!如果覺得亮點很模糊, 那是因為拔除IR濾鏡之後造成焦距改變, 這時候我們可以藉由轉動鏡頭調整卡在適合的焦距上另外也可以進入裝置的屬性設定裡調整曝光等參數, 我一開始身邊找不到磁碟片就是靠軟體改變曝光, 同樣也能夠正常使用哦! 接著安裝OpenTrack, 選擇最新版下載後一樣是無腦下一步安裝 接著開啟Input那欄右側的設定圖案 Device裝置的部分選擇你的攝影機(PSEYE), 下方可以調整解析度和FPS等(FPS盡量拉高)然後開啟右邊的設定對話框, 選擇Shortcuts快捷鍵, 在Center項目設定一個按鍵讓你可以在遊戲/模擬器中重新校正置中 接著切換到Output, 在這裡可以選擇要啟動的感測項目Yaw(偏擺), Pitch(俯仰), Roll(翻滾), XYZ(XYZ軸移動) 像是我開歐卡或賽車等, 只希望左右轉頭時候能看到左右的景物, 所以就單純開啟Yaw其他設定Disabled如果像Warthunder要看四面八方, 就需要開其他的選項, 這部分就看個人需求了 設定完成按下OK回到主畫面, 然後按Start就會啟動OpenTrack囉!此時可以看到三個IR LED的光點正確地出現在方框中只要做出動作旁邊的小章魚就會跟著做相同的動作 接著就可以開啟遊戲, 體驗窮人的半VR拉歐卡之類可以直接支援, 像Project CARS 2的話要開Steam VR模式才有用哦! 每個遊戲可能要自己另外注意一下雖然說價格不貴, 但是效果的確不錯呢!原先以為只有頭部轉動螢幕沒有跟上會很難用, 結果是多操心了基本上可以很自然地看向左右兩側, 也沒什麼延遲, 前面的辛苦值得啦! 參考資料$10 Gaming Head Tracker | DIY TutorialCL-EYE DRIVEROpenTrackEasy build setup with SFH485P, Anyone can build this ! LED Assembly Wizard","link":"/2018/03/DIY-IR-Tracker-紅外線頭戴追蹤器筆記/"},{"title":"Laravel 產生簡易XML筆記","text":"最近在寫串接功能時，遇到需要使用Laravel動態產生XML的功能，完成後做個筆記，除此之外也能拿來產生網站組織架構的Sitemap，讓Google等搜尋引擎能夠更有效率的爬你的網站頁面。 How假設要使用Laravel產生如下的簡易產品清單XML： 123456789101112131415&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;products&gt; &lt;Product&gt; &lt;Name&gt;Product_1&lt;/Name&gt; &lt;Description&gt;Product_Description&lt;/Description&gt; &lt;URL&gt;https://mywebsite.com/Product_URL/&lt;/URL&gt; &lt;Price&gt;1000&lt;/Price&gt; &lt;/Product&gt; &lt;Product&gt; &lt;Name&gt;Product_2&lt;/Name&gt; &lt;Description&gt;Product_Description&lt;/Description&gt; &lt;URL&gt;https://mywebsite.com/Product_URL/&lt;/URL&gt; &lt;Price&gt;1500&lt;/Price&gt; &lt;/Product&gt;&lt;/products&gt; 首先在 resources/views 裡建立一個 product_list.blade.php 視圖，用來顯示XML的內容 (“product_list”名稱可自訂)。 內容如下： 12345678910111213&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;products&gt; &lt;!-- 利用foreach印出所有產品資訊 --&gt; @foreach($products as $product) &lt;Product&gt; &lt;Name&gt;&#123;&#123; $product-&gt;name &#125;&#125;&lt;/Name&gt; &lt;Description&gt;&#123;&#123; $product-&gt;description &#125;&#125;&lt;/Description&gt; &lt;!-- 利用 Request::root() 取得網站URL --&gt; &lt;URL&gt;&#123;&#123; Request::root() &#125;&#125;/product/&#123;&#123; $product-&gt;id &#125;&#125;&lt;/URL&gt; &lt;Price&gt;&#123;&#123; $product-&gt;price &#125;&#125;&lt;/Price&gt; &lt;/Product&gt; @endforeach&lt;/products&gt; 然後建立一個Controller(名稱自訂，這裡範例使用ProductController，跟處理顯示商品同樣的控制器)。在Controller裡建立Function用來取得資料並傳送給View裡的視圖顯示。 123456public function productList() &#123; // 取得商品資訊, 並以id作降冪排序 $products = Product::orderBy('id', 'DESC')-&gt;get(); // 將資料交給product_list.blade.php產生XML內容 return response()-&gt;view('product_list', compact('products'))-&gt;header('Content-Type', 'text/xml');&#125; 最後在route/web.php裡加上路徑 1Route::get('/product_list.xml', 'ProductController@productList'); 到這邊大功告成，打上網域名+/product_list.xml就可以查看XML所產生的XML了！ 注意事項如果像此方法利用Blade模板產生XML要注意在PHP的php.ini 設定中 Short Open Tag (&lt;?) 選項要關閉，如果必須打開此選項的話可以改用以下寫法來產生XML Header： 1&lt;?php echo '&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;'; ?&gt; 參考資料Generate a Simple XML Sitemap Using Laravel","link":"/2018/06/Laravel-產生簡易XML筆記/"},{"title":"在Github-Page上免費使用自訂HTTPS網域名稱","text":"Why在Github上建好靜態網站後, 都是利用 username.github.io 進行瀏覽但是Github也有可以讓我們使用自己的域名(Domain Name)的設定假設選擇自訂域名就無法使用它所提供的SSL連線服務, 需要找第三方來使用HTTPS 為了達成HTTPS自訂域名, 需要要利用CloudFlare所提供的免費服務至於堅持使用HTTPS的原因, 我到時候再寫另外一篇文章詳細補充 How 確認已經註冊好一個域名 確認已經在Github上建立一個靜態網站 前往CloudFlare註冊然後按照指示加入你的站點 到Github靜態網站的Repo裡面點選設定, 然後往下拉找到自訂網域(Custom domain), 填上要設定的網域按下儲存 回到CloudFlare在DNS頁面新增CNAME連結到 username.github.io (username為Github用戶名)在這個範例設定中, 我要讓原本的主機名稱連到原先架設在GCP上的網站, 而blog子網域連到Github的靜態網頁 (第二個CNAME的紀錄是為了讓不論前面有沒有輸入www的網址都能連線到我的網站)確認成功連線應該會出現如下的Active字樣(設定完成需要等5~10分鐘生效) 如果原本有設定過DNS的部分, 要去把他們都替換成CloudFlare提供的DNS Server(在DNS設定頁籤中) 接著設定SSL的部分, 選擇加密(Crypto)頁籤SSL是否為FULL模式(若沒有手動設定成FULL)(設定完成需要等5~10分鐘)當畫面顯示Active Certificate字樣代表SSL已啟用 此時應該已經可以使用https訪問我們的Github page了, 但若是使用者輸入http則無效, 所以需要作強制導向HTTPS的設定選擇頁面規則(Page Rules)後點選新增規則在URL Match的部分打上http的網域名, 最後加上星號代表此網域底下通用規則, 然後設定選擇Always Use HTTPS強制導向 這時候就算URL輸入http也會自動連向https的頁面了, 設定完成! 備註 如果使用的是Jekyll, Hexo之類的靜態網站產生器(Static Site Generator)的話, 記得內容連結也都要是https,否則會出現Mix Content的問題, 這樣是無法看到SSL綠色鎖頭的哦 使用Hexo這種利用Push更新文章的靜態網站, 因為每次更新都會把全部檔案洗掉, 所以我們要把設定Github Custom Domain所產生的CNAME檔案(無附檔名), 複製一份放在Hexo的source資料夾, 才不會造成CNAME被覆蓋掉而要重新設定的情況CNAME內容就是Github Page的Custom Domain, 也可以自己建立一份, 例如 1blog.driftkingtw.me 可以在CloudFlare的Page Rules頁籤新增Cache規則, 加快網站載入速度 參考資料Secure and fast GitHub Pages with CloudFlareSetting up a custom subdomain","link":"/2018/03/在Github-Page上免費使用自訂HTTPS網域名稱/"},{"title":"Laravel Linux 佈署問題筆記","text":"整理了自己在佈署Laravel專案到Server時(Linux)所遇到的一些問題處理方式。環境若沒特別說明就代表使用的OS為Ubuntu Q1. 如何設定Laravel .env檔的APP_KEY?Ans：在專案跟目錄執行 php artisan key:generate Q2. 如何從Github上Clone私人專案到網站目錄Ans： 1git clone https://username@github.com/username/repo 其中username 為Github帳號名稱，repo 為專案名稱。 Q3. 在瀏覽器開啟網頁時出現以下錯誤訊息Error in exception handler: The stream or file &quot;/var/www/laravel/app/storage/logs/laravel.log&quot; could not be opened: failed to open stream: Permission denie Ans：( Apache ) 目錄權限不足，在專案目錄執行 sudo chmod -R 777 storage (注意，此方法較不安全) 安全的做法是把不同的權限分開，使用ACL(Access Control List)設定 1234// nginx = web server user// systemuser = your local user which you use to login via sshsudo setfacl -Rdm u:nginx:rwx,u:systemuser:rwx storagesudo setfacl -Rm u:nginx:rwx,u:systemuser:rwx storage 如果沒有ACL的設定方法 12sudo chgrp -R www-data storage bootstrap/cachesudo chmod -R ug+rwx storage bootstrap/cache Ans：( Nginx ) 1sudo chown USERNAME:USERNAME /var/www/html/SITE_FOLDER Q4. 如何切換不同的PHP版本 ( Apache )Ans： 安裝好需要的版本後執行以下指令 (範例為 7.0 =&gt; 7.2) 停用先前的PHP版本(重要) 1sudo a2dismod php7.0 啟動所需的PHP版本 1sudo a2enmod php7.2 重啟Apache2服務 1sudo service apache2 restart ( Nginx ) 設定預設PHP版本 1update-alternatives --set php /usr/bin/php7.0 Q5. 首頁能夠正常顯示，但切換不同的 Get 路徑顯示 404 Not Found (Ex: www.domainname.com/login)Ans：( Apache ) 啟動Rewrite模組 1sudo a2enmod rewrite 重啟Apache2服務 1sudo service apache2 restart 重啟後還是顯示404錯誤，使用文字編輯器開啟 000-default.conf 設定檔 (個人習慣使用vim) 1sudo vim /etc/apache2/sites-available/000-default.conf 在 DocumentRoot /var/www/html 下方新增以下設定 123&lt;Directory /var/www/html&gt; AllowOverride All&lt;/Directory&gt; 儲存設定後，重啟Apache2服務，這時就能正常顯示 GET 路徑了 1sudo service apache2 restart Ans：( Nginx ) 以文字編輯器下列設定檔 /etc/nginx/sites-enabled/default 新增下列設定 123456789server &#123; ... location / &#123; try_files $uri $uri/ /index.php?$query_string; &#125; ...&#125; 重整Nginx服務 1sudo systemctl reload nginx Q6. Bitnami LAMP Stack 更換DocumentRoot目錄？Ans： 更改以下檔案的DocumentRoot，80與443(有SSL的話)。 YOUR_INSTALLATION_DIRECTORY/apache2/conf/bitnami/bitnami.conf 重啓Apache 1sudo /opt/bitnami/ctlscript.sh restart apache Q7. 上傳檔案移動到只訂資料夾時出現權限不足單純使用chmod無效(由於改變的權限爲user非操作移動的www-data)\b\b，需要使用以下方法給予權限。 1sudo chown -R www-data:www-data /path/to/folder Q8. 利用 Laravel Installer 新增 Laravel 專案 [MacOS]MacOS 環境變數設定： 1export PATH=~/.composer/vendor/bin:$PATH Q9. Laravel 7 使用 React 的方法Laravel 之前使用 React 的指令為： 1php artisan preset react 7 之後由於移除 preset 指令，要使用以下方法： 12composer require laravel/uiphp artisan ui react Q10. Laravel 6 以後更改 AppName 的方式由於原本的 php artisan app:name NewAppName 方式已經在版本 6 被移除可以安裝 andrey-helldar/laravel-app 套件達到一樣的功能： 1composer require andrey-helldar/laravel-app 完成後使用同樣方式更改即可： 1php artisan app:name NewAppName Q11. MacOS 安裝 Laravel 權限問題執行 composer global require laravel/installer 若時出現以下錯誤 1./composer.json is not writable. 先執行以下指令 1ls -lh ~/.composer/composer.json 如果權限是 root 則用以下指令修改(username替換為自己的用戶名) 1sudo chown -R username:staff ~/.composer/composer.json 接著執行安裝可能會遇到如下的 cache 資料夾權限問題 12[ErrorException] file_put_contents(/Users/username/.composer/vendor/composer/installed.json): failed to open stream: Permission denied 更改權限後即可正常安裝 1sudo chown -R $USER ~/.composer/ 參考資料Cloning a private Github repo Laravel framework file permission - Security Laravel 5.4 problem - Wrong Route (Not Found) on Ubuntu 16.04 How To Deploy a Laravel Application with Nginx on Ubuntu 16.04 How to install PHP (7 or 7.2) on Ubuntu Changes to Apache httpd.conf not applying on WAMP stack Unable to write in directory Laravel Mac $PATH 環境變量設置及查詢 Laravel 5.4 can’t run “php artisan preset react” comand How can I change the application name(space) in Laravel 6 日後遇到其他問題會再持續更新(建立日期：2018/07/10，最後更新日期：2020/10/1)","link":"/2018/07/Laravel-Linux-佈署問題筆記/"},{"title":"Windows 10 安裝 Ubuntu bash","text":"本篇記錄如何在 Windows10 上安裝 Ubuntu bash 在 Microsoft App 商店搜尋 “Ubuntu” 並安裝 開啟 “設定” -&gt; “App” -&gt; “應用程式與功能” 在最下方 “相關設定” -&gt; “程式與功能” -&gt; “開啟或關閉Windows功能” 確認 “適用於 Linux 的 Windwos 子系統” 已勾選(可能需要重新啟動) 再次打開 “設定” -&gt; “更新與安全性” -&gt; “開發人員專用” -&gt; 選擇 “開發人員模式” 開啟提示命令字元(系統管理員權限執行) -&gt; 輸入以下指令 1dism /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux 完成後執行 Ubuntu App, 即可開始使用","link":"/2018/03/Windows-10-安裝-Ubuntu-bash/"},{"title":"Macbook Pro 2018 Color Banding 問題","text":"在測試螢幕RGB設定時順便測試了一下MBP2018的螢幕效能（一開始來只有看有無亮暗點），發現了在Gradient測試下居然出現了明顯的Banding現象…如下圖。 Gradient Test都有在瀏覽器跟Photoshop內做測試，MacOS部分有另外在Safari測試 測試時皆爲最大亮度 自己的MBP2018 13”預設色彩設定檔測試值RGB(0,0,0)-&gt;RGB(100,100,100) 朋友的MBP2018 13”預設色彩設定檔測試值RGB(0,0,0)-&gt;RGB(100,100,100) 借來的MBP2017 15”預設色彩設定檔測試值RGB(0,0,0)-&gt;RGB(100,100,100) 工作螢幕EIZO EV2450，接MacOS 強制sRGB色彩設定檔（非YCbCr）測試值RGB(0,0,0)-&gt;RGB(100,100,100) 副螢幕DELL P2214H，接Windows10 預設sRGB色彩設定檔測試值RGB(0,0,0)-&gt;RGB(255,255,255) iPad Pro 2017 10.5”測試值RGB(0,0,0)-&gt;RGB(255,255,255) 另外上面兩台18年MBP查詢發現應該都是三星的面板，不確定供應商是否影響，有待\b\b確認。 查詢面板方法(Pro Retina)： \bioreg -lw0 | grep -i &quot;DisplayVendorID&quot; Mojave若遇到錯誤可以安裝XCode開發工具解決 xcode-select --install Samsung ID：1552 LG ID：7789 以上結果可以看出現Color Banding應該也不是個案，而且iPad螢幕雖然開到最亮也會有稍微的Banding情況，但都沒有MBP嚴重，雖然平時外接不影響但是這價格的筆電螢幕出現這種問題還是令人不太舒服啊……上網找都是2010左右的討論，後來好像都沒聽說有人提起(ry 參考資料\b測試網站 The Lagom LCD monitor test 檢查MacBook的LCD面板製造廠商（包含Air &amp; Pro Retina） macOS Mojave: invalid active developer path","link":"/2018/10/Macbook-Pro-2018-Color-Banding-問題/"},{"title":"iPad Pro 繪圖心得 (含其他繪圖螢幕簡易比較)","text":"iPad Pro入手也大概三個多月了，稍微詳細寫一下在繪圖方面的心得。先聲明一下畫圖只是我的業餘興趣，而且軟硬體使用上因人而異，所以內容僅供參考哦(´▽`) 硬體 軟體 總結 硬體P.S 在買iPad到寫這篇心得中間，Apple又推出了iPad 2018，讓iPad Pro不再是唯一支持Apple Pencil的裝置了，在硬體篇後面會提到一些差異。 硬體的部分，2017 iPad Pro 10.5”，A10X處理器在目前相關使用上都算相當順暢，畢竟4K影片剪輯都沒問題，不過在跑特效跟做些大量圖層變形的速度上當然還是比不上桌上型CPU，RAM 4G其實在iOS上用起來挺夠的，圖層開到上百(Clip Studio Paint, 畫布A4 350DPI)基本上都還是能跑，不過如果這時還要多選幾個圖層做特效或變形的話就會非常吃力(整個卡住等一陣子)，所以如果需要畫比較精細圖層又開多的話還是電腦畫起來舒服些。 BTW iOS11的多視窗跟Dock真的非常好用(雖然iOS11一開始bug還真不少)，iPhone上可能沒什麼感覺，不過在iPad上能大幅提升工作效率，畫圖弄個懸浮視窗放參考圖簡直不要太方便XD (不過還是有軟體尚未支援，這就得等開發者更新了) 螢幕的部分Retina(2224 x 1668, 264ppi) + P3 廣色域顯示效果自然不再話下，加上抗反射塗層降低螢幕反光，在大部分情況下還是能清楚看到螢幕(拿普通的iPad螢幕去比一下就很明顯了)，不過螢幕畢竟是玻璃做的，Apple Pencil的筆尖是塑膠，可以想見在玻璃上寫字畫圖真的挺滑的，貼霧面貼雖然可以增進摩擦力不過也會讓顯示效果下降，這部分可能要依照個人喜好做抉擇了，我個人還能夠適應咕溜的感覺，不過也是看過有人因為這樣畫不下去的XD 另外值得一提的就是ProMotion，在需要的時候會提升FPS到120Hz，所以Pro在滑動介面的時候會特別順暢，當然也讓繪圖筆跡能夠更及時的跟上筆尖，不過其實一般畫圖的速度是察覺不太到的(跟60FPS螢幕比較)TrueTone即時調整色調這部分跟繪圖相關度並不大就不另外多說了。 電池續航力方面，中間亮度，平時使用畫畫圖一天可以差不多至少8~10小時左右，算是挺夠了。你的筆可能沒電的比較快，不過可以插上iPad長ㄐㄐ15秒就能續命30分鐘，不成問題。 Apple Pencil 如同官網所廣告的，還真的是一隻魔法棒XD，寫下去真的有”Pencil”的感覺(當然除了紙的質感差了十萬八千里，玻璃很滑)。壓力感應等級普通，不過算是夠用了，靈敏度也相當不錯，而且傾斜感應意外的好，我用起來的感覺已經超越Wacom了(不過我覺得可能是軟體跟系統的問題讓Wacom的傾斜感應用起來不是那麼順手) 再來就是準確度，我只能說這是我用過最準確的螢幕繪圖筆(Cintiq的部分我會在下方對比提到)，基本畫下去就是再你想的那個位置，許多螢幕繪圖的問題就是準確度不是很完美，總會覺得下筆位置稍微落差或是接近螢幕邊緣會為一的更嚴重，不過對比Cintiq系列來說，缺點可能就是需要碰到板子才畫下去，Cintiq能在筆靠近螢幕時就顯示出筆刷的圓圈，能夠清楚知道落筆點跟筆刷大小。 外型就是水果風，重量OK好拿，電池筆續航算還可以，缺點估計是比一般的筆長了點，還有筆芯不像Wacom多元(至於充電方式我已經不想吐槽了)。 對比一般繪圖板Wacom Intuos Pro (2017) 這塊Intuos Pro是非螢幕繪圖板裡面我最喜歡的，目前顏值最高的板板，握筆相當舒適，還有那個8192的黑科技壓感，或是選擇Paper配件就可以獲得把一般紙張書寫轉成數位的更黑科技，跟那個摸起來很舒服但其實對我根本沒卵用的圓盤，板子的表面寫起來阻力適中也不滑控筆很穩，如果是和我一樣很習慣不看筆尖畫圖的真的是目前最好的選擇了。Wacom大法好! (不過吐槽一下Wacom你把無線連線方式從2.4GHz改成Bluetooth之後感覺更lag了，雖然上次更新韌體有改善可是還是…) Wacom的筆我基本上沒話說，沒電池拿再久都不累，按鍵好按握感舒適(入門Intuos的筆我覺得沒很舒服就是)，還有筆尾那個裝飾性質大於實用性的橡皮擦，壓感一流(同壓感不同廠牌裡面用起來還是覺得Wacom最好)，除了傾斜感測輸Apple Pencil外基本上沒什麼問題了。還有那個握套很容易留痕跡就是，雖然能換。 對比Wacom Cintiq Pro / MobileStudio Pro Cintiq系列我只有在Wacom展示間用過，就簡單說下試用心得。 恩…手邊拍的Cintiq剛好就只有這張(? 先講Cintiq Pro，他需要外接主機/筆電才能夠畫圖，相較iPad的優點除了螢幕大小外就是上述提到的落筆能看到範圍圓圈，iPad都要下筆才發現筆刷切太大，還有壓感很棒，Wacom的優良傳統。缺點沒法獨立使用，畫久了螢幕挺熱的…手放在上面不是很舒服(iPad頂多溫溫的)，最大的問題是由於螢幕不像iPad Pro的貼合螢幕…所以螢幕跟外層玻璃有一小層間隙，所以看的角度不是很正的話下筆會看起來稍微偏掉(其實位置沒偏)，撇除解析度跟P3的差距外，剩下的就是反應速度稍差(感覺還是軟體問題導致，不過Pro的120Hz應該也是關鍵之一)。 MobileStudio Pro基本就是繪圖平板，優點的話就是跑Windows系統，各種軟體支援，跟電腦操作基本上一樣,效能比iPad好(當然價格也是爆炸貴)，其他優點基本上跟Cintiq差不多，缺點是那螢幕又更燙了，後面還有個CPU在加熱，硬體效能麻…就是還可以，不過真的會很燙，其他問題跟上述一樣，差在可以獨立使用不必依賴主機。 跟iPad比起來，Wacom的繪圖螢幕是相對更專業很燙的工具選擇，不過我覺得還是有一定的缺點(尤其MobileStudio還聽說不少故障的問題…)，我個人是用Intuos更舒服習慣就是…除了打稿有螢幕更直覺會更快外其實對我而言效率並沒有特別顯著的提升。 對比iPad 2018 圖片取自: https://www.apple.com/tw/shop/buy-ipad/ipad-9-7 Apple前陣子推出的教育市場面向的新入門款iPad 2018，基本上就是2017 iPad升級了處理器到A10、支援了Apple Pencil，然後價格降到差不多一萬台幣起跳，個人認為有支援Apple Pencil的話這價格其實挺值得購買的，看了不少之前使用Pro的畫家/設計師跑去用2018的心得都是，除了螢幕(沒有P3沒有貼合螢幕沒有抗反射塗層沒有120Hz)，硬體(2G RAM)這些缺點外，對繪圖來說是非常不錯的選擇(而且價格只有Pro的一半左右，不過還是要算上還要另購Apple Pencil的資金)。 主要缺點沒有貼合螢幕所以下筆沒Pro那麼的爽(玻璃跟螢幕有間隙)，不過體驗看上去還是相當不錯，塗塗鴉的話RAM影響也不大，可能就是多工模式下只有單一視窗能夠使用比較可惜。 這價格對學生黨也是一大福音，當然有錢或想認真玩就上Pro，相信拿到之後不會後悔的(單指繪圖方面，目前除了繪圖跟當輕文書筆電外我認為還沒有必要上Pro的理由)。 不過這個時間點，Apple可能要出iPad Pro 2了，可以在觀望看看。 對比其他有繪圖功能的螢幕 像是Surface、Pixelbook之類的有壓感筆的平板筆電等，Pixelbook我借過朋友的試用過(軟體Sketchbook)，下筆算挺準的，不過就如同其他非Wacom的繪圖螢幕一樣明顯畫出來的線條跟不太上筆尖，還能夠畫不過可能需要習慣。 壓感部分還算及格，軟體的部分可能比較頭痛得灌Linux才有一些比較方便的軟體(而且支援性可能有問題)。至於Surface的話我沒實際用過，不過在Youtube的很多測試影片中明顯延遲是最高的(雖然數據上寫起來延遲比Apple還低…)，而且常看到各種下筆不準的問題，用起來可能不是很舒服。優點的話，Windows的繪圖軟體相當成熟了，而且做為筆電也更方便處理各項工作，希望微軟以後能改善這個產品，我個人認為挺有潛力的XD 硬體比較 比較的部分單純是我”個人的感覺”，不管效能等數據而是直接操作的第一感想(Other代表其餘上述有繪圖螢幕的產品) 測試項目 比較 壓感 Cintiq系列 &gt;&gt; iPad Pro = iPad 2018 &gt; Other 反應速度 iPad Pro ≥ iPad 2018 &gt; Cintiq系列 &gt;&gt;&gt; Other 攜帶方便性 iPad Pro = iPad 2018 &gt;&gt; MobileStudio ≌ Other (Cintiq Pro單純螢幕無法單獨使用) 價格部分可能就看自己能夠負擔接受的狀況，由於有些產品定位不一樣價格自然不同所以就不多做比較。 軟體當然硬體在好沒有好的軟體幫助，也只是中看不中用。軟體的部分主要就寫寫iOS上的繪圖軟體在Pro上的表現，畢竟Windows上的繪圖軟體大家應該都很熟了，就算不熟網路上也一卡車的資料能找。 以下是我試玩過的幾個繪圖APP，硬體都是Apple Pencil + iPad Pro 10.5”目前還沒很多時間把每個APP都摸得很透徹，基本只說些基本的心得。 CLIP STUDIO PAINT for manga 價格PRO: NTD 140/每月 NTD 780/每年 (每月NTD 65)EX: NTD 270/每月 NTD 2,090/每年 (每月NTD 174) CSP應該是日系插畫跟漫畫市占最高的軟體了(至少官網是這麼說的)，相信不少畫手都在PC上都用過，三不五時的特價也讓不少用SAI的跳槽了，SAI:你怎麼這麼熟練阿。畢竟除了一些筆刷上的設定跟效能優勢來說，CSP的功能跟資源還是更豐富些。 大約在去年(2017)CSP移植到了iOS上，對，完完全全的移植，除了各種好用的功能外連UI都原封不動的移植了XD，所以它的UI整個就是把桌面的樣子直接縮到iPad的小螢幕上，挺擠的又小，點擊不是很方便… 雖然在10.5吋螢幕上擠了點，不過他們對於鍵盤快捷鍵也是完全從PC版搬過來，所以接個藍芽鍵盤就可以用鍵盤操作畫起來也比較快，是目前用過的APP裡對鍵盤支援度最好的，不過可想而知帶出門畫世界麻煩。其他功能都跟桌面一樣了就不多說。手勢方面有支援(雙指回上一步等)，也有防掌觸(要在設定中設定)，Apple Pencil的支援度跟順暢度也完全沒問題。 除了UI外，功能上絕對是App Store裡面繪圖軟體數一數二的，另外又有大量的社群資源(筆刷,素材, etc)，熟悉PC軟體的話一定能快速的上手，畢竟就是完全一模一樣。現在也支援了各種素材筆刷作品同步的功能，只是目前UX設計還不是很好，有些地方讓人摸不著頭緒，希望之後會改善，我甚至有遇到作品同步不了的，同步速度也很慢。 再來就是月費可能很多人不喜歡, 不過一開始訂閱EX版的話有贈送6個月的試用期還算佛心，之後可以選擇要PRO版或EX(視個人需求)訂閱，年繳比較便宜(後來更新的，不然原本只有EX版月訂真的很貴)，不過應該很多人還是希望能夠買斷就是，看看那可憐的3.7評價。PRO的年繳價格我覺得還能接受就是，畢竟人家也是要賺錢的XD MediBang Paint for iPad 價格: 免費 知名的免費繪圖軟體，優點就是各平台都有，而且都免費! 功能上用起來也算挺齊全的，漫畫還沒畫過不確定，算是個資源跟功能稍微少些的CSP，UI設計上有針對隨身觸控裝置優化過所以不會像CSP那麼難按，對於手勢支援相當良好，也可以開防掌觸，只是對於鍵盤快捷鍵就沒有可以設定的地方，只能用他預設的(或是我沒找到?) 整體操作上流暢沒什麼毛病。 自訂筆刷等也跟桌面版一樣，沒什麼限制，開多圖層效能也不太會掉，對於那些不想花月費買CSP的，MediBang Paint是個值得一試的選擇，再說一次重點這玩意免費阿XD Procreate 價格: NTD 300 算的上iOS上UI最好同時功能也相當齊全的APP了，基本上很多人都會推薦的軟體，筆刷跟素材內建的就相當豐富，甚至有內建過程的錄影重播功能，防掌觸之類當然也是支援的。 UI操作超級流暢又很乾淨，不像CSP那樣擋東擋西又不好叫出來，忍不住一直縮放畫布，筆刷設定好的話搭配Apple Pencil有種飛天的感覺，傾斜感應非常的棒，所以這軟體我後來變成拿來寫藝術字，功能跟花樣搭配挺多的，目前還玩不多，有更多詳細的心得會再補充XD 缺點的話大概就是在同解析度同尺寸的話布上圖層上限記得比CSP低，我是習慣開很多圖層的所以可能比較有機會遇到這問題。 另外這軟體只有NT 300算是相當超值了，推薦如果可以就入手個玩玩，那些筆刷有時候好像撇一撇也很藝術的感覺，在外面可以拿出來撇幾筆裝逼。 Autodesk SketchBook 價格: 免費 我們偉大的Autodesk讓SketchBook的Pro也免費啦!!(要先註冊個免費帳號)前陣子Pro版好像要NT30還90，也沒多貴所以乾脆免費了嗎? 優點基本上就是界面簡潔，有防掌觸(跟下面要介紹的Tayasui Sketches差不多)，手勢跟一些壓感也能夠設定，不過整體功能就是比較適合拿來塗鴉、隨興創作，筆刷能夠調整不過應該無法自行製作筆刷，一些特效調整也不如上述幾個軟體。 還有它也提供了過程錄影的功能，不過要自己手動去開，不像Procreate本身預設就有錄下過程了。 發現我沒在這軟體上畫出個有樣子的東西，放個有趣的鏡像工具好了 Tayasui Sketches 價格: 免費 (Pro版NTD 180) 使用跟功能上其實跟SketchBook大同小異，UI的操作上也差不多，價格也不貴(不過Sketchbook已經免費了)。 值得一提的是我特別喜歡這APP的鉛筆，原始設定畫出來就挺像真的鉛筆XD，丟圖給別人看甚至會誤認為是手繪的，目前用過的APP裡面就它的鉛筆最棒了! 其他優缺就參考SketchBook的吧，反正就是很像除了Pro要錢外。 Adobe Photoshop Sketch 價格: 免費 Adobe出品，居然免費而且不會lag或死機???目前還沒玩很久，不過我認為他應該很適合畫一些素描或背景的草圖，或是一些設計構想的塗鴉，剩下在輸出到其他軟體處理，尺規相當豐富而且操作直覺，不過筆刷那些能玩的就相對少了，防掌觸跟手勢也都有支援，方便的打稿APP。 軟體比較 測試項目 比較 功能 CSP &gt; Procreate ≥ MBP &gt; SketchBook = Sketches = PS Sketch 操作方便性 Procreate &gt; SketchBook = Sketches = PS Sketch = MBP &gt; CSP(無鍵盤) 流暢性 目前使用下來感覺差不多，都算流暢，不過Procreate的UI動畫做得特別好。 總結如果是個非專業的學生黨，想買繪圖螢幕玩玩或提升畫圖效率，我會推薦iPad 2018，有錢的話能上Pro會讓你的體驗更舒適，但那價差就看自己評估值不值得了(而且Pro 2可能快出了可以等一波)，並不會說買普通iPad讓你畫得很不舒服之類，平板帶著到處塗鴉或寫生很有意思的XD。 至於Cintiq的價格更高，優缺就如硬體篇所述，如果是職業的選專業螢幕繪圖板可以大幅提升效率，而且Cintiq很耐用聽說可以戰十幾年之類，不常出門的可以直上Cintiq接電腦不用買iPad了(MobileStudio看上去故障率實在太高，不是很推薦)。 想買平板筆電畫圖的可能可以跟人借來試試看能不能夠接受，像是Surface的優勢就是它本身是台電腦，還可以做很多iPad做不到的事情(iOS目前頂多輕文書，說要當成筆電替代對我這種需求比較高的還有一段路要走)，目前有出繪圖筆電的廠商基本上都還做不到Apple或Wacom的順暢度跟準度，隨筆塗鴉倒是還能接受就是。 iOS的軟體上述那幾個我都蠻喜歡的，真要說的話如果你平常就有再用CSP而且用得很順，那麼CSP是一定要入手的(雖然說是訂閱制)。Procreate也非常值得一玩，畢竟CSP是把電腦的軟體縮小來畫而已，它能讓你體驗到在平板上繪圖的感覺，搭配各種手勢相當方便，還有不少神奇功能，價格才NTD300，好APP不買嗎XD 什麼你說其他軟體呢?免費的當然直接載來玩啊XD 最後老話一句，不管什麼硬體或軟體，你的畫技才是決定畫的好不好的關鍵，也是有人用Surface用小畫家畫出很棒的作品，當然也有拿Cintiq畫的慘不忍睹的，工具只能讓人更舒服的創作，所以不管用什麼軟硬體… 現在就趕快去努力畫圖吧! 只是想放個Meme然後我要去摸魚了 Thanks for watching (´▽`)","link":"/2018/05/iPad-Pro-繪圖心得/"},{"title":"Brainwavz B2 BeatsX W1晶片無線改裝","text":"前陣子買了Airpods來玩玩，發現Apple的W1晶片真心強大, 連接方便穩定, 延遲非常低(可以看影片的那種), 續航力優秀 不過音質就只能說比Earpods好一點點，然後貴了五倍價格。 Beats被Apple收購後他們的無線耳機也都使用了W1晶片，聲音也提升了(說好當然CP值也是沒多高，不過至少不是只會發出聲音的髮箍(笑)，之前BTS買電腦時剛好送了Solo 3 Wireless，試聽了一下聲音真是跌破眼鏡 其實是之前太差，靈光一閃想到如果把W1晶片改裝到一般耳機上或許能解決平常市面上大多數藍芽耳機續航&amp;音質&amp;穩定延遲的問題。 Google了一下相關資料，果然Head-Fi上有人也有這個想法並且實踐成功了，他用的是BeatsX，後來在考慮價格與改裝方便性上的確是BeatsX最適合做入耳式的改造，於是我也去收了個二手的BeatsX。 利申一下我不算是多專業的燒友，以前稍微玩過而已，現在已經少碰。聲音相關感覺因人而異本文章僅提供改裝技術交流 過程紀錄首先確認好BeatsX能發出聲音後，從音控後方爽快的剪下去吧！ 破壞東西就式特別的爽 這次要變成無線的是伴我多年的Brainwavz B2(不知道的童鞋，這隻聲音跟DBA-02一樣，同一家代工廠)。 很久以前因為線材掛了所以我把它做成可換線式的(MMCX接口)，想法很簡單，BeatsX的W1晶片與線控區後面先接上CM插座-&gt;自製CM公 to MMCX公線材-&gt;B2單體(MMCX母)，有人可能想問為何中間要多一段CM，主要是希望以後能夠做擴充(CMtoCM)這樣兩種都能使用，至於稍微影響的音質，藍芽耳機要求的是方便不是嗎lol? 剪開麵條線材後發現裡面有五條漆包線+兩條強化抗拉線材在一旁，不是很好處理所以撥線長度大概要1~1.5CM會比較好操作。 線材定義在測量過後發現在最外兩側的分別是紅色信號輸入跟黑色GND(不算強化線材)，中間三條應該是線控的，不過兩邊都有可以不理會直接剪掉。 接著焊接上其他測試用單體試試看有沒有接錯，聲音是否正常。 焊上CM母座。 CM公插。 同場加映幫朋友改的CM公插，太久沒焊了，有點傷眼sry囉。 完成！ 眼尖的童鞋可能發現了，由於發生了點小插曲所以之前買的MMCX插針沒法用，只好把一條幾年前去Oyaide買材料的自製線拆了撐一下，到時候在幫他買個殼QwQ。 幫朋友改的CM版BeatsX 感想聲音挺不錯的，不過也是不建議給阻抗大或不好推的耳機使用，除了耗電外可能聲音也推不太開。 有W1晶片，續航延遲都比市面上絕大多數的藍芽耳機好不少，此改造又兼顧了一定的音質，可謂大成功啊！ 參考資料Head-Fi - Apple Beats X mod for IEM","link":"/2018/09/Brainwavz-B2-BeatsX-W1晶片無線改裝/"},{"title":"MacOS強制外接螢幕輸出RGB","text":"之前發現Mac外接螢幕的灰階有點奇怪，感覺反而沒在Windows上順暢，於是Google了一下發現原來MacOS用HDMI接非Apple官方認可的螢幕時會當成電視用YCbCr輸出而不是RGB，所以會造成顯示器顏色上出現問題或是字體渲染不清的情況。人性化的系統 一開始想說Retina用的字體到1080p上會比較糢糊是正常的就沒特別注意到，顏色部分因爲我的螢幕（EIZO EV2450）也有支援YCbCr 4:4:4輸入又開著TrueTone，所以平常也沒特別看出有問題。既然是電腦螢幕那還是乖乖修改成RGB輸出吧嗯！ How下圖是初始的顏色設\b定： 在做之前我們需要先關閉 MacOS 的 Rootless 功能（如果會用\b sudo 也可以不關，直接往下的步驟） 關閉 MacOS 後，按住 CMD+R 開機，上方Utilities選單找到Terminal開啓，輸入 csrutil disable \b，在重新開機就可以了，做完步驟後\b可以再用一樣的方法開啓（改成輸入 csrutil enable ）。 首先下載 \bEdid-Patch 確定外接螢幕接上 Mac 打開Terminal，進入下載\b edid-patch 的資料夾（不會的可以直接放在家目錄），然後執行 ruby patch-edid.rb 。 然後會在同目錄下產生一個資料夾 DisplayVenderID-xxx\b ， 打開Finder按 Cmd+Shift+G 前往目錄 /System/Library/Displays/Contents/Resources/Overrides，把\b剛才產生的資料夾放進去。(沒有關閉Rootless的話可以用 sudo cp 移動資料夾) 重開機，看一下\b顏色設定確認\b強制RGB後就完成了！（有\b關Rootless記得開回來） P.S. 我的EV2450強制RGB後發現對比很奇怪，後來螢幕上的設定看了一下原來Range Extension預設Auto，設定成關閉後，螢幕就正常了\b！ 經過強制RGB後灰階也正常囉。 參考資料Github - adaugherity/patch-edid.rb Force RGB mode in Mac OS X to fix the picture quality of an external monitor","link":"/2018/10/MacOS強制外接螢幕輸出RGB/"},{"title":"利用 BetterTouchTool 在 Touchbar 上顯示 CPU 溫度","text":"TouchBar?覺得很雞肋的話，不如手動讓他實用吧！ How 下載 osx-cpu-temp 。 進入下載的資料夾後執行 sudo make install 安裝。 在 BetterTouchTool 裡新增 Widget/Gesture，選擇 ‘Run Shell Script and Show Return Value’。 雙擊打開進階設定，更改 LaunchPath /usr/local/bin/osx-cpu-temp ，下方可以調整更新間隔（預設5秒）。 選擇要不要新增icon跟其他外觀設定，完成！ 參考資料Display CPU Temp","link":"/2018/10/利用BetterTouchTool在Touchbar上顯示CPU溫度/"},{"title":"利用Applescript快速切換TrueTone","text":"2018 Macbook Pro終於可以使用原先發佈在iPad Pro的True Tone功能，讓螢幕偵測周圍的光線來改變螢幕顏色，使用上相當舒服。不過如果要使用影像處理\b\b或繪圖等對顏色準確度有需求的工作時就得把它暫時關掉才不會影響，然而每次都要進入設定調整也是挺麻煩的，不如利用Applescript爲我們代勞。 How\bGithub - Ture Tone Toggler \b目前還找不到如何透過command line設定True Tone，所以用Applescript控制設定，可以把它跟BetterTouchTool結合，利用快捷鍵或Touchbar之類快速開關True Tone功能。 此程式碼修改自Reddit上的一篇討論，我加上判斷以及提示的功能，讓使用者可以明確知道現在操作是開啓或關閉True Tone。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647tell application \"System Preferences\" if it is running then quit end if end telldelay 0.2activate application \"System Preferences\"tell application \"System Events\" tell process \"System Preferences\" click button \"Displays\" of scroll area 1 of window \"System Preferences\" delay 0.8 click radio button \"Display\" of tab group 1 of window \"Built-in Retina Display\" set TrueToneCheckbox to checkbox \"True Tone\" of tab group 1 of window \"Built-in Retina Display\" click TrueToneCheckbox set TrueToneState to \"ON\" tell TrueToneCheckbox if not (its value as boolean) then set TrueToneState to \"OFF\" end tell end tell quit application \"System Preferences\" end telldisplay notification \"True Tone \" &amp; TrueToneState with title \"True Tone Script\" sound name \"Submarine\"delay 0.8say \"True Tone has been turned \" &amp; TrueToneState 有需要自定義通知的部分可以修改 display notification 的部分，不想要語音提示可以註解掉 say 那行。 參考資料Reddit: Has anyone figured out how to return the true/false status for True Tone with AppleScript Displaying Notifications","link":"/2018/12/利用Applescript快速切換TrueTone/"},{"title":"YD68藍牙機械鍵盤組裝及心得","text":"最近想找一把60%的機械鍵盤來換掉之前的Ducky One RGB，當然Ducky One還是一把不錯的鍵盤，主要考慮到想弄個Mac/Win通用配置的，以及我桌子上東西有點多（繪圖板跟筆電）60%可以省下桌面不少空間。 #需求 這次選鍵盤的主要需求是 60% 藍牙雙模 可自定鍵位 需要有正常配置的方向鍵（Win下需要，之前用過Shift當up的很不習慣） 希望除了60%能有多幾個按鍵，繪圖時Del之類可以不用組合鍵就能完成 翻找了一下發現YD68是目前最接近我需求的，而且接口是Type-C，不過比較可惜的是藍牙只有3.0（有看到GH60 BLE4.0的），也支援單色背光跟底部有RGB燈，不過這次不打算搭配透光鍵帽所以背光功能就先放一邊了。 以下是收到的YD68套件，PCB本體、腳墊螺絲、定位版、塑膠外殼、衛星軸、另購的櫻桃軸（青與茶）、電池（我買的時候賣家少寄）。 過程 鍵盤軸體佈局。 記得要先裝衛星軸。 PCB背面，把軸體焊上。 接下來準備加上電池。 要先把塑膠殼的加強筋剪掉一部分，先量好長度，剪下去之後再直接推斷即可。 最後在旁邊加上緩衝，將電池黏上。 上鍵帽！完成！ 這次用的是KBDfans買的Dolch配色PBT鍵帽（OEM高度），市面上看到的好像大部分Dolch都是原廠高度，比較喜歡OEM，覺得原廠高度太平了。不過感覺這個ESC字體顏色可以再深一點更好，還有Shift的圖案感覺跟字體有些不搭。 因爲是要給Mac用的，所以順便買了Mac的增補鍵，（補充下YD68的一些規格可以跟TADA68規格共用），也是除了字體不太統一（我說怎麽連Opt跟Cmd都能不太一樣XDD），其他基本上都不錯。 刷鍵位的線上工具在這裡 http://ydkb.io/ ，網站上也有教學就不細說了。目前RGB LED的顏色控制我自己試不太出來，不確定是Bug或是我操作太差，有後續心得再回來補充。 藍牙部分連接穩定度與雙模切換速度都還不錯，不過有少數時候會稍微明顯一些的Lag不確定是我這邊干擾多的原因還是怎樣，可能還要多測試才能確定。 關於在Win跟Mac之間切換，我建議鍵盤直接按照Win的設定，然後到Mac內對調Cmd與Opt的位置，這麼做的原因是因爲改Mac鍵位會比Win上要來的簡單很多。 （另外我也順便把Ctrl跟Caps Lock對調了，類似HHKB配置） 同場加映鍵盤包！感謝觀看！ 目前遇到了點小問題，不確定是個案或是PCB設計問題，R1那排有機率發生連點，原因還在調查中，想入坑的可以多考慮一下（國外跟對岸都沒看到有相關案例）","link":"/2018/10/YD68藍牙機械鍵盤組裝及心得/"},{"title":"利用 Raspberry Pi 搭建 NAS","text":"就只是個基於 Samba 的簡易 NAS 架設過程，沒有任何動靜。 BTW 目前還是使用 Pi3B ，升級後會在補上 Pi4B 速度的差異心得。未來打算再裝上 Aria2 讓 Pi 具有下載機的功能。 準備工作首先安裝好最新的 Raspbian Lite 版本，開機後先進行基本設定（ 可以單純ssh操作省去外接的麻煩，關於headless可以參考我之前的文章：Raspberry Zero W Headless 自動連上無線網路與開啟SSH ） sudo raspi-config 把預設密碼之類改一改，還有地區之類等基本設定。設定完後先更新一下套件。 sudo apt-get update &amp;&amp; sudo apt-get upgrade 外接硬碟設定首先用 lsblk 找到要當 NAS 硬碟及分區(這邊是 sda2 代表 a 磁碟的 2 號分區) 格式化為 ext4 格式，這邊推薦用 ext4 效能最好（最近在做 NAS 優化，發現XFS的效果會更提升一些，可以參考XFS 檔案格式） sudo mkfs.ext4 /dev/sda2 有些人可能會有疑問，如果用 ext4 會不會讓我無法在其他系統上讀取，這部分並不用擔心，因為這個硬碟格式只是給 Server 讀取寫入用的，客戶端支援的檔案格式不會影響到 建立掛載點 sudo mkdir /mnt/Share 查看硬碟分區的 UUID 並把它複製下來 sudo blkid 編輯 fstab 添加掛載資訊 sudo vim /etc/fstab 在最底行填上（”YOUR_UUID”替換成剛才複製的UUID） UUID=YOUR_UUID /mnt/Share ext4 defaults 0 2 掛載硬碟(分區) sudo mount -a 查看掛載狀態是否正確 df -h 最後開啟硬碟權限 chmod 777 /mnt/Share 設定 Samba Server接著安裝 Samba sudo apt-get install samba samba-common-bin 完成後編輯 /etc/samba/smb.conf sudo vim /etc/samba/smb.conf Global 部分填入限制使用者登入才能存取的設定 12[global] security = user 在文件最下面填入如下的分享目錄設定 1234567[share] Comment = Pi Shared Folder Path = /mnt/Share Browseable = yes Writable = yes guest ok = no valid users = username PS：valid users 後面替換成自己的 username。 接著我們要加入 smb 的登入帳號： sudo smbpasswd -a username 依照提示輸入密碼設定完成，最後重啟 Samba 服務完成設定。 sudo service smbd restart 都設定完成後就可以在 Windows 網路芳鄰上看到 NAS 了（由於有限定使用者，要同樣帳號名稱密碼才能進的去，若要不希望限定帳號記得在 smb.conf 把 guest 功能打開） MacOS 的話則在 Finder 下按 CMD+K 填入 smb://raspberrypi.local/Share ，輸入剛才設定的 smb 使用者帳號密碼即可連入 NAS 。 補充XFS 檔案格式安裝 XFS 工具 sudo apt-get install xfsprogs 格式化 sda 硬碟為 xfs 格式 sudo mkfs.xfs -f /dev/sda 查看掛載狀態 df -h 本地硬碟讀取速度測試安裝 hdparm sudo apt-get install hdparm 測試讀取： hdparm -t /dev/sda 測試寫入： hdparm -t --direct /dev/sda 參考Browse Raspberry Pi in OSX Finder via Samba How to restart samba server? How to create and mount an XFS file system on Linux hdparm 測試硬碟讀寫速度","link":"/2019/10/利用RaspberryPi搭建NAS/"},{"title":"Google Pixel USB-C Earbuds 耳機開箱","text":"前陣子Google\u001c發表會發佈了Pixel 3的消息，這次臺灣也在上市清單中，雖然買不起不過上Google Store晃了下發現這次手機附的Pixel\b USB-C耳機也有單獨販賣，售價NT990跟Apple的\bEarpods差不多，身爲G粉雖然買不起手機（還有XL的瀏海好醜我實在太失望了）但是這還是能充值一下信仰的！二話不說就跟朋友一起下訂，\b但是送貨過程坎坷，一下是延期出貨一下是卡海關，\b硬是等了兩個多禮拜才終於收到(ry 開箱簡單拍一下包裝： 順帶一提，這防僞標籤找個角度就會出現Google的經典配色，很有趣。 拆箱！ 接着把上蓋提起，下面是一些安全跟保固說明小冊子，說明書在裝耳機的蓋子上。 本體，耳機的部分除了最外面圓形那片蓋子是霧面的大部分是亮面，上方有G字樣Logo，不過不仔細看不清楚就是了，耳殼外觀其實挺像Apple的設計。 BTW上面耳機線套了\b透明軟管繞個小圈可以調整大小，符合各種耳型。 佩戴方面相當的輕，比Airpods戴起來更無感，很舒服，甩動\b跑跳也不容易掉落！線材部分比我想象中細了點，大概跟Earpods差不多吧，不知道用久會不會發黃。 線控部分一面是亮面，按鈕側是霧面，中間除了接聽電話跟播放暫停音樂外，長按可以呼叫Google Assistant，但我覺得中間按鈕設計不是很好，太小容易按到音量控制，一開始測試的時候不小心按到增加音量差點被\b嚇到XD。 \b雖然官方網頁上寫著搭配Pixel才能發揮最大功能，但是我接在Asus Zenfone 4 Pro上也沒有任何問題，GA呼叫也OK。所以看來搭配Pixel什麼的果然只是話術 按理說只要有Type-C音訊輸出的裝置都能用，所以我順便裝上MBP試試，功能也完全支援！呼叫Siri也沒問題，而且甚至比Airpods好，我用Airpods在MBP上叫Siri是聽不到Siri說話的，要從螢幕看，但Pixel Earuds就可以直接聽到Siri與其對話。 另外在iPad上用Airpods呼叫Siri時雖然聽的到Siri說話，但聽起來會變成單聲道而且音質變差，Pixel Earuds叫Siri聽起來很正常（接Macbook Pro）不知道是不是有線耳機的關係。還有一點：Airpods在切換音樂跟語音助理的過程是很僵硬的停掉音樂，Pixel Earuds卻有FadeIn、FadOut的效果，跟在Android上叫Google Assistant體驗一樣好，\b小細節聽起來舒服多了。 說完優點也該說說缺點了：音質不怎麼樣，Airpods的音質普普差不多1k左右的價位，Pixel Earbuds聽起來更差，低頻下潛、高頻跟人聲等幾乎全輸Airpods，\b對一般人聽起來可能\b還行或普普就是，但CP值相比之下確實不高，當然也有可能是因爲初開聲還沒RunIn的關係，不過在意音質的朋友基本上不用考慮了。 雖然早料到音質不怎麼樣，但畢竟爲了細信仰嘛沒什麼大不了能不能聽其次有Logo最重要\b。 最後來張\b跟Airpods的合照，作爲一個NT990的Google線控Type-C耳機我覺得還是可以考慮的，雖然我沒用過其他的Type-C耳機，\b不過不用說”Hey Google”就能直接呼叫GA\b真的挺方便的，不用像Airpods\b敲了還要”Hey Siri”才會理你，在外面尷尬度破錶（後來發現都是按鍵或敲擊就有了，不用另外呼叫），可惜以音質來說的確是不怎麼突出就是。 結論：有需要Type-C耳機或呼叫GA功能、而且對音質沒那麼要求的朋友可以考慮看看Pixel Earbuds，還有\bGoogle信仰者不收說不過去啊，價格適中，音質殘念（BTW耳塞式基本上不用考慮隔音了，有降噪需求的也可以跳過），防水部分沒測試不過我覺得戴着運動\b基本上也蠻適合的！ 有興趣的可以自行去Google Store看看，感謝觀看！","link":"/2018/11/Google-Pixel-USB-C-耳機開箱/"},{"title":"Delux Designer 單手機械鍵盤使用心得","text":"個人平常電繪認爲最不可或缺的就是快捷鍵，可以在各種工具間快速切換也是電繪能夠大幅提升效率的原因之一。不過因爲繪圖板有一定大小，加上鍵盤螢幕桌面空間不夠大的可能會不好調整，尤其用繪圖螢幕的更難舒適的擺放鍵盤，所以很多人會希望有個小的單手鍵盤可以在狹小的空間也能輕鬆的按快捷鍵來提升工作效率。 Designer 單手機械鍵盤目前市面上最多人用的單手鍵盤應該是某蛇的單手遊戲鍵盤，不過我覺得價格有點高加上有點醜，雖然是\b比較符合人體工學，但還是想找個便宜又好看的玩玩。之後在社群網站上發現了今天的主角「 Delux Designer 」單手鍵盤的廣告，後來\b在Kickstarter上集資我就衝去\bBack一個，記得Super Early Bird價格約60USD的樣子，相對於其他單手鍵盤算是便宜了不少，外觀也不錯（當然某寶上也有不少便宜的單手鍵盤，不過就方方正正的一堆按鍵\b不是很喜歡）。\b\b這邊附上KS募資頁面裡面也有產品介紹：Delux Designer - The Perfect Assistant for Designers 辛苦的群募過程一開始感覺挺順利，24H內就募得所需的\b資金，然而原本預計7月能拿到，卻硬生生的拖了一陣子。我的贊助編號是個位數的，卻等到8月初才拿到，想想就算了反正募資有風險，如果不是詐騙那晚一點\b還是能夠接受。但是拿到後才是麻煩的開始……\b \b當我興奮的打開包裝才發現原本問卷選的黑灰色版本，居然成了白色（包裝外註解還寫着BLACK），不得不說是看到有深色可選才決定下單試水溫的，這下要處理國際運算又很麻煩，沒想到的是看了看討論區居然許多人遇到跟我一樣的錯色問題，而且留言\b還被募資者無視（ry 再過了一個月後，看著許多人顏色收錯就算了，居然很多人都還沒收到，回應也相當緩慢，甚至我都拿到東西隔了很久才收到寄件編號，徹底無語。就在準備放棄之時他們終於回了Mail，表示因爲是初次群募所以處理的不是很好（可是他們介紹自己是創立逾十年的公司了？），希望收錯顏色的能夠理解看能不能\b接受不同的顏色，寄錯顏色又被放了鴿子一個月才回覆當然受不了，表示希望還是想要深色版本，橋了橋才終於讓對方寄正確的顏色過來，算是告了個段落（雖然我看討論區還有人沒收到……） 外觀聽了上面的碎碎唸，現在來看看產品本身吧。 簡單拍個包裝以及內容物： 內容物有：\bDesigner鍵盤本體、USB-C\b編織\b網傳輸線、說明書、募資達$100,000(HKD？)目標的收納袋 \b \b目前階段只有一種軸體可選：凱華巧克力白軸，之前沒碰過這種Low Profile軸，打起來還不錯，類似青軸，有段落，但也是挺吵的，\b如果想要安靜使用可能不適合（咖啡廳之類，絕壁會被白眼XD），除非之後有其他軸體可選。目前我還不敢拆來看\b，理論上能拆是能換軸就是。 鍵帽的部分也是意外的不錯，我原本以爲是廉價ABS感，結果摸起來是霧面但很滑順也挺有質感的，不過用久了會不會打油之類可能要過陣子才能知道了。 背光只有白光，發光\b模式\b目前有三種：全亮、呼吸、點擊發光，用Fn+Mode鍵切換\b，Fn+Esc可以關閉背光，轉盤部分\b只能常亮或關閉，\b角度小一點看其實轉盤挺刺眼的……希望之後的更新能夠調整亮度。 本體的做工還算\b不錯，這價格用鋁製機身已經不錯了，雖然我原本以爲鋁材表面打磨的會更細膩些。側邊\b是塑膠圍繞，邊上\b鑲着\b\b銀邊挺有水果風（類似iPad那種），白色的邊緣摸起來有種滑順的觸感，黑色就是普通的霧面塑膠，底部也有\b六個防滑腳墊。 對於線材不是隨便給條看起來廉價的塑膠線這點我是挺驚訝的，不過我自己喜歡用L插所以還是換成自己的USB線。 搭個Macbook很適合，尤其在沒辦法放整把鍵盤的地方這東西簡直是蝶式鍵盤救星！（看那閃瞎的轉盤……） 目前只有設計給右撇子用的，如果左手拿筆可能得在等等看之後會不會出了。 使用心得手感使用上其實比較適合手小的，手大點放不到掌托，而且因爲鍵帽幾乎是平的又比較緊密，手感一定沒有傳統高度機械鍵盤按起來舒服，\b爲了輕薄好攜帶還是得犧牲點東西。 \b 鍵區Layout部分（參考設定圖），上方是模式控制區：Num（數字區）、M1～M3（模式1～3）下方除了修飾鍵（Modifer）外都能自定義，支援巨集設定（Macro），然而這部分就出現了個問題，在MacOS下沒辦法使用Command鍵……這點就神奇了，他們的目標客群是\b創作者跟設計師，相關人士使用MacOS的不少，然而這設定讓這鍵盤在MacOS下幾乎沒法用，而且也無法像Windows上那樣修改設定（有不少人提及此問題，目前是說下一版本驅動會改善），然後Windows上驅動有時也會出現Bug，不過至少算是堪用。 雖然有問題但是MacOS目前有個方法能使用，由於修改鍵位比Windows方便不少，所以可以參考下圖改變該鍵盤的Modifer位置就可以暫時撐著用： 然後\b驅動無法設定可能就要去Windows設定鍵位以及巨集了（ry 轉盤部分無法自定義是硬傷，也是許多\b贊助者詬病之處，目前只能長按轉盤中間按鈕叫出下圖的選項來選擇預設的幾種功能（同樣說下版本驅動會提供自定義轉盤功能）。 還有\b看不少人討論目前不支援4k解析，也得等更新了。 其他基本功能上是沒什麼大問題，也不會有延遲的情況，若上述問題能改善其實整體算是相當不錯的單手鍵盤，而且能夠接上iPad使用沒問題呢！（iOS11、12皆可）雖然要買轉USB，但這樣用CSP時終於不用另外在找藍牙鍵盤囉XD而且新的iPad Pro\u001d換成USB-C應該更方便了，\b跟我一樣離不開快捷鍵的同學們可以考慮看看這種方式。 之後在考慮看看要不要自幹改藍牙好了，不然iPad轉接也是不太理想。 結論Designer的想法不錯，不過執行力欠佳，驅動草率尤其MacOS部分，但若\b修正上述軟體跟自定義問題，我覺得這價格算是挺值得一試的。硬體還有些許改善空間，轉盤感覺穩定度跟轉動的手感可以更好，若是未來能加入藍牙功能那操作自由度會更高更方便。某蛇的單手鍵盤，如果預算夠、需要長時間使用、沒有攜帶需求，還是可以的，反之可以考慮Designer這種。 至於單手鍵盤用一用的心得，很適合用繪圖螢幕的人使用節省桌面空間，或是鍵盤跟繪圖板位置不好擺放的使用者。當然這種可自定也支援各種軟體，利用巨集做workflow，只要你能按快捷鍵的軟體都行，畢竟說到底還是個鍵盤，要拿來畫2D3D、玩遊戲之類能想到都行（雖然我覺得這東西拿來玩遊戲根本：要玩去買某蛇吧），雖然官方說用這個能提升80%生產力我是不信啦XD大概有個40~60%左右就很好了。 至於募資的部分，這次募資的售後方面實在感受不好回應又慢，雖然都算客氣，但下次如果要贊助他們家的商品可能就要多多考慮了吧。 感謝觀看！","link":"/2018/11/Delux_Designer_單手機械鍵盤使用心得/"},{"title":"在 MacOS 上搭建 SMB 簡易檔案分享伺服器","text":"有時候會想要在iPad上無線存取一些電腦裡的檔案，卻沒有NAS或在外面不方便，其實 MacOS 也有提供像 Windows 網路芳鄰的檔案分享功能，而且設定操作非常簡單，步驟如下。 MacOS 搭建 SMB \b伺服器首先開啟系統設定(System Preferences)，接著選擇分享(Sharing) 接著勾選左邊的檔案分享(File Sharing) 在分享資料夾列表下面，點選\b\b”+”符號可以新增要分享的資料夾 接著其他電腦就會像網路上的芳鄰一樣，能夠存取分享的檔案了！行動裝置的話，iOS可以利用檔案管理的App來進行存取，這邊用的是Documents來做示範。 開啟 Documents 後，選擇附近的裝置(Nearby)，可以看到同網域下的電腦(SMB Server)列表，點進去登入電腦上的帳號就可以對分享檔案進行存取了！ 備註要特別注意，如果使用的是 Android 系統，利用 MacOS 本身自帶的\b SMB Server 是無法連上的，一開始我以為是設定錯誤，結果爬了文才發現原來這問題已經存在很久了，不過 Apple 看起來沒要修復的打算(ry 所以下一篇就要來介紹如何利用 SFTP 讓 Android 也能同樣輕鬆存取 MacOS 上的分享檔案囉！ 參考How to connect with File Sharing on your Mac","link":"/2019/09/在MacOS上搭建SMB簡易檔案分享伺服器/"},{"title":"利用 SFTP 在 Android 上存取 MacOS 檔案","text":"上一篇提到了如何利用 M\bacOS 本身自帶的檔案分享功能搭建 SMB 進行分享，不過因為一些 MacOS 自帶 SMB 的一些 bug 所以 Android 的用戶就沒那麼方便了(\bApple你到底修不修)，幸好有另一種方法\b，也就是本文的主題：利用 SFTP\b 在 MacOS 上搭建檔案分享伺服器。 MacOS 搭建 SFTP \b伺服器\b首先同樣進到系統設定(System Preferences)，接著選擇分享(Sharing) 在這邊我們不選擇檔案分享 (File Sharing) ，而是選擇遠端登入 (Remote Login) 這時我們會看到下方有一行資訊顯示”ssh username@192.168.xxx.xxx“類似的相關字串(\b依照IP跟使用者而定)，這邊先記下我們的區網IP。 接著就可以切換到 Android 端，這邊用 ES File\b Explorer 做示範 側邊欄選擇 FTP\b ，接著按右下角加號新增伺服器 Server\b 欄\b輸入剛才記下的區網 IP，Port 預設 22 沒改動就維持原樣然後填入\b電腦帳號密碼按下 OK 就能夠成功連上看到 MacOS 裡的內容囉。 \b 參考How to Browse/Share Files on Mac and Android with ES File Explorer SFTP","link":"/2019/09/利用SFTP在Android上存取MacOS檔案/"},{"title":"理解 Raspberry 4 Type C 設計問題","text":"今年(2019)樹莓派基金會發表了久違的硬體更新，升級到了4代，相信有在關注的朋友們都知道，本次供電設計終於換成了 Type-C (終於有種進化成現代化單片機的感覺)不過也因為電源電路設計的一些問題導致了有 E-Mark 晶片的 USB-C 線材無法為樹莓派供電（例如 Apple 的 Macbook USB-C 充電線、Google Pixel 3 附帶的 USB-C 線材等），反倒是便宜的一般線材能夠正常運作XD 證明樹莓派是給窮人家的玩具 。 出於好奇我搜尋研究了一下原因，並且想了解決方法記錄在這篇文章中，本人不是這方面的專業人士，若有錯誤歡迎指出討論。 Type-C 供電定義及設計下圖是 Type-C 的腳位圖，這次設計出現問題是位於兩個 CC 腳位的部分（ CC1 &amp; CC2 ），CC (Configuration Channel) 腳位是 Type-C 重要的設定通道，可以利用不同的 CC 電阻設定判斷裝置資訊、決定模式，以及藉此支援正反插。 根據 Type-C 定義文件，藉由 CC 腳位的設定我們可以有以下不同的狀態： 樹莓派所需要的是從供電端拉 5V/3A 的電力，為接受電力的設備（ Sink Device ）（這裡我不知道怎麽翻譯比較適當XD），由圖表可知我們應該要將 CC 設定在第二或第三種狀態才能正常為樹莓派提供正確的電壓。 瞭解接腳定義後來看供電端與設備端連線時的簡化電路圖： 上圖為一般 Type-C 線材連接時的樣子，可以看到只有一條 CC 線接通兩邊，並且在右側設備端有接一個下拉電阻（ Pull-down Resistor：簡稱Rd ），供電端會藉由偵測到的阻值判斷所需要的 USB-C 狀態。 接著看看連上 E-mark 線材時的電路圖：（ E-mark 是在線裡的 IC ，可以提供 PD 通訊以及宣告這條線的資訊 ） 由上圖可以看到，線材內會有一個 Ra 下拉電阻，可以告訴供電端（DFP：Downstream-Facing Port ）在 CC2 上對 E-mark IC 提供 Vconn 電力。 簡單理解了 Type-C 的供電定義後，接著看樹莓派4的電源電路設計。 Raspberry Pi 4 電源電路樹莓派基金會已經釋出了除了 SoC 以外的電路設計圖，首先來看看電源電路的部分： 左側是 Type-C 的母座，接著把注意力放到 CC1 以及 CC2 兩隻腳位上，這裡的設計是把 CC1 及 CC2 短路後共同接一個 5k1Ω Rd 下拉電阻，在普通的線材下這個設計是完全沒問題的，PD 供電端因為線材只有一條 CC 相連，只會偵測到Rd電阻，另一條 CC 空接，按照前面的圖表可以看到樹莓派狀態是 Sink attached ，可以對其供電 5V/3A。 但是這設計接到 E-mark 線材的時候就不一樣了，由於 E-mark 線材裡面的 CC2 會有 Ra 下拉電阻，連接後 Ra(1kΩ) 會跟電源電路裡的 Rd(5k1Ω) 電阻並聯，分壓後變成 836Ω 等效電阻，供電端偵測到這阻值會把它當成 Ra（ 836Ω 屬於 Ra 的許可誤差範圍），參照上面 Type-C 狀態表可以發現，此時樹莓派被當成了音訊裝置（ Audio Adapter Accessory ，例如 USB-C 轉 3.5mm 音訊轉接器等裝置），於是供電端就不會對樹莓派輸出任何電力了！這就是為什麼普通線材可以正常使用，反而是較高級(?)的 E-mark 線材無法使用的原因。 順帶補充一下必須使用 E-mark 晶片的時機（ 只要滿足其中一項就需要 E-mark ）： VBUS 需要提供 3A 以上的電流 USB 3.1 Gen1 或 Gen2 協定 需要用到 Alternate Modes 時 修正方法理論上來說，應該要將樹莓派電源電路中的 CC1 以及 CC2 隔開後各接一個 5k1Ω 的 Rd 即可正常使用 E-mark 充電線了，但是由於那部分的電路設計在 Type-C 連接器下方，所以不容易施工，需要找另外的解決方案： 翹起 Type-C 連接器上的 CC1 腳讓他另外接一個 Rd 電阻到 GND 請參考此樹莓派論壇文章 另外做一條 Type-C 延長線，自行在中間切斷 CC1 及 CC2 連接並自行接 Rd電阻到 GND 實際操作待補上（買的材料還沒來，無法測試，等測試後在詳細記錄QQ） PS. 有風聲說之後會有小改 PCB 解決此問題，不過那麼久了都沒消息，不知道何時才會改善 結論因為設計上的瑕疵，所以無法使用 E-mark 線材來為樹莓派供電，網路上有些說 PD 充電器無法使用其實算是不夠嚴謹的說法，因為若搭上無 E-mark 的線材還是能夠正常使用的（ 因為只有一條 CC 連通，且線材內沒有 Ra 並聯電源電路裡的 Rd，不會造成識別錯誤 ），省了一個 Rd 電阻但造成 E-mark 線材無法使用，真是這次樹莓派4最可惜的部分了。 參考EXPLORING THE RASPBERRY PI 4 USB-C ISSUE IN-DEPTH USB Type-C® Cable and Connector Specification Revision 2.0, August 2019 SCHEMATIC1 : REDUCED SCHEMATICS Fixing the Pi 4 usb C issue by hand Designing a Type-C Electronically Marked Cable - Part 1","link":"/2019/10/理解_Raspberry_Pi_4_Type_C_設計問題/"},{"title":"利用 Raspberry Pi 搭建 TimeCapsule（仮）- 軟體篇","text":"相信 MacOS 的使用者應該都熟悉官方提供的備份軟體「TimeMachine」，不過如果是 Macbook 等筆電就比較麻煩了，三不五時就要接上隨身硬碟來備份對於我這種懶人來說，定時備份根本是不可能的任務。 不過備份依然是相當重要的，除了升級系統有機會用到，再來就是現在的 Macbook 硬體如此不可靠你敢不備份嗎(笑)。為了解決懶的問題，我想用無線的方式進行備份。停產的 Airport ，或是群輝（Synology）的 NAS 都有提供 TimeMachine 無線備份的功能，然而這兩者的價格都還是偏高的QwQ 所以在一輪 Google 後，我的解決方法就是利用此篇的主角：樹莓派（Raspberry Pi）來完成這項任務，在 Pi 4 推出後，硬體規格升級到了USB3.0、Gigabit Ethrnet，做個人用的簡易 NAS 已經算是堪用，更不用說對速度要求不高的 TimeMachine 了！ 準備工作首先安裝好最新的 Raspbian Lite 版本，開機後先進行基本設定（ 可以單純ssh操作省去外接的麻煩，關於headless可以參考我之前的文章：Raspberry Zero W Headless 自動連上無線網路與開啟SSH ） sudo raspi-config 把預設密碼之類改一改，還有地區之類等基本設定。設定完後先更新一下套件。 sudo apt-get update &amp;&amp; sudo apt-get upgrade 接著重啟樹莓派。 sudo reboot 分割磁碟(可選)如果整顆硬碟都是要拿來做 TimeCapsule 的話此步驟可以跳過，直接續讀安裝過程。 首先列出硬碟情況： lsblk 找到硬碟代號，例如這邊sda是我的外接硬碟，裡面有之前的分區。首先用 fdisk 重新分割這顆硬碟： sudo fdisk /dev/sda 進入 fdisk 可以按 m 顯示使用說明，這邊簡述我的硬碟分割過程： 輸入兩次 d 刪除兩個原先的分區 n 新增分區，分區代號以及起始區塊預設，結束區塊 +450G (這樣會建立一個代號1，450G大小的分區) 再次用 n 新增第二分區，一路 Enter 完成剩下硬碟空間的分區 w 寫入硬碟分區資料並退出 fdisk 接著再次查看分割結果是否正確 lsblk 圖中可以看到硬碟已經成功分割成希望的數量以及大小(注意：fdisk 僅支援分割2TB內的硬碟，若要分割更大的需要安裝 gparted 在桌面環境下操作) 安裝過程準備硬碟首先格式化硬碟(sda1是我要格式化的分區，請依照lsblk顯示的自行更換) sudo mkfs.ext4 /dev/sda1 這邊建議以 ext4 格式化達到最佳效能，雖然有工具可以讓 Linux 讀取 hfsplus 等蘋果檔案格式，但是我測試之後速度慢到想哭(／‵Д′)／~ ╧╧（這邊不太確定是不是我不會設定問題，若有錯誤歡迎指正 而且 hfsplus 也無法把硬碟拆下來接上 MacOS 就直接兩邊互通，索性直接用 ext4，以後連復原都透過網路了。 建立掛載點 sudo mkdir /mnt/TimeCapsule 查看分區的 UUID 並把它複製下來 sudo blkid 編輯 fstab 添加掛載資訊 sudo vim /etc/fstab 在最底行填上（”YOUR_UUID”替換成剛才複製的UUID） UUID=YOUR_UUID /mnt/TimeCapsule ext4 defaults 0 2 掛載硬碟(分區) sudo mount -a 查看掛載狀態 df -h 可以看到 sda1 已成功掛載到 /mnt/TimeCapsule 了 最後開啟硬碟權限 chmod 777 /mnt/TimeCapsule 安裝及設定 Netatalk安裝 Netatalk sudo apt-get install netatalk 安裝完成後用 netatalk -v 查看版本以及設定檔位置 接著編輯 nsswitch.conf sudo vim /etc/nsswitch.conf 在 host 那行的最後加上 mdns4 mdns 如下 hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4 mdns 設定 afp.conf sudo vim /etc/netatalk/afp.conf 內容如下 123456[Global] mimic model = TimeCapsule6,106[Time Machine] path = /mnt/TimeCapsule time machine = yes 保存後退出，最後啟動服務： sudo service avahi-daemon start sudo service netatalk start 這時應該能在 MacOS 看到你的網路硬碟了！ 為了確定開機時會自動啟動服務，輸入以下指令： sudo systemctl enable avahi-daemon sudo systemctl enable netatalk MacOS 端設定接著打開 TimeMachine 設定，按選擇備份碟之後就能夠看到我們用 Raspberry Pi 的備份硬碟囉！選擇它之後輸入 Pi 的帳號密碼即可開始備份（第一次備份時間通常較長，如果開啟加密會更久），完成首次備份後接著以後就是差異備份，只要連上就會自動定期執行，在也不用怕麻煩或忘記備份了！ 進階設定Raspberry Pi 端用戶管理新增用戶（username改成自己需要的使用者名稱） useradd --create-home --groups users --user-group username 建立密碼 passwd username 編輯 afp.conf sudo vim /etc/netatalk/afp.conf 在 [Time Machine] (顯示名稱依照之前設定的可能會有不同)新增使用者 1234[Time Machine] path = /mnt/TimeCapsule time machine = yes valid user = username 靜態 IP固定 Pi 的 IP，這部分可以前往路由器設定，由於每家路由器不一定相同，所以另外依照各廠商提供的說明設定。 Mac 端首次備份時若覺得備份速度太慢可以執行以下 Script 關閉限流： sudo sysctl debug.lowpri_throttle_enabled=0 恢復方式： sudo sysctl debug.lowpri_throttle_enabled=1 參考替 Linux 新增硬碟（磁碟分割、格式化與掛載） How to Use Your Raspberry Pi as a Time Machine Backup Server for macOS How to speed up your Time Machine backups AFP Netatalk share configuration (aka Apple Time Machine). Raspberry Pi Time Machine (2019 update) How to use a Raspberry Pi for your Time Machine backups Apple Time machine on RaspberryPI How to use a Raspberry Pi for your Time Machine backups 利用 Raspberry Pi（树莓派）打造 Time Capsule（时间胶囊） PS 因為各種文章新舊版本問題，所以參考了不少資料才整理出一個目前可以使用，快速的設定過程。","link":"/2019/10/利用RaspberryPi搭建TimeCapsule仮-軟體篇/"},{"title":"利用 Raspberry Pi 搭建 TimeCapsule（仮）- 硬體篇","text":"前陣子看到國外有人把舊的 Mac Mini 的機箱拿來改造，弄成 Router 或 HTPC 等，不得不說 Mac 的全鋁一體機箱真的挺好看，雖然設計已近十年未改，但放在 2019 年的桌面上仍不顯老氣 反正中間那個商標放哪都能裝逼。 看著別人改的成品很是心動手癢，於是上網搜了下，發現有不少人在賣二手的機殼，在國外看到了個價格及品相都非常好的機殼(約NT600)就買了下來(Mid 2010/A1347)。時間上正好 Raspberry Pi 更新了第四代，I/O效能上也終於符合了基本 NAS 的需求，於是想到可以把 Pi 裝在 Mac Mini 的機殼中，來做個簡易的偽 TimeCapsule + NAS，來當做無線 Time Machine 備份用及網路存儲設備。 本篇就來記錄一些想法跟製作過程，以及碰到的問題。 關於 Pi 4 的軟體設定部分，為了版面簡潔我把它寫在另外的兩篇，這裡就純記錄硬體部分：利用 Raspberry Pi 搭建 TimeCapsule（仮）- 軟體篇、利用 Raspberry Pi 搭建 NAS 想法 &amp;&amp; 設計 首先依照 Mac Mini 機殼的容量，大約能放下 17*17cm 的主板（ 網路上大部分是拿 Thin Mini-ITX來裝 ），高不能超過 2.5cm ，約兩個 USB Type-A 堆疊的高度，那當然我用的是更小的 Pi，只要另外考慮硬碟的擺放及走線即可。 以下是一開始的設計圖（ 後來 Hub 的設計被廢掉了，詳細問題有記錄在下方遇到的問題裡 ） 接著得想個辦法固定這堆玩意，最省心的方法大概就是直接做個絕緣塞進去，但是這樣實在太醜了 用 Mac 機殼不就是要好看，而且不知道時間久了會發生什麼問題，Server 是打算 7x24 不關機的，考量到散熱及穩定性 還有不想要裡面太醜的強迫症，最後還是乖乖畫個 3D 設計稿然後找代印來做固定支撐的部分。 然而這才是麻煩的開始，由於上網翻不到 Mac Mini Case 的機械圖，也沒有人分享螺絲孔距等數據，只好自力救濟徒手量測。單純用直尺量測實在很麻煩，空間不大遊標卡尺也不方便，只好先量兩孔間直角三角形的兩邊大概長度，再對照直線距離用畢式定理去推算量出來的距離對不對（感覺挺蠢的但是也想不到其他方法），才勉強量出了孔距。 幸好最後印出來是吻合的沒問題（孔徑我開2mm，距離是以孔心為基準），這邊放個測量結果，有需要的人可以少走歪路（直接看垂直的距離就好，直線距離可能稍微跑掉）。 再來是比較棘手的硬碟支架部分，原本看上蘋果原廠自己的就支援了雙硬碟（Server版本、無光碟機版之類，記得到 2014 機箱都是 A1347），我買的機殼並沒有附送，硬碟架比較難找，後來看看只有 eBay 上有價格可以也有貨的。 不過原廠的支架在不破壞結構的前提下可能要另外製作特殊的 Sata 7+15 Pin 延長線才有辦法塞雙硬碟，而且不幸的是我沒仔細看規格，以致於買回來的支架其實是有光碟機版本（那賣家圖片放成雙硬碟位的…我就傻傻相信了 ｡ﾟヽ(ﾟ´Д`)ﾉﾟ｡ ）最後只能認命自己列印硬碟架了，原廠硬碟架再另外售出給剛好需要的人。 原本硬碟支架的設計圖，後來發現樹脂這個厚度不太穩，裡面的卡楯點又沒量準所以把旁邊的固定臂鋸掉了，只留下中間支撐硬碟的部分： 最麻煩的底部固定螺絲部分，我參考了 ifixit 的各種拆解，都只提到底座的螺絲是 “ 7.9mm Torx 6 Screw “，完全找不到有人提到直徑是多少… 在完全缺乏資訊的狀況下，我找了幾個螺絲試鎖，有一個能夠鎖進去鎖緊，但是太短了。 由於沒有遊標卡尺所以只好買了 M1.4、M1.5、M1.6 的回來測試，薑薑！全錯，最後只能認命買了遊標卡尺回來測量。正確尺寸應該是 M1.7，因為是鎖金屬殼所以用自攻螺絲，更詳細的我就不太確定了（手邊工具無法量測），至少 M1.7 自攻是鎖的進去而且穩定，一樣有需要的人可以再少走一條歪路了 ｡ﾟヽ(ﾟ´Д`)ﾉﾟ｡ GPIO 旁邊設計了擋板以免其他線材觸碰到： 背面加上了一些墊高用的腳腳： 再來要考慮的是擋板（外框這裡是購買別人設計好的現成可以裝 Mini-ITX 擋板的塑膠框），稍微在腦中模擬了一下走線，考慮美觀的情況希望 USB-C 電源跟網路口要在一起，所以開關放左邊（以底蓋朝上的方向為基準），電源跟網路放右邊，靠樹莓派那測設計了一些出風口增加散熱能力，中間也開了一段方便進風。 中間兩個突起的三角塊原本是打算跟底板用機械螺絲固定，不過尺寸沒量好，後來直接靠網路口鎖螺絲上去固定住IO擋板，Pi 固定底座原本要固定擋板的部分就鋸掉。 最後按照官方的 Pi 4 機械繪圖來做風扇支架： 這次用到的 3D 列印的檔案在最下面有連結，歡迎自行免費取用，但請不要拿去用於商業用途。 接下來就是把東西準備好開始裝機跟佈線囉 (ﾟ∀ﾟ) 製作過程這是拿到 3D 列印成品的照片，接著要把硬碟架兩側的腳跟後面量錯的定位口弄掉，然後打磨後上漆： IO擋板的部分我也另外作了處理，首先是 Type-C 我測量成公頭的尺寸，所以用銼刀擴孔後母座才放的進去，以及電源開關的部分尺寸剛好，稍微擴孔後才能順暢的按壓。 上圖是處理過的硬碟支架，有個三角缺口是鋸的時候可能力道不平衡 (((ﾟДﾟ;)))，不過放在裡面不太影響，把尖銳的部分打磨即可。 噴漆灌上漆（可以看到上面的橫條可能太細，樹脂強度不夠，不過主結構沒問題）： Pi 支架的部分，設計的時候忘記了 Micro SD 會突出一些，所以只好擴一些空間。不過弄的時候樹脂不夠強不小心弄斷了，還好螺絲兩邊都會鎖到，所以補強一下沒問題： 原本要使用 Hub 來管理硬碟，不過遇到了些問題，索性把 USB to SATA 的轉接線拆了，把供電的部分另外拉出來（原 USB 線與 PCB 的 Vbus 供電要隔離）： 上蓋就不蓋回去了，用抗靜電耐熱膠帶貼著，可以降低厚度 每個步驟都要先用電錶量過確認，然後上機測試： 裝上硬碟架，測試高度厚度，然後假組確認尺寸跟線材長度有沒有問題： （有在硬碟上下加上 1mm 的抗靜電棉，減少震動跟防止靜電，硬碟上在仿原廠貼導電織布與機殼接觸） 接著把兩個硬碟的電源線接上 Type-C 座，然後拉另一條給 Pi 供電，這邊使用了 5A 的線材所以有點粗，費了一番功夫才焊好（ Type-C 還真不適合手焊粗線材，後來我還有另外從兩個 CC Pin 拉出杜邦母頭，可以加上兩個 5k1 電阻讓 Pi4 支援 E-mark 線材 帶燈開關的部分，跟機殼前方的 LED 並聯，並各串上 1k 電阻（亮度我不希望太亮），關於添加燈以及風扇控制等方法請參考另一篇文章:替 Raspberry Pi 添加開關、外接電源燈、狀態燈，以及風扇控制 裸機測試，確定沒問題再裝機： 面板我沒想到很好的固定方法，除了網路口用螺絲外，電源跟開關都是用熱溶膠 + 防靜電膠帶弄上的，這部分設計上還有改進空間。 最後完整裝機，鎖上螺絲！ 關上背蓋（有點清潔時候的水漬還沒乾XD） 完成！來幾張照片ヽ(✿ﾟ▽ﾟ)ノ 屁屁 Bay ~ 好吧外觀其實看起來就是個普通 Mac Mini PS 風扇啟動時（無散熱片）溫度可以維持在不超過 50°C （室溫約 26~28°C），散熱效果還算不錯。 遇到的問題 &amp;&amp; 解決方法機箱固定螺絲問題如上述，我用的底座機箱固定用螺絲規格為 M1.7 x 6 自攻螺絲 + M2 華司。 USB 外部供電 Hub 問題Pi 4 除了 USB-C 設計會 使 E-mark 線材無法使用之外，還有個問題是：使用帶獨立電源的 USB 3 Hub 在接上 Pi 的 USB 3 口上可能會導致開機或重啟時，無法進入 boot 程序。官方論壇也有人提出這個問題 Pi 4 fails to boot when active USB switch attached ，雖然可以啟動時拔起 Hub 再插回去正常運作，但是麻煩而且裝箱後不可能重啟又打開插拔。 大致推測下來，可能是 Pi 4 使用 USB 3 時，有獨立供電的 Hub 會反向供電（Power feedback）給 Pi，於是可以考慮將 Hub 與 Pi 之間的 Vbus 隔離，但我的 Orico Hub 仍然無法正常啟動（有些人回報切斷 Vbus 後就正常運作），論壇裡也有人和我一樣切 Vbus 仍然失敗的，韌體等更新也測試過了無法。 最後只好改成直接把 SATA to USB 轉接線的電源拉出來做使用，目前解決了無法啟動的問題。目前只有少數 Hub 有辦法正常運作（通常比較貴，可能 USB 線那有做二極體防止反向供電？）選購時要注意一下。 2 個 HDD 直接用樹莓派官方電供供電？從文中可以看出其實我 2 HDD 的電源也是直接接上與 Pi 同一個電源的，那為何要多此一舉把電源獨立拉出來（總電流還是只有 3A）？主要是因為兩個 2.5” HDD + Pi 本身的電流，3A 是足夠驅動的，不過 Pi 的 USB downstream 限制在 1.2A （可以理解為四個 USB 口只能消耗最高 1.2A ），雖然硬碟上標示 0.55A ，但還要考慮到轉接線的耗電。實際測試後單顆 2.5” HDD 啟動電流約為 0.7~0.8A 左右，Pi 本身耗電約 0.6~1.2A 之間。 最後的解決方法就是必須使用外接的 Hub 確保兩個 HDD 啟動電流足夠，繞過 USB downstream 1.2A 的限制（但是可以接同一個 3A 電源沒問題），或是如上把轉接線那電源供應獨立接出來。至於直接接上兩個 HDD 也是有實際實驗過了，真的沒辦法，其中一個硬碟會無法掛載 ╮(╯_╰)╭ 以上大概就是這次踩到比較大的坑，以及解決方法，也想把 Pi 裝在 Mac Mini 機箱的朋友可以參考。 材料清單 1 x Pi 4 4GB 1 x 8G MicroSD Card for boot 1 x A1347 Apple Mac mini Case (Mid 2010) 2 x 2.5” HDD 2 x SATA to USB3 Cable STL 3D Printed Mount / IO Panel 1 x 30mm Fan 1 x Momentary Switch w/ LED &amp; Cap 1 x 3mm Front Panel LED 2 x Current-limiting Resistor (330Ω ~ 1kΩ) 1 x Gigabit Ethernet Network Extension Cable 1 x USB Type-C Male Connector w/ PCB 1 x USB Type-C Female Connector w/ PCB Some USB Cable (Current support 3A at least) 3 x M3 Screw &amp;&amp; M3 Hex Nut for Fan Mounting 4 x M3 Screw for HDD Mounting 2 x M3 Screw for Ethernet Port Mounting 3 x M1.7 Tapping Screw for Case Mounting w/ M2 Washer Some DuPont Line 本次所使用的 3D 檔案（STL）PiMacMiniCaseSTLFiles 注意，目前還沒優化檔案，所以硬碟支架及 Pi 底座有瑕疵的部分需要的話可能還要自行調整或印出來後自行切割多餘的部分，孔位是沒問題的。 參考Mac Mini Mid 2010 Teardown Raspberry Pi GPIO Pinout Raspberry Pi 4 Tech Specs Power Supply Pi 4 fails to boot when active USB switch attached","link":"/2019/11/Use-RaspberryPi-to-build-a-FAKE-TimeCapsule-and-NAS-Hardware/"},{"title":"電腦/伺服器跨平臺的開源監控好幫手 - Glances","text":"原先是在尋找一個能夠遠端監控伺服器狀態（基於樹莓派的 NAS）的軟體，由於每次都要連上 ssh 查看比較麻煩，加上 htop 我覺得能看到的訊息也不夠齊全（如溫度等），於是發現了一個跨平臺、支援遠端 Web-UI 且開源免費的方便監控軟體 - Glances，且安裝操作都非常簡單，有需要的朋友不坊試試，唯一的缺點大概就是基於 Python ，效能不是那麼理想吧（在 Pi 上感覺 CPU 佔用率比預期稍高了一點XD） 安裝在 Linux（Debian、Ubuntu等）可以直接 apt-get 安裝 sudo apt-get install glances MacOS 有安裝 Homebrew 的話可以用 brew 安裝 brew install glances 我自己在 MacOS 安裝時有發生小問題，安裝完後執行出現以下錯誤 1234Traceback (most recent call last): File \"/usr/local/Cellar/glances/3.1.3/libexec/bin/glances\", line 6, in &lt;module&gt; from pkg_resources import load_entry_pointModuleNotFoundError: No module named 'pkg_resources' 用 brew doctor 無法解決問題，查詢了一下用 postinstall python3 即可解決 brew postinstall python3 Windows 等系統安裝好 Python，可透過 pip 安裝 pip install glances 使用一般主機模式在 Command Line 直接輸入即可啟動 glances 顯示 JSON 格式（後面接上想看的狀態） glances --stdout cpu.user,mem.used,load CSV 格式 glances --stdout-csv now,cpu.user,mem.used,load 按 q 或 Esc 離開 Server 模式在想查看狀態的電腦上 glances -s 在客戶端輸入查看伺服器的狀態（SERVER-IP 替換為上述 Server 的 IP） glances -s SERVER-IP 遠端 Web-UI 模式在想查看狀態的電腦上 glances -w 在同網域下的任何裝置瀏覽器上輸入（SERVER-IP 替換為上述 Server 的 IP），預設 Port 為 61208 http://SERVER-IP:61208 就能夠遠端監控了，除了CPU、MEM等狀態，同時也能看到溫度，如下圖所示（圖中是樹莓派 NAS 的狀態） 參考Glances fails after brew installation: ModuleNotFoundError: No module named ‘pkg_resources’ #260","link":"/2019/11/A-Better-Server-Status-Monitoring-Tool-Glances-htop-top-Alternative/"},{"title":"替 Raspberry Pi 添加開關、外接電源燈、狀態燈","text":"用 Headless 方式玩樹莓派的朋友肯定都遇過一個問題，就是每次關機都要登入 ssh 才能正常關機，懶一點的直接拔電源，就算沒問題也很麻煩（ 懶到過去延長線切電源都不肯 （欸），所以不如加個開關吧，不僅省時省力還能用正常的 shutdown 程序關機，一石二鳥豈不美哉 (:3[__]4 還有很多時候因為 Pi 裝著殼，要得知是否開機、狀態燈有沒有在閃爍並不是那麼方便，本篇也一並記錄了裝上外接電源燈、狀態燈的步驟！ 最後另外在補上風扇的控制方式（ Pi 4 工作時很熱情，大部分人可能會選擇上風扇XD ）但是溫度也不是隨時都那麼高，有了風扇控制可以依照溫度所需啟動，不但降低噪音也能增加風扇使用壽命，順便省一點點電，拯救北極熊（？）（風扇控制目前還在準備中，測試完成後會在更新電路圖） 硬體設定開關 &amp;&amp; 電源燈線路圖 SD讀取燈 &amp;&amp; 風扇（控制電路待補） 軟體設定開關（正常軟體關機程序）這邊開關的部分參考了 howchoo 上的一篇文章：How to Add a Power Button to Your Raspberry Pi，以下是直接使用作者所寫好的 Script 安裝，詳細背後的 Code 以及原理可以點進連結裡查看（英文）。 安裝 Git sudo apt-get install git 接著 clone 作者所寫好的 Script Howchoo/pi-power-button git clone https://github.com/Howchoo/pi-power-button.git 安裝即可 ./pi-power-button/script/install 電源燈進入樹莓派設定界面 sudo raspi-config 選擇 Interface Options 開啟 Serial 來允許串列讀取，這樣我們就可以利用 GPIO 上的 TXD 來讓 LED 顯示目前是否為開機狀態（直接接 5V 的話只要插上電就會亮，沒辦法判斷樹莓派是否在開機狀態） 接著重啟樹莓派即可看到電源燈正常運作了 sudo reboot SD 卡讀取燈將 SD 卡插入電腦中，打開至根目錄找到一個叫做 config.txt 的設定檔，在底部添加以下設定。最後的 GPIO 選擇自己要用的腳位即可（腳位參考） 12# Use external LED as ACT LEDdtoverlay=pi3-act-led,gpio=19 風扇控制待補 參考Add An External Sd Activity Light Raspberry Pi 3 Retropie Or Raspbian How to Add a Power Button to Your Raspberry Pi #131 Pimp my Raspberry: Automatic fan, automatic shutdown, automatic Python Build a Simple Raspberry Pi LED Power/Status Indicator IRL530N Datasheet #131 Pimp my Raspberry: Automatic fan, automatic shutdown, automatic Python","link":"/2019/11/替RaspberryPi添加開關_電源燈_硬碟燈/"},{"title":"安裝 Aria2 在 RaspberryPi 上搭建低耗下載機","text":"Aria2 是一個超輕量但功能的強大開源下載器，支援多點下載、多種協定、檔案分割下載、可透過 JSON-PRC 或 XML-PRC 遠端控制等功能。 Aria2 的特性讓他非常適合放在樹莓派等單晶片上執行，輕量不耗資源、又能遠端操作，我的 Pi 剛好作為 NAS，搭配下載器可以直接存入 NAS 硬碟中，在做遠端存取且不用關機非常方便，本篇將會記錄安裝 Aria2 在 Pi 上的過程。 安裝 Aria2sudo apt-get update sudo apt-get install aria2 設定 Aria2建立設定資料夾與檔案(注意這邊不用 sudo，否則還要回過頭來改資料夾權限給 user) mkdir -p ~/.aria2/ touch ~/.aria2/aria2.session vim ~/.aria2/aria2.conf 12345678910111213141516171819202122232425262728293031323334## Filesdir=/mnt/Share/Downloadsdisk-cache=32Mfile-allocation=trunccontinue=true## Downloadsmax-concurrent-downloads=10max-connection-per-server=16min-split-size=10Msplit=5max-overall-download-limit=0#max-download-limit=0#max-overall-upload-limit=0#max-upload-limit=0disable-ipv6=false## Sessionssave-session=/home/pi/.aria2/aria2.sessioninput-file=/home/pi/.aria2/aria2.sessionsave-session-interval=60## RPC Settingsenable-rpc=truerpc-allow-origin-all=truerpc-listen-all=true#rpc-secret=secret#event-poll=select#rpc-listen-port=6800## Othersenable-dht=trueenable-dht6=trueenable-peer-exchange=true 在 Files 部分的 dir 是指檔案下載路徑，這裡我把它掛在外接硬碟上方便存取。 接著啟動 aria2c 並指定設定文件所在位置。 aria2c --conf-path=/home/pi/.aria2/aria2.conf 看一下進程有沒有成功 ps aux | grep aria2 設定開機啟動服務建立設定文件 sudo vim /lib/systemd/system/aria2.service 12345678910111213141516[Unit]Description=Aria2 ServiceRequires=network.targetAfter=dhcpcd.service[Service]User=piRemainAfterExit=yesExecStart=/usr/bin/aria2c --conf-path=/home/pi/.aria2/aria2.confExecReload=/usr/bin/kill -HUP $MAINPIDExecStop=/usr/bin/kill -s STOP $MAINPIDRestartSec=1minRestart=on-failure[Install]WantedBy=multi-user.target 接著載入服務並啟動檢查是否成功： sudo systemctl daemon-reload sudo systemctl enable aria2 sudo systemctl start aria2 sudo systemctl status aria2 成功的話會顯示類似下方狀態 12345678910111213● aria2.service - Aria2 Service Loaded: loaded (/lib/systemd/system/aria2.service; enabled; vendor preset: enabled) Active: active (running) since Fri 2019-11-15 16:01:37 GMT; 4s ago Main PID: 1509 (aria2c) Tasks: 1 (limit: 4915) Memory: 3.4M CGroup: /system.slice/aria2.service └─1509 /usr/bin/aria2c --conf-path=/home/pi/.aria2/aria2.confNov 15 16:01:37 pinas systemd[1]: Started Aria2 Service.Nov 15 16:01:37 pinas aria2c[1509]: 11/15 16:01:37 [WARN] Neither --rpc-secret nor a combination of --rpc-user and --rpcNov 15 16:01:37 pinas aria2c[1509]: 11/15 16:01:37 [NOTICE] IPv4 RPC: listening on TCP port 6800Nov 15 16:01:37 pinas aria2c[1509]: 11/15 16:01:37 [NOTICE] IPv6 RPC: listening on TCP port 6800 安裝 Nginx 網頁伺服器安裝 nginx （若有其他網頁伺服器也可以，如 Apache 等） sudo apt install nginx 啟動服務 sudo /etc/init.d/nginx start 在瀏覽器輸入 http://RASPBERRYPI-IP/ 看到 Welcome to nginx! 等字樣代表伺服器成功安裝並且正常執行了 安裝 AriaNG 網頁操作界面下載 AriaNG，撰文時最新版為1.1.4，有更新版可以自行檢查。 wget https://github.com/mayswind/AriaNg/releases/download/1.1.4/AriaNg-1.1.4.zip 解壓縮 unzip AriaNg-1.1.4.zip -d aria-ng 把資料夾搬去伺服器的網頁目錄底下（ nginx 預設為 /var/www/html ） sudo mv aria-ng /var/www/html/ 此時瀏覽器輸入 http://RASPBERRYPI-IP/aria-ng 即可看到 AriaNG 的界面了。 在如下設定分頁內填入相關設定（ IP 或 hostname，預設 Port 為 6800 ），看到 Connected 即可開始遠端操作下載等任務了！ 參考aria2 AriaNG Remote Download Server in Linux using Aria2 用树莓派 Raspberry Pi 远程下载 (aria2) Setting up an NGINX web server on a Raspberry Pi","link":"/2019/11/安裝 Aria2 在 RaspberryPi 上搭建低耗下載機安裝 Aria2 在 RaspberryPi 上搭建低耗下載機/"},{"title":"為什麼我的帳號會被盜？淺談密碼安全及實體金鑰","text":"還在不同網站使用相同的密碼嗎？你的密碼是常見的組合或幾個英文數字湊合嗎？在資訊科技的進步的現在，不論年紀大小、身份，幾乎人人都有數個甚至上百的帳號密碼。網路上層出不窮的帳號被駭客攻擊、個資洩漏事件，就算是 Google、Amazon、Facebook 等大型企業也都無可避免，那麼這時候如何靠自己保護好帳號安全就顯得非常重要了。 我想這如果是方面的專家應該也不會看這篇文XD，所以會盡量用簡單易懂的方式說明。如果沒興趣知道背後的原理，只想知道如何保護帳號的朋友們可以直接跳到結論：如何保護好自己的帳號安全？ 在知道如何保護自己前，當然要先來瞭解密碼這玩意到底是如何運作的。 我的密碼是怎麽被儲存的？大部分人可能會認為帳號被駭就是單純有某個厲害的駭客在一片黑底畫面上打了一堆指令，然後擊破了資料庫拿到了你的帳號密碼。實際上流程確實大概是如此，不過有時候不是駭客技術高超，而是你所使用的服務公司並沒有做好基本的密碼儲存。 為了方便理解，首先可以先把資料庫想像是一個有保全守著的倉庫，帳號密碼等資料就存放在裡面。 明文儲存明文儲存是最爛的一種方式，顧名思義就是直接把密碼原封不動的放進資料庫中如下表： ID 帳號 密碼 0 account1 123456 1 account2 abc1234 這種方法儲存的密碼，只要攻擊者拿到資料庫的讀取權限就完蛋了（可能透過系統、程式漏洞等方式）。這意味著只要躲過保全衝進房間，密碼跟帳號就一覽無遺 (´ﾟдﾟ`) 非常不安全。 然而現在仍有不少網站還是使用這種方式處理，最簡單的判別方式就是按下忘記密碼，他們會直接發送你的完整密碼到信箱而不是要求重設定，代表儲存方式是明文儲存，正常情況就算是管理資料庫的工程師也不可能會知道密碼的明文是什麼(下面會提到為何)，所以這樣儲存密碼是非常非常非常危險的。 加密/Hash把密碼加密或 Hash（雜湊）處理過會比較安全，意思是密碼會先放進一個函式處理，將密碼變成一串跟原本完全不同的英數字，而且只要改動密碼中任一個文字都會讓結果完全不同。登入帳號時，系統也是將你輸入的密碼經過同樣 Hash 處理後，跟資料庫裡面的數值比對是不是一樣即可。 ID 帳號 密碼(MD5 Hash) 0 account1 E10ADC3949BA59ABBE56E057F20F883E 1 account2 A141C47927929BC2D1FB6D336A256DF4 這種方法比起方法比起明文儲存好了些，因為攻擊者就算得到了資料庫也只能看到 Hash 過後的值。但是這種方式也不是沒有缺點，如果有兩個帳號使用了相同的密碼，那麼他們的 Hash 結果就會相同，這時可以靠其他資料猜測或彩虹表(Rainbow Table 一種整理出來的常見密碼 Hash 值表)輕易的找出密碼的原文。 簡單來說，相當於密碼寫在紙上後，會用先一把對應的鑰匙鎖起來，但是如果有相同的密碼會被放到同樣的保險箱中(原文值相等所以 Hash 值也相等)，在資料庫中可以看到這兩個相同密碼是被放在一起的，這樣只要保險箱被破解，其他放在同樣的密碼也就跟著全遭殃了。 補充：Hash 處理過後是不可逆的，相當於這把鑰匙只能把它鎖起來不能解開，而加密的鑰匙是能夠加/解密的（依照不同加密方式可以視同一把鑰匙或不同把鑰匙） Hash + Salting (加鹽)Salting 加鹽是在上述 Hash 前，在密碼後面加上一串隨機產生的字符（像是隨機撒些鹽巴的感覺），然後再進行 Hash ，這樣即使是相同密碼，Hash 出來也是完全不同的結果，增加攻擊者破譯出密碼的難度。 ID 帳號 密碼+鹽(MD5 Hash) 0 account1 01A682CCB070DFE296DF4BBAD02950C8 1 account2 B9BAA63E43E35D93366C4401EFFCC631 這種方法解決了上述同樣的密碼被放在一起的問題，大幅增加攻擊者攻擊的難度，但是使用的密碼過於簡單常見還是很容易被破解的，方法會在下方如何攻擊提到。 此處使用MD5僅為示範用，實際應該選擇安全性較高的 Hash 演算法。 駭客是怎麽盜取我的密碼的？我們可能都看過朋友的帳號被盜用、或是某某知名人物的私人資訊檔案被流出，甚至自己曾經也是受害者。想知道如何保護好自己的話，當然得先瞭解一下所謂「駭客」是怎麽拿到你的帳號密碼的囉！（輸入密碼被看到、密碼借朋友不小心外流等比較物理性的方式就不另外討論） 這邊我們不討論明文儲存的密碼，畢竟那只要有系統漏洞就完蛋了。 以下攻擊皆假設在密碼有經過 Hash 的方式處理下，攻擊者拿到了帳號密碼的資料庫，要取得密碼的方式就是透過運算能力很強的電腦，把一串密碼經過 Hash 過後跟資料庫比對，如果相等就代表找到密碼原文了。 暴力破解暴力破解是最簡單無腦的方法，實際應用比例不高。電腦會把各種密碼組合都 Hash 後去比對。 今天一個資料庫被攻擊者拿到了，可以放到電腦中將各種密碼組合都 Hash 過後進行比對，如果一樣的就可以記錄下來，表示這組密碼的 Hash 值是多少，這種方式越短(8字元以內)、全是小寫、英數字簡單的排列等不複雜的密碼最容易被破解出來，若是用 MD5、SHA-1 等比較老舊的 Hash 函式甚至幾秒內就能輕鬆破解。 字典攻擊雖然上述的暴力破解，要是用了長密碼就會指數性增加破解的難度(需要嘗試的排列組合太多種)，但是要對付長密碼現在最常見的方式其實是用字典攻擊。 假設今天我用了一個密碼 “password1”，有九個字元。雖然這時暴力破解會變的非常困難，但是卻是一個超多人都會用的密碼 根據此報告使用率排名第九，字典攻擊就是用在這種地方。所謂字典通常是大部分常見被破解的密碼 Hash 值的記錄表，裡面有大量常用密碼的對應資料，可以直接比對資料庫拿到的密碼 Hash 值得到密碼原文，在現實資料庫做破解效率上會比暴力破解高很多。 常用密碼的數量其實非常龐大，被洩漏的密碼可能幾億上到幾十億，像是一些有規律的 “password1234”、”password12341234” 等通常都被重複使用過，一些粗話或有意義的英文單字都非常容易被字典收錄，或是在單字或名字後面加日期等，雖然長度夠但反而是更容易被破解（還有那種用注音對照英文打出來的，只要有人用過一樣不安全）。另外 “Pa$$w0rd” 之類把幾個字改成相似符號的也很常見，絕對不是替換掉幾個特殊符號換個大小寫就代表密碼沒問題。 怎麼樣的密碼是弱密碼？根據上面兩種攻擊方式，我們可總結出哪些密碼是太弱容易被破解的： 長度太短(8以內) 純數字 全小寫/大寫 有意義的文字(包含其中幾個字替換符號、尾端加數字生日等) 常用的注音文密碼(例如：au4a83) 如何保護好自己的帳號安全？我們不一定能保證存放帳號資料庫資料不外流，但是可以做以下幾件事情來保護自己的帳號安全，讓攻擊者就算拿到資料庫也無法輕易得知密碼： 用一個不容易被破解的密碼建議可以選四個以上平時較少使用單字或名詞排列，雖然是有字面意義的但是長度夠長的話基本上可以免去暴力破解、也不容易跟別人的密碼相同，就比較不容易被字典收錄。想要更進一步加強的話可以隨機在一些地方加上一個特殊符號，就能夠再提升破解難度。 每個網站都使用不同的密碼這是非常重要但大部分人都沒做到的（我自己以前也是），假設一個密碼真的很不幸的被破解了，要是其他網頁都用同樣的密碼，攻擊者就能夠輕易的去嘗試登入你所有的帳號。但是帳號一多了還是很難記住所有密碼，此時就建議用密碼管理器來代勞。 使用密碼管理器(Password Manager)密碼處理最好的方法當然是用密碼管理器，他能夠產生的隨機長密碼，這樣只要記住一個安全的主密碼，其他密碼就可以自動填入或複製貼上，藉此登入所有的帳號。基本上主流的密碼管理器安全性都不差，所以只要做好保護措施基本上不太會有問題，這裡就不另外推薦。 開啟兩步驗證(2FA, Two-Factor Authentication)兩步驟驗證顧名思義就是要兩個步驟才能夠登入。目前市面上最常見的 2FA 是簡訊驗證，也就是登入時除了輸入帳號密碼，系統還會發SMS簡訊給你一串數字，要求輸入數字才能夠登入。 其他常見的 2FA 登入還有： TOTP（Time-based One-time Password 時間性一次性密碼） 會利用時間來產生一段密碼(通常六位數)，在30秒內會失效，其他像 Steam 所使用的驗證器(Authenticator)也是TOTP的一種。 Trusted Device 信任裝置 Google 帳號通常都會開這個功能，登入時會要求在你平常使用的裝置上按確認登入，相比TOTP方便了些。 Backup Codes 備份碼 假設手機無法接收簡訊、信任裝置也無法使用，這時就能夠使用備份碼登入，通常為備援選項。這種備份碼通常都是一次性的，使用後就要重新產生新的備份碼。 目前簡訊方式的 2FA 已經被認為不夠安全、能夠利用攔截或釣魚的方式攻擊，可以的話盡量不要使用。 實體金鑰 實體金鑰顧名思義就是一把實體的 USB 鑰匙(通常作為實體的 2FA 驗證手段)，設定完成之後會要求插入該金鑰才能夠登入，常見的有 Yubikey 、 Titan Security Key 等。是目前安全性最高的等級的 2FA 方式，而且相比其他方式使用上不算是麻煩（某些程度上用實體金鑰還比輸入TOTP或等簡訊還快） 實體金鑰相對於傳統 2FA 的優勢是，斷絕了被釣魚網站騙的可能。簡訊等方式還是有可能會被攔截或利用欺騙方式取得，但實體金鑰是無法偽造及複製的，唯一的攻擊方法只有取得帳號密碼而且實體金鑰物理上被拿走才能夠登入。 不過我認為對於一般使用者來說，實體金鑰目前還是非必要的，目前很多主流網路服務商都有提供實體金鑰的 2FA 選項了(Google、Twitter、Facebook、Gandi等)，但是還是沒有到很普及的程度，通常一隻金鑰需要花費 40~50USD 不等，加上在行動裝置支援上還不算非常成熟，對大部分人來說不一定是那麼適合。 如果你想非常好的保護自己的帳號安全，瞭解實體金鑰的使用，我會在另一篇文章詳述(待補)。 總結要保護帳號安全可能常常聽到，不過多數人不會當一回事或嫌麻煩，當被盜之後資料洩漏、信用卡被盜刷才後悔莫及。資訊安全如地震火災等天災，未雨綢繆遠大於亡羊補牢。如果你真正在乎你的帳號隱私及安全，現在是時候把那些弱密碼處理一下了(^u^)（至於那些覺得沒差的，駭客們會非常感謝你們的 密碼強度要夠、不要重複使用密碼 使用密碼管理器 開啟兩步驟驗證(避免使用簡訊驗證) 使用實體金鑰（可選） 以上，祝各位下次不會在密碼洩漏清單中看到自己的密碼 (ゝ∀･) 參考資料How to Choose a Password - Computerphile Strong passwords: 9 rules to help you make and remember your login credentials How NOT to Store Passwords! - Computerphile","link":"/2020/02/Why-My-Account-Got-Hacked-The-Password-Security-and-Physical-Key/"},{"title":"在 macOS 上安裝 Ruby","text":"雖然 macOS 已預裝了 Ruby ，但我在使用 gem install 時遇到了個問題： 1You don&apos;t have write permissions for the XXX directory. 後來發現是 macOS 不讓使用者更變預設 Ruby 相關的玩意，用 sudo 去跑安裝當然也不是個選項，所以還是另外獨立安裝一個，再把 PATH 設定到另一個 Ruby 比較方便。 獨立安裝方法利用 Homebrew 安裝 chruby 與 ruby-install （此方法屆時可自由切換所需要的 Ruby 版本） 1brew install chruby ruby-install 接著用 ruby-install 安裝 Ruby： 1ruby-install ruby ruby-install 會自動使用 Homebrew 安裝各種需要的 dependencies，然後從 source 編譯 Ruby，所以需要等個一陣子，可以先去泡壺茶休息下 🫖 安裝完後在 ~/.zshrc 或 ~/.bashrc 中新增以下兩條路徑（看自己用的是那種 shell，macOS Catalina 之後預設皆為 zsh ） 12source /usr/local/opt/chruby/share/chruby/chruby.shsource /usr/local/opt/chruby/share/chruby/auto.sh 完成後重啟 Terminal 輸入 which ruby，若不是顯示 /usr/bin/ruby 則代表預設的 Ruby 已經不是 macOS 預設的了！ 接著我們可以利用 chruby 選擇 ruby 版本： 1chruby 3.0.0 提供給遇到相同問題的朋友們參考 😉 參考How to Install Ruby on a Mac with chruby, rbenv, or RVM You don’t have write permissions for the /Library/Ruby/Gems/2.3.0 directory. (mac user)","link":"/2021/04/Install-Ruby-On-macOS/"},{"title":"如何讓 iPad 成為一個專業的畫板","text":"iPad + Apple Pencil 作為目前平板市場上最強大的繪畫筆記生產力組合，令許多人愛不釋手，但大部分使用者可能都會遇到這個問題（特別是使用11吋的朋友）：用筆作業時，光是手放螢幕上就佔了將近 $1/4$ ~ $1/3$ 的螢幕空間，就算將 iPad 平放於桌面手放在旁邊，邊緣與機身的厚度差還是相當卡手，讓體驗不是那麼完美，於是我設計了個算是經濟實惠效果又不錯的繪圖用支架，與各位分享 ( ´▽` ) 構思首先，設計這個的配件目的是為了使在 iPad 螢幕邊緣使用筆時，手能夠在跟螢幕差不多的平面上，讓移動時不會卡手及有個支撐。 參考了一下目前市面上的繪圖螢幕及繪圖板，周圍都有一部分留空作手托用，但平板在設計上追求的是輕薄窄框便攜，魚與熊掌不可兼得（沒關係我可以手動兼得），所以想到可以另外做個可拆式手托，在定點使用的時候能夠更加舒適的拿筆作業。 當然，我應該也不是第一個想到這個問題的人，在網路上也找到了兩個商品有相同的效果，一個是 Sketch Board Pro 但是要價 120USD 實在太貴了，而且體積實在太大；另一個在則是淘寶上的木板支架，正中間挖空可以放平板，價格 1000NTD 左右，但是一整塊又大又厚的木板也是太佔桌面空間，重量太重並且支架只能橫放，感覺不是很理想，所以我最後選擇自己來。 這次設計上有幾個目標想達成： 達成螢幕跟手托區是一個平面，可以舒適的支撐手部 設計對象 iPad 型號為：11吋 iPad Pro 及 Air 4（12吋其實只要加大設計即可 不阻擋各種功能的使用 iPad 要能靠磁吸穩穩貼在支撐板上，不隨意滑落，但方便隨時取下 盡可能的減小體積便於攜帶 可以直立使用 價格花費低 最後經過各種思考跟調整之後決定使用多層合板鐳射切割製作，設計圖如下： 預計四層鐳射切割合板，讓 iPad Type-C 口在左大幅減少手托部分與上方 Apple Pencil 的開槽（開槽越多越影響手感），這樣還有個好處是支援直插式的 Type-C Hub。 磁吸的部分解決的方式就是買副廠的磁吸雙面夾剪下底部黏上木板，當然原廠的厚度跟吸力應該是最穩的，但是價格太高了我捨不得動刀 XD 後來使用的是綠聯的磁吸夾，入手價格約在 300NT 左右，這樣剪歪也不心疼，記得億色 ESR 也有相關產品可以考慮，這邊僅供參考。 接著利用 AI 繪製出鐳切用的檔案： 5mm 底板，整體長寬約為 $31cm * 24.5cm$ 並在下方挖一個小凹槽，方便 Apple Pencil 的取放。 上面疊一層 3mm 底板，目的是預留一個相機孔的留空，讓有貼玻璃貼的情況下也不會直接磨損到鏡頭。 手托是雙層結構，一層 3mm 一層 5mm，並且使用副廠的磁吸雙面夾底部裁剪下來黏上底板，讓平板能穩定的吸上不晃動不掉落。 雙層手托的高度 8mm 剛好跟 2mm 的保護套 + iPad 本身 5.9mm 差不多高，並在右邊讓邊緣及手托中間留約 5mm 的縫隙不阻擋喇叭，上方麥克風約 3mm 留空，最後在電源按鈕處留下 2cm 左右的凹槽方便按壓與指紋辨識（Air 4）。 您可以透過贊助在 這裡 取得上述的鐳切檔案 😉目前贊助網站更改了收款機制還沒更新… 如果真的有需要的話再來信詢問吧 材料材料不多，如下： 鐳切緞木合板 $*$ 4 (5mm、3mm各二) 木質用強力膠 磁吸式雙面夾 黑色布膠帶（修補剪裁後的雙面夾用，非必需） 銼刀（修整木板邊緣用，非必需） 製作拿到切割好的板子其實就完成 80% 了！ 製作過程其實完全沒難度，將雷切好的四塊木板黏合在一起，這邊我使用的是 3M Scotch 木質用強力膠，乾的蠻快的也黏的很穩！接著把剪裁好的雙面磁吸夾粘上木板即可。 完成！可以搭配一般平板/繪圖支架使用： 橫放模式： 直放模式： 基本上完成了一開始的構想，手可以移到旁邊後能夠使用的螢幕範圍就更大了，而且磁吸部分也相當穩固，至少拿起來甩或倒過來搖平板都不會掉落（當然這就看買到的磁吸夾品質了）。按鈕喇叭等原有功能都不影響，留空的部分也不會影響到手部的動作，有了下方的凹槽也讓 Apple Pencil 非常容易取下，最後整體的價格（不含支架部分的話）也壓在了 1000NT 內，可說是相當成功！ 改善/Todo目標達成，不過這邊還是有幾個點子希望可以改善： VESA Mount Support（許多繪圖板支架支援 VESA 標準，能鎖住的話會更加穩固） 更順手的取出 iPad（目前要稍微用摳的） 不影響太多重量尺寸的情況下加入內建腳架 有機會的話再看看能不能繼續改良，再跟大家分享，感謝看到這邊的各位 (〃＾＾〃) 參考 Accessory Design Guidelines for Apple Devices","link":"/2021/03/Make-an-iPad-Drawing-Board-That-Improve-Your Drawing-Experience/"},{"title":"MacOS - 軟體無法開啟","text":"在網路上下載了一個 MacOS 的 App，但卻提示如上圖一樣無法開啟該如何處理？ 注意！這跟因為 MacOS 保護機制被攔截下來而無法開啟的 App 是不一樣的哦（非App Store下載或未識別開發者的軟體），想開啟此類警告的方法可以參照 Apple 官方文件 解決方法 解決方法是透過終端機（Terminal）操作，首先 Cmd(⌘)+空白鍵 輸入 Terminal 啟動終端機。 接著輸入 App 所在的路徑如： /Users/[YourUserName]/Downloads/，或是簡單的打開 Finder 把 App 所在的資料夾拖到 Terminal 視窗後按 Enter 也可以。 再來更改軟體內啟動程式的權限(Test.app 自行替換換成要開啟的 App 名稱)： chmod +x Test.app/Contents/MacOS/* (+x代表可執行) 此時 App 應該就能夠正常執行，如果遇到非 App Store 等安全性問題被攔下，按照上述 Apple 官方文件 開啟即可。 參考The application “SomeApp.app” can’t be opened在 Mac 上開啟 app","link":"/2020/06/macos-app-cant-be-opened/"},{"title":"羅技 Master 2S 拇指鍵維修筆記","text":"前陣子我的滑鼠：Logitech Master 2S 左邊的拇指鍵突然按下之後卡住了，連帶的整個滑鼠都沒辦法使用（包括去 Logitech Option 裡面把拇指鍵禁用都無效），看了下保固發現剛好也過了(´･_･`) Google 了下發現不少人都有同樣問題，幸好維修不難，只要把兩個螺絲轉鬆即可，也不用買新零件來替換。 材料及工具 Torx T5 梅花起子 #PH1 十字起子 替換用滑鼠腳墊 維修過程首先拆下腳墊（膠跟表層容易分開拆的時候要注意）。 上方為兩個 T5 梅花螺絲，兩側腳墊下則是四個 #1 十字螺絲。 接著抓住上殼兩側稍微施力打開，動作不要太大力不然會扯到上下 PCB 排線。 如果只是要修拇指鍵的話其實大可不必拆排線，只需將下圖中兩個黑色螺絲稍微轉鬆半圈到一圈即可（可以按按看按鈕是否恢復正常），不過相較正常的狀況按鍵會稍微肉一點。 由於我打算順便把微動換掉所以把排線先拆下來，方法是將米白色那片往後拉，就可以卸下排線。 更換微動首先將電池艙螺絲及電池艙卸下後，拆下四顆固定左右鍵 PCB 的螺絲： 原廠的微動是中國製 D2FC-F-7N(10M) 十萬點擊壽命的版本，我覺得手感普普而且聲音蠻大，這次順便換成了日本製 D2F-F-3-7（傳說中的頂級微動？），換了之後聲音小了不少（但絕對不是到靜音那麼誇張）。用起來回彈跟手感也都蠻合自己胃口的，這部分玩過的滑鼠微動不多不太會形容 XD 關於要怎麼換微動應該蠻容易的，不是本篇主題就不詳述了，完成後按順序鎖回去即可。 Murmur這次問題的罪魁禍首如下圖，萬惡的羅技塑膠部件（兩銀色螺絲鎖住的部分）： 推測是因為那片壓在拇指鍵微動上的塑膠件用久了就很容易有些變形，由於塑膠件及微動非常接近，稍微變形後容易變成按下去後就一直壓住微動，網路上蠻多人也都是一年多開始出現問題，恰好是保固過的時間(ry 這情況好像跟在 G27 上遇到的問題有點類似，同樣都是塑膠老化造成…… 雖然維修不算困難不過對於一個官方要價 3,000 NT 的滑鼠實在有點…… ╮(╯_╰)╭ 參考Fixing the Logitech MX Master Scroll Wheel","link":"/2020/02/Logitech-Master-2S-Gesture-Button-Fix/"},{"title":"利用 Raspberry Pi 控制 PWM 風扇及轉速偵測","text":"相信不少人都會為熱情的 Pi 4 加上風扇散熱，不過小風扇噪音就成了問題，由於 Pi 也不是隨時都滿載需要風扇全速運轉，所以我們可以利用 PWM (Pulse Width Modulation) 來控制轉速。讓風扇在提高到一定溫度時才啟動，或是降低轉速來降低噪音。 硬體接線我使用風扇是 Noctua NF-A4 5V PWM ，一個 40mm、5V 的 PWM 控速風扇，下圖是本次所使用的腳位： 黃色黑色分別為 5V 電源及接地 綠色為轉速信號 藍色為 PWM 控制訊號輸入 若風扇不支援 PWM 轉速控制（只有兩線或三線）可以參考 #138 Variable Speed Cooling Fan for Raspberry Pi using PWM and PID controller 此影片或 PWM Regulated Fan Based on CPU Temperature for Raspberry Pi 利用 BJT 電晶體來做 PWM 控制。 轉速訊號線（綠）的部分，由於風扇內是一個開集極電路（OC），所以需要一個上拉電阻（Pull-up resistor）至 Vcc 才能夠讀取到波形，這邊可以參考 Noctua PWM 規格白皮書(英文)（大部分的風扇轉速訊號應該都是這種設計，保險起見建議還是要查看廠商提供的資料） 注意！樹莓派的 GPIO 為 3.3V，所以上拉電阻 Vcc 一定要接到 3.3V，若接到 5V 會造成樹莓派電路損毀！ 上拉電阻我這邊選擇了 1kΩ 1/4W，上面官方所提供的資料為電流不可以超過 5mA ，根據 $V=IR$ 可算出電阻應該要 660Ω 以上，如果過低會造成風扇電路過載。 PWM 訊號線因為大部分的微控制器或單晶片的 GPIO 都有做好穩定 PWM 方波的輸出電路了，所以這裡就不需要另外自製電路，直接接上 PWM 輸出腳即可（一般的 GPIO 貌似也能靠軟體設定輸出 PWM 訊號，不過硬體輸出較為穩定），腳位參考。 順帶一提，由於風扇沒有附轉杜邦的線材，所以另外買了 Molex 2510 4PIN (2.54mm間距) 連接器，不過要另外將防呆卡槽消掉一部份，如果有現成的專用風扇線就不用（一般風扇為了相容 3P 連接器所以不會做滿） 以下是接上 Pi 3 做硬體測試及軟體調教的照片： 硬體安裝完成後，接著就用軟體來控制風扇吧！ 軟體控制PWM GPIO 測試這裡可以先選擇使用 Wiring Pi 來進行測試接線是否正確及 GPIO 是否正常，如果不測試可以直接跳到 PWM 訊號控制轉速。 記得之前的 Pi 版本都是有預裝的，不過目前新版 Pi 4B 還沒加入預設，我們可以透過手動的方式來升級： 123cd /tmpwget https://project-downloads.drogon.net/wiringpi-latest.debsudo dpkg -i wiringpi-latest.deb 檢查版本： gpio -v 撰文時最新版為 2.52 查看 GPIO 狀態： gpio readall 把 PIN1 設定為 PWM 模式（注意這邊的編號為 wiring-pi 的編號，可參考Pi GPIO Pinout） gpio mode 1 pwm 設定 PWM 訊號寬度（數值可為 0~1023） gpio pwm 1 [數值] 檢查風扇是否成功用 PWM 控制，如果有隨著設定數值改變就沒問題了！ PWM 訊號控制轉速我把控制程式放在 Github 上了，可以點擊參考：DriftKingTW/Raspberry-Pi-PWM-Fan-Control 我使用的是硬體 PWM GPIO18 (12/13與18/19)，剩餘的腳位使用的話是軟體 PWM。由於硬體 PWM 跟耳機孔使用相同的電路，所以請不要同時使用 建立資料夾存放要用到的程式： mkdir -p Scripts cd Scripts/ 下載程式： 1wget https://raw.githubusercontent.com/DriftKingTW/Raspberry-Pi-PWM-Fan-Contorl/master/fan_control.py 開啟試試能不能成功控制： python fan_control.py 沒問題的話就可以把程式設定為開機自動啟動： 編輯 rc.local 1sudo vim /etc/rc.local 在 exit 0 之上加入以下指令： 1python /home/pi/Scripts/fan_control.py &amp; 檔案路徑可能會不同，記得使用絕對路徑。最後的 “&amp;” 符號代表背景執行。 如果你不想知道原理，可以直接轉跳閱讀：讀取轉速訊號 PWM 控制原理簡單來說就是：輸出方波，利用工作週期（Duty Cycle 又稱佔空比）來控制風扇的轉速，假設方波訊號處於高電位所佔一個週期的時間是 50% 代表讓風扇處於半速狀態，以此類推 75% 即是風扇 75% 速度，更詳細可以參考維基：脈衝寬度調變 接著來分析程式的部分，這邊使用 Python 來做控制： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768# 載入需要的函式庫import RPi.GPIO as GPIOimport timeimport signalimport sysimport os# 設定可照自身情況調整FAN_PIN = 18 # PWM 控制腳位，設定成你想接的位置即可，注意是 BCM 編號WAIT_TIME = 1 # 每次控制的更新頻率，單位為秒PWM_FREQ = 25 # PWM 頻率，這邊根據 Noctua 規格使用 25kHz，其他風扇弄個 50 之類即可，若動作怪怪的可以在自行測試MIN_TEMP = 40 # 最小啟動溫度MAX_TEMP = 70 # 最高溫度FAN_LOW = 40 # 風扇低轉速FAN_HIGH = 100 # 風扇高轉速FAN_OFF = 0 # 風扇關閉FAN_MAX = 100 # 風扇全開# 利用 vcgencmd 取得CPU溫度def getCpuTemperature(): res = os.popen('vcgencmd measure_temp').readline() temp =(res.replace(\"temp=\",\"\").replace(\"'C\\n\",\"\")) #print(\"temp is &#123;0&#125;\".format(temp)) # 把註解取消可觀察溫度 return temp# 設定風扇溫度def setFanSpeed(speed): fan.start(speed) return()# 控制風扇動作def handleFanSpeed(): temp = float(getCpuTemperature()) # 如果溫度小於設定的最小啟動溫度即把風扇關閉 if temp &lt; MIN_TEMP: setFanSpeed(FAN_OFF) #print(\"Fan OFF\") # 把註解取消可查看風扇訊息 # 如果溫度超過最高溫度將風扇 100% 開啟 elif temp &gt; MAX_TEMP: setFanSpeed(FAN_MAX) #print(\"Fan MAX\") # 把註解取消可查看風扇訊息 # 如果溫度介於最小及最大值之間，計算動態風扇速度 # 每一階(step)為：(高轉速-低轉速)/(最高溫度-最小溫度) # 利用算出來的 step 算出線性的簡易 轉速/溫度 反應曲線 else: step = (FAN_HIGH - FAN_LOW)/(MAX_TEMP - MIN_TEMP) temp -= MIN_TEMP setFanSpeed(FAN_LOW + ( round(temp) * step )) #print(FAN_LOW + ( round(temp) * step )) # 把註解取消可查看風扇訊息 return ()# 主程式try: # 設定 GPIO GPIO.setwarnings(False) GPIO.setmode(GPIO.BCM) GPIO.setup(FAN_PIN, GPIO.OUT, initial=GPIO.LOW) fan = GPIO.PWM(FAN_PIN,PWM_FREQ) setFanSpeed(FAN_OFF) # 無限迴圈，按照設定的時間間隔不斷偵測溫度來設定轉速 while True: handleFanSpeed() time.sleep(WAIT_TIME)except KeyboardInterrupt: # 如果使用者按下 ctrl+c 的例外處理 setFanSpeed(FAN_HIGH) #GPIO.cleanup() # 此註解可以清除本程式用的 GPIO 設定，如果要用上一行的指令本行保留註解狀態 讀取轉速訊號程式同樣放在 Github 上：DriftKingTW/Raspberry-Pi-PWM-Fan-Control 1wget https://raw.githubusercontent.com/DriftKingTW/Raspberry-Pi-PWM-Fan-Control/master/read_fan_speed.py 開啟即可開始輸出風扇的轉速(RPM)，預設每秒偵測一次 python read_fan_speed.py 分析程式： 12345678910111213141516171819202122232425262728293031323334353637383940414243# 載入需要的函式庫import RPi.GPIO as GPIOimport time# 腳位設定TACH = 24 # 風扇轉速輸出腳位PULSE = 2 # Noctua 規格為風扇轉一圈有兩次脈衝，大部分風扇也是兩次，少數四次WAIT_TIME = 1 # 單位為秒，每次更新時間# GPIO 設定GPIO.setmode(GPIO.BCM)GPIO.setwarnings(False)GPIO.setup(TACH, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Pull up to 3.3V# 要用到的全域變數t = time.time()rpm = 0# 計算 RPM 的函數def fell(n): global t global rpm dt = time.time() - t # 取得時間計算出週期 if dt &lt; 0.005: return # 無視過短的脈衝（雜訊） freq = 1 / dt # 取得頻率（週期倒數） rpm = (freq / PULSE) * 60 # 計算RPM：將頻率除以風扇轉一圈的脈衝數，在乘以60（每分鐘） t = time.time() # 更新時間# 新增監聽器，偵測到波形降下來的時候呼叫 fell() 計算一次 RPMGPIO.add_event_detect(TACH, GPIO.FALLING, fell)# 主程式try: # 無限迴圈不斷偵測 while True: print \"%.f RPM\" % rpm # 輸出轉速到螢幕上 rpm = 0 # 歸零 time.sleep(WAIT_TIME) # 每秒偵測一次except KeyboardInterrupt: # 同上處理 ctrl+c 例外 GPIO.cleanup() # 清除本程式用的 GPIO 狀態 參考Noctua PWM specifications white paper NF A4x10 5V PWM Wiring Pi wiringPi updated to 2.52 for the Raspberry Pi 4B #138 Variable Speed Cooling Fan for Raspberry Pi using PWM and PID controller rxseger/tachfan.py raspberry-gpio-python","link":"/2019/11/Using-Raspberry-Pi-to-Control-a-PWM-Fan-and-Monitor-its-Speed/"},{"title":"找不到喜歡的單手鍵盤？那就自己做吧","text":"在這繪圖螢幕入門門檻越來越低及iPad逐漸成為專業繪圖板的時代，市面上也跟著出現不少主打創作者/遊戲用的單手鍵盤或是快捷操作裝置。但是等了好幾年了，還是找不到「適合」自己的鍵盤 🤨 那麼，與其繼續等下去不如自幹一個適合自己的單手鍵盤吧！ 動機 &amp; 需求分享下想做這個鍵盤的原因，如果沒興趣可以跳到 鍵盤設計 也不是說市面上沒一個好用的鍵盤，但我不知道是比較龜毛還是廠商單純想賺錢，有不少功能是在贊助提案階段就許多人提出的意見，說個下版本改進但實際上市之後下一代完全就沒消息了。 對，我就是說藍芽。桌機+繪圖螢幕可能還好，那麼多人用平板畫圖有誰會想在平板上接個有線鍵盤嗎 XD，在這連一般機械鍵盤都越來越多轉向無線的趨勢下居然沒一家單手鍵盤/控制器願意做成無線的 🤯 而且我想要的功能其實也沒那麼複雜，列幾點參考： 藍芽連接 機械式(不喜歡矮軸) Type - C 接口 按鍵做到TGB那行，帶1.5u以上的Modifier鍵 可自定義鍵位/巨集/Layer 旋鈕(可有可無，個人使用並不太常需要) 應該也不是太難或多稀有的需求吧 🥺 以下來就開始來聊聊設計跟製作的過程給大家參考，或許你/妳會有更好的點子或想法也歡迎跟我分享，Let’s get strated. 鍵盤設計一開始是有考慮純手焊鍵盤，不過相對的麻煩，而且對於整齊度還是有點強迫症。最後我還是決定製作 PCB 鍵盤，雖然從沒設計過 PCB 不過對於電路有點基本的認識所以製作起來是沒什麼太大困難的，而且鍵盤電路也相當簡單，就算是不熟悉的朋友如果想做也不必太擔心 😎 雖然是單手鍵盤但它本質上就是鍵盤，所以設計方式跟一般鍵盤是一樣的！在做了一番功課之後，我找到了 Keyboard Layout Editor 這個工具，可以先在這網頁上畫出自己所需要的鍵盤 Layout 跟一些基本參數設定，這部分我認為操作已經相當直觀就不深入贅述佔版面了，需要的話可以參考我這次的 設計圖 。 如果是鍵盤玩家應該看得出來我是從 ErgoDox 的設計下去做改變的，不過這邊有個小提醒記得要考慮好鍵帽的問題XD 否則到時候找適合的鍵帽會找的很辛苦 😅 (原本喜歡原廠或OEM高度的，後來發現只能挑DSA) 另外其實我自己也沒打過 ErgoDox ，就抱持著反正第一次應該會失敗的心情下去弄了，不過後來成品還算能用就是。 完成好鍵位設計之後可以把得到的 JSON 資料導入到 Plate &amp; Case Builder 這個網站產生 CAD 檔案了，好像還有提供外殼與訂位板的訂購有需要的話可以參考看看，我這次是沒用到定位板，外殼打算用 3D 列印。 完成後就可以進到下個步驟，開始設計 PCB 了！ 我選擇的是 EasyEDA ，這部分就看個人喜好跟習慣了，走線部分我也不是專業的所以建議大家可以去找網路上的各種文件跟教學，注意下不要犯常犯的錯跟照著軟體的建議走基本上就不會有問題了 💪 另外我這次使用的開發板是由 Unexpected Maker 所做的 TinyPICO ，這是一塊 ESP32 開發板，選擇這塊板子的原因有以下幾點： 內建藍芽，不用另外煩惱藍芽模組 體積非常小巧，未來要做成搖桿型的控制器也沒問題 內建電池管理晶片，省去電源電路的設計 Type-C! Type-C! Type-C! 整體消耗跟睡眠能耗在 ESP32 中相對好（當然比不過 Pro Micro 那種好就是） 這幾點正好適合這次的專案 🥰 ，缺點大概就是 QMK 不支援 ESP32（有人 Fork 出來不過我還沒搞成功）變成軟體要自己寫就是，幸好 ESP32 支援 Arduino Library 應該不會太麻煩，還有功耗上可能比較不理想，沒關係自幹的話無限加大電池就好了。 以下是電路圖設計好的樣子，旋鈕我自己不急所以打算下一版再加(有的話)，另外有留個 0.96 吋 OLED 的位置跟走線可以擴充： GPIO 不足的部分使用陣列輕鬆解決，鍵盤陣列詳細的解說網路上資源蠻多了就不再贅述，大致上就是透過縱橫的開關去定位哪個按鍵是觸發的狀態。 接著畫好後就是 PCB 走線了，第一次畫的不怎麼樣，獻醜了： 各種元件的部分可以善用社群提供的資源直接使用，才不用自己還要找規格書刻尺寸喔～ 接著找個 PCB 廠商印刷即可，我找的是 JLCPCB (非業配)，雖然我知道他們在 Youtube 上跟另一家 PCBway 廣告都打的很兇，沒錯我就是看別人業配不小心上鉤的 😏 不過第一次印起來是真的挺新鮮的，廠商每個處理細節都會有記錄，可以上去看看板子是在鑽洞阿上 Silkscreen 上錫之類的流程一清二楚很有趣 🤯 速度跟價格也都蠻 OK ，不過我對黑色 PCB 情有獨鍾所以會比綠色板子多等一些時間就是（約五天），印了5張黑色、HASL(with lead) 表面處理、尺寸在 \\(150mm * 130mm\\) 左右的板子價格約 12 USD （不含運），給大家參考個。 鍵盤製作接著就是等各種零件跟 PCB 到了開始組裝製作了！這邊列下大致用到的零件，工具那些基本烙鐵、螺絲起子之類的就不提了： PCB 五腳紅軸 x 40 (沒定位板建議五腳比較穩) ErgoDox DSA鍵帽一套 1.25u DSA增補 PCB衛星軸 300 兩套 0.91” OLED 螢幕 TinyPICO ESP32開發板 M3 螺絲數個 1N4148 二極體 x 40 鋰聚合物電池，這次使用的容量為 4000mah 另外在等待的期間，可以開始來設計 3D 列印外殼的檔案了，因為算是測試版本所以沒有設計上蓋，大概長這個樣子： btw 軟體是 Autodesk Fusion 360，個人使用是免費的。 等了一週東西都來了，來看下PCB 完成的樣子： 另外我原本以為是亮黑色，因為沒有消光的選項，結果居然是我最想要的消光黑太美了 🥺🥺🥺 組裝的部分很簡單就插上去焊一焊衛星軸裝一裝就好，不過外殼設計部分有點失算 🥶，距離有點沒抓好所以後來得磨掉側邊一些才裝的進去，加上高度也有點問題後來乾脆加個螺帽墊高卡上去 🥲，下一次印的時候再改善吧，或許接著可以玩玩看 CNC 銑個鋁製的外殼。 搭配 iPad 使用的情境（iPad 的手托板可以參考 如何讓 iPad 成為一個專業的畫板）： 到這部分鍵盤基本功能都算完成了，可喜可賀！不過外殼設計失誤導致鍵盤高度變高，可能要用手托會比較舒服 😭 等等，好像還漏了重要的部分？ 軟體嘞 💩 其實軟體部分在拿到開發板跟設計 PCB 前就開始做撰寫跟測試了，但是因為功能上還沒完全達到自己一開始所需要的功能跟規劃，目前只實現了無線連接、自定不同層級的各種按鍵、螢幕顯示連線狀態及所按按鍵等，巨集也尚未完成，計劃到時候比較完善時再另外寫一篇軟體開發的分享。不過現在至少能正常使用，雖然目前的 Code 還挺亂就是XD 有興趣的可以參考 Github 的 WIP Code DriftKingTW/TinyPICO-BLE-Marco-Pad 另外做個 Todo 好了，順便勾一下目前有做到的功能： 藍芽連接 機械式 Type - C 接口 按鍵做到TGB那行，帶1.5u以上的Modifier鍵 螢幕擴充支援（目前做半套） 可自定義鍵位/巨集/Layer（目前做半套） Web UI 鍵位設定 旋鈕（預計下個版本支援） 未來還想用 TinyPICO 再做一個類似 Joycon 那種搖桿的快捷手把，在外出或比較擁擠的地方應該挺適合也方便拿在手上，有機會再來試試看。 那這次簡單的設計跟製作跟大家分享到這，感謝你/妳的閱讀，那我們下次見 🖐 2022-08 完善功能更新記錄我也不知道為什麼拖了那麼久，不過最近突然有動力回去自己把之前想做的功能繼續完善，主要有下面幾項功能/改動： 開發了鍵位設定用的網站，並架設於 Github 上 (TinyPICO BLE Keypad Configuration Tool) 設定鍵位由程式寫死改為燒錄 JSON 格式的設定到 SPIFFS 內來更新鍵位 弄了批次檔整合 ESPTool，將燒入 SPIFFS 的過程盡量簡化，不過目前還是需要在有 Python 的環境下執行(CLI Tool) 增加休眠模式(透過 ESP32 Deep Sleep 實現)，並且時間內未使用自動進入休眠省電 電量計算改善，沒想到電量的計算意外的麻煩呢… 完善螢幕顯示功能，支援顯示自定按鍵 Label (不過網頁上還沒法設定)，顯示電量 把之前的破爛 Code 修一下，大概變成可以回收的等級了 =&gt; DriftKingTW/TinyPICO-BLE-Keypad 畫了壓克力外殼，完成度更高了點 更換了好一點的衛星軸、Tape mod 提升大鍵跟整體的聲音 (還偷換了鍵帽 🤣 以下為改造後的樣子： 搭配 Filco Macaron Wrist Rest 正面 背面（做了 Tape mod 的話好像反而不適合用透明的殼🤣 ） 使用情境大概長這樣，搭配之前做的 iPad 畫板 第二版打算要重新設計電路了，看能不能塞個旋鈕跟整個位置再改良一下，不過按照我這拖延症不知道還要多久就是了 XD 之後可能再考慮換個主控，nice!nano 看起來不錯的樣子，不過為了不浪費我自己寫的韌體跟網站可能還是先讓 TinyPICO 撐住第二版吧！ 參考TinyPICOswillkb Plate &amp; Case Builderkeyboard-layout-editor.com","link":"/2021/07/diy-bluetooth-marco-pad/"},{"title":"在 Apple Silicon Mac 上使用 DisplayCAL 校正外接顯示器","text":"最近又到了要重新幫螢幕校色的時候了，之前都是使用 DisplayCAL 這套軟體做色彩校正，但去年年底將電腦換成 Apple Silicon Mac 後，在軟體使用上遇到了無法偵測外接螢幕的問題，這邊分享一下解決方式： 問題與解決方式DisplayCAL 在安裝後會安裝一套叫做 ArgyllCMS 開源的色彩管理系統，但是安裝完成後可以看到我的外接螢幕 Dell U2520D 並沒有顯示在顯示器列表中…如下圖： 造成這個問題的原因是 DisplayCAL 雖然安裝時說會下載最新的 ArgyllCMS ，但其實預設安裝的版本為 v2.1.2 目前的解決方法則是透過手動下載新版 ArgyllCMS 後覆蓋掉 DisplayCAL 安裝的版本： 首先到 DisplayCAL 下載安裝最新版本 插上校色儀後啟動 DisplayCAL ，筆者自己的校色器是 SpyderX 首次啟動時會提示需要安裝 ArgyllCMS： 這邊先選擇取消安裝，然後到 ArgyllCMS 下載 Intel OS X 10.6 64 bit or later 的最新版本（22年2月撰文時為 v2.3.0，接下來提到的路徑可能版本號會有不同請注意） 解壓縮下載回來的 .tgz 檔案，並將解壓出來的 Argyll_V2.3.0 資料夾整個移動至~/Library/Application Support/DisplayCAL/dl (可透過在 Finder 中按下 ⌘Command + ⇧Shift + G 後貼上路徑直接開啟資料夾) 接著回到 DisplayCAL 中上方菜單欄選擇 File &gt; Locate ArgyllCMS executables... 選擇 ~/Library/Application Support/DisplayCAL/dl/Argyll_V2.3.0/bin/ 點選開啟 接下來應該就能夠正常識別外接螢幕了，校色過程中可能會出現 macOS 阻擋非安全執行的對話框，記得去系統隱私安全設定那邊點選允許執行 在校色過程中有遇到一些奇怪的小bug，在校色快完成時如果跳出非安全執行的對話框會有可能導致外接顯示器全黑沒畫面需要重新連接，推測可能是在套用 ICC Profile 時被擋住的問題，這部分可以自行嘗試時間比較短的校色流程試試，流程跑完沒問題後再做詳細校色比較省時間 參考 Mac Mini M1 color calibration DisplayCAL ArgyllCMS","link":"/2022/02/calibrate-external-monitor-on-apple-silicon-mac-by-displaycal/"},{"title":"利用 Valine-Admin 與 Gmail 為 Valine 留言系統提供 Email 通知功能及留言管理","text":"本站使用的是 Valine 留言系統，但是之前忘了加上留言通知導致有些留言沒看到（非常抱歉😅，後來事物繁忙到現在才加上通知功能。 這次就來記錄如何使用 Valine-Admin 透過 Gamil 的 SMPT 服務免費加上 Email 通知功能以及留言管理後台吧！ 事前準備這邊預設已經安裝設定好環境（或已啟用）Valine 留言功能並能夠正常使用，雲端運算平台為 LeanCloud（國際版），其實我想用 Firebase 不過 Valine 官方尚未支援😭 Valine-Admin Email 通知設定這邊要使用的是官方推薦的 DesertsP/Valine-Admin 實現即時通知功能，並透過 Gmail 的 SMTP 服務發送 Email。 關於 Gmail 的部分我們要先去 Google Account/App Password 中進行 App 設定（需要開啟 2FA 驗證，關於 2FA 相關知識可以參考之前的文章） 新增一個 App Password，選擇自定選項並輸入一個名稱讓自己知道這串密碼是給什麼服務用的，如下圖： 接著 Google 會產生 App 密碼給你，複製黃框區域的密碼，稍後要填到 SMTP 密碼欄位中： 再來進入使用 Valine 的 LeanCloud App 中，選擇 LeanEngine &gt; Web &gt; Settings 點擊 Add a new variable 設定以下各項環境變數（範例僅供參考）： 變數 範例 說明 SITE_NAME DriftKingTW’s Blog [必須]網站名稱 SITE_URL https://blog.driftking/tw [必須]網站URL SMTP_SERVICE Gmail [必須]SMTP服務 SMTP_USER &lt;Your_Gmail_Account&gt; [必須]Gmail帳號 SMTP_PASS &lt;Your_Google_App_Pass&gt; [必須]剛才產生的App密碼 SENDER_NAME DriftKingTW [必須]寄件人名稱 SENDER_EMAIL xxx@gmail.com [必須]寄件人Email ADMIN_URL Text [建議]自動喚醒服務用 BLOGGER_EMAIL xxx@gmail.com [可選]自己的收件Email AKISMET_KEY XXX [可選]Akismet垃圾留言檢測 完成後點擊 Save 儲存設定 圖中 MAIL_SUBJECT、MAIL_SUBJECT_ADMIN、MAIL_TEMPLATE、MAIL_TEMPLATE_ADMIN為 Email 的樣版設定，會在自定義 Email 模板設定中提到。 雲端後台管理部署首先在環境變數下方找到 LeanEngine domain 欄位，填入自己想要的網頁名稱（將來會透過這個網址連接留言管理後台） 接下來在左方導覽列切換至 Deploy 中，選擇 Deploy from Git 填入 Git Repo： https://github.com/DesertsP/Valine-Admin.git。選擇 Production 模式後點擊 Deploy 進行手動部署。 完成設定後透過剛才設定的網址（如：driftkingtw.avosapps.us，註冊自己的管理員帳密） 若進入後自動轉跳到登入頁面，需要手動去 DataStorage 將 _User 資料表清空。 完成後即可透過後台網址登入到後台管理系統了！後台的操作應該相當直覺，這邊就不多介紹了😉 防止免費版 LeanCloud 自動休眠由於免費版的 LeanCloud 容器會有自動休眠的限制，一天強制休眠 6hr，半小時內沒有新的請求也會自動進入休眠狀態，雖然發送請求的時候會自動喚醒但該則請求的 Email 通知會發送失敗，以下提供 Valine-Admin 官方的解決方法： 自動喚醒 透過環境變數 ADMIN_URL 到 LeanEngine &gt; Scheduled Tasks 中新建自動喚醒任務： 填入自訂名稱後，動作選擇 self_awake，Corn 表達式部分填入 0 */25 0-15,23 * * ? （國際版 LeanCloud 使用時間為 UTC+0，代表從台北時間 7:00AM～11:50PM 中每30分鐘會自動喚醒） 自動重發 24h 內漏發的 Email 原理同上，再新增一個自動任務，動作選擇 resend_mails ，Corn 表達式則為 0 10 23 * * ? （國際版 LeanCloud 使用時間為 UTC+0，代表從台北時間 7:10AM 會自動重發 24h 內漏發的 Email） 到此基本設定全部完成，可以自己測試一下功能是否正常運作 😎 自定義 Email 模板可以透過新增以下幾種環境變數來達成自定義 Email 模板： 變數 說明 MAIL_SUBJECT [可選]郵件主旨 MAIL_TEMPLATE [可選]郵件樣板 MAIL_SUBJECT_ADMIN [可選]通知自己郵件的主旨 MAIL_TEMPLATE_ADMIN [可選]通知自己郵件的樣本 這邊提供自己翻譯官方樣板的繁體中文及英文版本： 12&lt;!-- 繁體中文 MAIL_SUBJECT --&gt;$&#123;PARENT_NICK&#125;，您在『$&#123;SITE_NAME&#125;』上的留言有新回應！ 1234567891011121314&lt;!-- 繁體中文 MAIL_TEMPLATE --&gt;&lt;div style=\"border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;\"&gt; &lt;h2 style=\"border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;\"&gt; 您在 &lt;a style=\"text-decoration:none;color: #12ADDB;\" href=\"$&#123;SITE_URL&#125;\" target=\"_blank\"&gt; $&#123;SITE_NAME&#125;&lt;/a&gt; 上的留言有新回應 &lt;/h2&gt; $&#123;PARENT_NICK&#125; 您曾發表留言：&lt;div style=\"padding:0 12px 0 12px;margin-top:18px\"&gt; &lt;div style=\"background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;\"&gt; $&#123;PARENT_COMMENT&#125; &lt;/div&gt; &lt;p&gt;&lt;strong&gt;$&#123;NICK&#125;&lt;/strong&gt; 回應：&lt;/p&gt; &lt;div style=\"background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;\"&gt; $&#123;COMMENT&#125;&lt;/div&gt; &lt;p&gt;您可以點擊&lt;a style=\"text-decoration:none; color:#12addb\" href=\"$&#123;POST_URL&#125;\" target=\"_blank\"&gt;查看完整回應&lt;/a&gt;，歡迎再次光臨 &lt;a style=\"text-decoration:none; color:#12addb\" href=\"$&#123;SITE_URL&#125;\" target=\"_blank\"&gt;$&#123;SITE_NAME&#125;&lt;/a&gt;。&lt;br&gt;&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 12&lt;!-- 繁體中文 MAIL_SUBJECT_ADMIN --&gt;$&#123;SITE_NAME&#125; 上有新留言！ 12345678910&lt;!-- 繁體中文 MAIL_TEMPLATE_ADMIN --&gt;&lt;div style=\"border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;\"&gt; &lt;h2 style=\"border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;\"&gt; 您在 &lt;a style=\"text-decoration:none;color: #12ADDB;\" href=\"$&#123;SITE_URL&#125;\" target=\"_blank\"&gt;$&#123;SITE_NAME&#125;&lt;/a&gt; 上的文章有了新的留言！ &lt;/h2&gt; &lt;p&gt;&lt;strong&gt;$&#123;NICK&#125;&lt;/strong&gt; 回覆：&lt;/p&gt; &lt;div style=\"background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;\"&gt; $&#123;COMMENT&#125;&lt;/div&gt; &lt;p&gt;您可以點擊&lt;a style=\"text-decoration:none; color:#12addb\" href=\"$&#123;POST_URL&#125;\" target=\"_blank\"&gt;查看完整留言&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;/div&gt; 12&lt;!-- English MAIL_SUBJECT --&gt;$&#123;PARENT_NICK&#125;, your comment on 『$&#123;SITE_NAME&#125;』 got a new response! 12345678910111213141516&lt;!-- English MAIL_TEMPLATE --&gt;&lt;div style=\"border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;\"&gt; &lt;h2 style=\"border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;\"&gt;Your comment on &lt;a style=\"text-decoration:none;color: #12ADDB;\" href=\"$&#123;SITE_URL&#125;\" target=\"_blank\"&gt; $&#123;SITE_NAME&#125;&lt;/a&gt; have a new response! &lt;/h2&gt; $&#123;PARENT_NICK&#125; You says：&lt;div style=\"padding:0 12px 0 12px;margin-top:18px\"&gt; &lt;div style=\"background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;\"&gt; $&#123;PARENT_COMMENT&#125; &lt;/div&gt; &lt;p&gt;&lt;strong&gt;$&#123;NICK&#125;&lt;/strong&gt; Replied：&lt;/p&gt; &lt;div style=\"background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;\"&gt; $&#123;COMMENT&#125;&lt;/div&gt; &lt;p&gt;You can &lt;a style=\"text-decoration:none; color:#12addb\" href=\"$&#123;POST_URL&#125;\" target=\"_blank\"&gt;view full response&lt;/a&gt;, Cheers! &lt;a style=\"text-decoration:none; color:#12addb\" href=\"$&#123;SITE_URL&#125;\" target=\"_blank\"&gt;$&#123;SITE_NAME&#125;&lt;/a&gt;。&lt;br&gt;&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 12&lt;!-- English MAIL_SUBJECT_ADMIN --&gt;New comment on $&#123;SITE_NAME&#125;. 1234567891011&lt;!-- English MAIL_TEMPLATE_ADMIN --&gt;&lt;div style=\"border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;\"&gt; &lt;h2 style=\"border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;\"&gt;You have a new comment on &lt;a style=\"text-decoration:none;color: #12ADDB;\" href=\"$&#123;SITE_URL&#125;\" target=\"_blank\"&gt;$&#123;SITE_NAME&#125;&lt;/a&gt; . &lt;/h2&gt; &lt;p&gt;&lt;strong&gt;$&#123;NICK&#125;&lt;/strong&gt; comment：&lt;/p&gt; &lt;div style=\"background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;\"&gt; $&#123;COMMENT&#125;&lt;/div&gt; &lt;p&gt;You can &lt;a style=\"text-decoration:none; color:#12addb\" href=\"$&#123;POST_URL&#125;\" target=\"_blank\"&gt;view full response&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;/div&gt; 記得更新環境變數後要重啟容器才會生效喔，可以試著改成自己想要的樣子 😎 剩餘的其他詳細功能請參考 DesertsP/Valine-Admin 參考DesertsP/Valine-Admin issue:关于时区的一个问题","link":"/2021/04/add-email-notification-to-valine/"},{"title":"Logitech Master 3 拇指鍵切換裝置功能改裝","text":"雖然很喜歡羅技 Master/Anywhere 系列的滑鼠，不過對於多裝置切換的功能上不太滿意，主要是因為鍵盤不是羅技的，所以 Logitech Flow 的軟體切換只能切滑鼠對我來說沒有什麼卯月(加上需要切換的裝置也不在同一個區網裡面)，這樣的情境下就必須得使用滑鼠底部的切換裝置按鈕，但每次要切換就得把滑鼠拿起來按實在太麻煩了…羅技也不開放把手勢按鍵改成切換裝置的功能，既然如此只好自己來手動擴充功能了 ᕕ( ᐛ )ᕗ 改裝過程其實要做到上部手勢鍵可以切換也挺簡單，直接把切換開關拉兩條線到手勢鍵的按鈕，軟體再把原本手勢鍵設定成無效就可以了，過程大致如下： 取下腳貼與螺絲(除了靠近 USB 口的為 T5 梅花外，其餘都是 #0 十字) 拆開上蓋時，注意有排線連接部分 接下來就是各種螺絲轉一轉，難度不高 既然拆開了就順便換個微動吧，想說換個凱華靜音微動比較不會吵到人，原本以為手感會很肉但意外的回饋感不錯 XD 再來把下方的切換裝置按鍵拉線到拇指鍵那邊即可(當然如果想用其他按鍵設定也是可以的) Logitech Options 中把按鍵改為 Do Nothing 完成後就可以不用拿起滑鼠直接切換囉，不過這邊還是提醒一下這個改裝使用上要注意的部分： 切換時要多按一次(應該是因為平常抬起滑鼠後才會讓那個按鍵開始作用，所以要先按一下之後才能開始切換裝置) 因為線的厚度關係，會讓原本的切換裝置鈕很難按，所以可以的話要用更細的線或乾脆直接不使用那邊切換了 感謝閱讀 😊 參考How to Open the Logitech MX Master 3","link":"/2022/04/logitech-master-3-gesture-button-modify/"},{"title":"Pi Dash - 一個比較大的桌上型 Touch Bar 還是 Cyberdeck ？","text":"那個被詬病已久，大家喜聞樂見被砍掉的 Touch Bar，偏偏是我最喜歡的功能之一！！ 😭😭😭（蘋果怎麼在這種地方聽到了使用者的回饋）既然官方不幹了，那就是時候來弄一個更強並更符合自己需要的替代品吧。 偷偷說一下，其實這個小專案已經完成並使用超過一年了，中間也陸續對軟硬體設計進行改良，至於為什麼現在才有這篇文就…不要問 🤣 發想起初我是先從一些 PC 機箱內的長條狀 Performance Monitor 找到靈感，想找一塊長條的觸控螢幕來做，玩家常會用長條形的螢幕放置在機箱中顯示一些系統溫度/效能等訊息（還有一些油油或潮到出水的圖 💦）這種螢幕通常是直接當作一個小的外接螢幕接到顯示輸出，或 USB 傳送到螢幕上附帶的處理器去顯示資料。 但外接螢幕的話對我來說會有些問題，首先是這種小外接螢幕容易影響到原本遊標的操作，要是不小心移動到小螢幕裡還以為主螢幕內的遊標消失了。再來就是我目前的主力機 Macbook Pro 14 M1 Pro 只支援兩個外接顯示器，沒辦法再多接一個螢幕（為了 Apple Silicon 真是有得必有失）。 加上不想被現成的軟體功能綁著，便想到了用樹莓派跑獨立的系統去控制螢幕顯示跟內容部分，再透過 API 與電腦主機這邊溝通後透過網頁 UI 進行操作顯示的方式實作。這樣不但可以不影響原本電腦的使用，也能夠把一些定期任務跟家庭控制丟給樹莓派處理，使用上相對一般的做法可說是靈活了不少（缺點就是軟體部分很多要自己搞） 把問題點與需求列出來之後，就可以把需要的材料跟技術整理一下開始進行： 硬體：由於這次硬體核心部分就是樹莓派搭配觸控螢幕而已，相對簡單，只需要另外自己做個外殼跟支架。螢幕部分我找的是 Waveshare 的 11.9 吋長條形螢幕，剛好有設計可以直接把樹莓派裝在後面的機構，能夠省下不少工夫。樹莓派則是使用 Pi 4B 8G。另外偷抱怨一下這螢幕雖然是 IPS 但不是全貼合，感覺讓色彩跟抗反射效果略差…但也暫時找不到更好的替代方案了 🥹 後續還有加上了一些外掛功能，首先是在外殼加入了 Apple Watch 充電器，以及一個給桌機使用的 Windows Hello 紅外線相機。 軟體：由於我主要是搭配 Mac 使用，所以利用了之前就有在使用的 BetterTouchTool，作為 Mac 端大部分操作的控制/存取中心它正好有提供 http server 及一些 API 可以取得資料，執行自動動作等功能，真是幫我省下大量自行開發的時間。 後端：Node.js + Express 開發 前端：Vue.js + Vuetify 開發 PC 部分較單純，我選則 LibreHardwareMonitor 提供的 HTTP Server 來作硬體溫度資訊顯示。 硬體設計外殼首先我將樹莓派與螢幕組裝後，把軟體跟 API 服務等裝好確認動作沒問題後，便借廠商提供的螢幕 3D 檔案設計了一個 3D 列印的外殼： 並且在側面做了一個帶燈電源的開關，這部份跟我之前的這篇文實作方式差不多：替 Raspberry Pi 添加開關、外接電源燈、狀態燈 風扇部分則是整合了之前這篇文的電路及控制腳本：利用 Raspberry Pi 控制 PWM 風扇及轉速偵測 大家如果眼力好可能會發現這是 Rev 2，沒錯！廠商提供的模型尺寸有點不準，所以搞了兩次才成功 😭 Windows Hello 相機上方相機的部分則是去買了個筆電相機模組來製作，外殼透過雷射切割壓克力堆疊製作： 並且相機透過這個支架固定在螢幕上方： 整體腳架本體完成後支架還需要做兩個讓螢幕能夠立起來的腳架，這邊透過 5mm 壓克力雷切完成並固定在轉接的 3D 列印件上： 最後整體的背面設計如下： 因為是事後拍的照片，所以順序可能會有點亂還請見諒 XD Fan &amp; Power HAT後來有另外為這整個系統設計了一塊樹莓派擴充板，把開關/電源/風扇等電路整合在一起讓走線更為簡潔： 這邊值得一提的是由於我要使用 SSD 作為開機碟，並且螢幕本身及 Apple Watch 充電器也都是由 Pi 的 USB 口取電，但 Pi 的 USB 口總電流有著總共 1.2A 的限制，這導致使用 Watch 充電器時會造成系統不穩重開機 🫠 還好經過計算後其實電供的 3A 是足夠應付滿載電流的，所以設計了一個直插 USB 供電口在風扇旁邊，直接由電供供應（透過軟排線連接的位置），並插到 Pi 本身的 USB 孔上提高供電能力解決了這個問題。 開關/充電區帶燈開關的部分很單純，焊上線連接到擴充板上的對應接口就行： Apple Watch 及支援 Magsafe 的 AirPods Pro 2 都可以透過這個充電器充電！ 軟體設計軟體的部分直接看成果吧，主要就是網頁開發跟一些後端處理，其實不太確定可以記錄些什麼，全部寫出來又太雜 XD (Demo 圖片由於沒有連接 API 故資訊無法顯示，僅作參考) 簡單描述一下功能跟設計：首先開機後自動啟動 Chromium Kiosk 模式，UI 部分主要分成四個區塊： 上方 Navbar 顯示一些基本資訊(樹莓派溫度等)，並保留分頁切換提供未來使用，右方則是各種樹莓派系統層面的操作，像是重啟/關閉螢幕等。 中間三大區塊設計為可以互換的卡片式 UI，可以按照我想要的新增不同的區塊提供顯示/操作功能。 目前左區塊可以顯示時間日曆/天氣等相關資訊 中間為主要操作互動區塊，透過傳送指令到 BetterTouchTool 實現一些自動操作或是音樂播放等功能，並顯示目前播放影音的相關資訊 右側區塊則是顯示我自己一些 SNS 帳號相關的資訊，類似一些蠻流行的追蹤數計數器 右側區塊還有個頁籤可以切換，目前是弄了個定時器 串接 BetterTouchTool http server 的部分，由於 https 自簽憑證已經不被 Chrome 認可一樣會跳不安全訊息，所以後來是在 Pi 上執行的 Node.js Server建立 Proxy 來處理對 BTT server 的請求，然後 Node.js Server 再用 mkcert 做本地憑證，並且再設備上信任來避免不安全 https 的警告。搞得有點複雜…… 不過應該是目前比較方便的做法（但好像還是會顯示不安全，至少不用手動繞過）。 另外在螢幕開關的部分也遇到了一些問題，Waveshare 官方是使用 vcgencmd display_power 0 的方式關閉螢幕，一開始沒問題，但在升級系統後就無法使用了，後來在這邊找了方法實現螢幕開啟關閉的功能：Turn Official Raspberry Pi 7” Touchscreen Display Off / On #1740 啟動後執行(每次重啟系統都需要，才能夠透過遠端 ssh 控制) export DISPLAY=:0.0 &amp;&amp; xhost + 透過 xrandr --output HDMI-1 --off 關閉螢幕，或 xrandr --output HDMI-1 --auto 開啟螢幕 由於這塊螢幕預設是直向，我重啟螢幕後需要 xrandr --output HDMI-1 --auto --rotate right 來將螢幕旋轉到橫向 最後，搭配 PC 時也透過 LibreHardwareMonitor 提供的 HTTP Server 做了一個可以顯示系統基本資訊/溫度的區塊可以自由切換： 最後大功告成！（那個推特 X 的 API 改成要收錢了，就放著他壞掉懶得改了…） 其他我可能等想到有什麼比較有趣值得記錄的再補充了XD 或是會有特別想要瞭解的部分也可以留言討論看看。 以上，雖然東西有點雜也沒辦法全部記錄下來，但希望能拋磚引玉給有同樣想法的人一些啟發！Adios. 參考 Turn Official Raspberry Pi 7” Touchscreen Display Off / On #1740","link":"/2023/10/pi-dashboard/"},{"title":"透過 Cloudflare Zero Trust 與 WARP Client 從外網連回 Synology DSM","text":"由於現在的網路環境有兩層路由，且對外的路由我沒有控制權，以前要從外網連回家中的 Synology NAS 都要透過群暉的 QuickConnect 實現，後來經朋友推薦發現 Cloudflare Zero Trust 可以達成類似功能，並且可以掛上自己的域名！！(重要) 搜尋了一下發現設定方式相對不算太難，所以把設定過程紀錄下來供大家參考或是未來自己複習用！ 在開始之前，這邊要特別感謝 sakkyoi 的教學文章： 用 Cloudflare Tunnel 打通 Synology NAS，非常清晰易懂也推薦各位參考，本文過程參照此文設定並加入一些個人筆記的細節及 Cloudflare 功能上的小更新。 事前準備 運行 Synology DSM 的 NAS (撰文時所需套件要求為 DSM 5 以上) 自己的 Domain Name Cloudflare 帳號 能夠刷的信用卡 (提供 Cloudflare 付費資訊用不會產生費用) 將 DNS 託管在 Cloudflare 上 (用其他 DNS Provider 應該也可以只是要多做設定，因為我原本就是用他們家的服務) Zero Trust 團隊設定首先登入 Cloudflare Zero Trust 並建立團隊 (名稱任意) 選擇付費方案：一般個人使用 Free 應該就相當夠用，但記得即使免費方案還是需要輸入付費資訊才能夠使用喔！ 成功建立好團隊及付款設定後會進到如下的 Dashboard 頁面 建立 Application接下來要建立一層 Cloudflare Zero Trust 的保護應用在我們的 Tunnel 之前，這樣就可以讓使用者連入相關服務時讓平台協助確認使用者的身份 (須先登入稍候設定的帳號或經過第三方登入驗證) 確保應用的安全，強力建議設定！ 新增 Application在左側導覽的 Access 選擇 Application 進入以下頁面，點擊 + Add an application (首次設定的話頁面會稍有不同) 接著選擇 Self-hosted Application 設定自行設定想要的 Application name，另外可以選擇性調整 Session Duration 讓使用者可以保持驗證狀態多長時間。 在 Application domain 設定自己的域名，若要掛在 Subdomain 底下也請再此設定。 另外下方的 Identity providers 則是可以設定不同的登入方式 (預設為 OTP 登入)，這邊可以先不做變動，稍候到 第三方登入驗證方式 會做 Github 登入的設定範例： Policy 設定Policy Name 隨意填入，Action 選擇 Allow 代表我們正在設定允許連入的規則，Session duration 預設為跟應用相同即可。 由於要限制只有我們自己的 Email 能夠登入，所以在 Configure rules 的 Selector 選擇 Emails，並在 Value 填入自己的信箱。同理若要讓其他人連入也可進行相對的設定。 接下來 Next 下一頁後，可以直接使用預設設定拉到最下面並點擊 Add application 完成新增！ 建立與 NAS 連線的 Tunnel接著我們要建立一個與 NAS 連線的 Tunnel，在左側導覽找到 Network 並選擇 Tunnels 進入設定頁面。 點擊 + Create a tunnel 來建立通道 (首次設定的話頁面會稍有不同)： 這邊選擇預設的 Cloudflared 連接器即可點選下一步： 輸入喜歡的 Tunnel 名稱，點擊 Save tunnel： 接著會顯示如何安裝及運行連接器，如果是要在其他的一般機器設定可以透過提供的指令安裝。我們這邊要設定在 DSM 上設定所以可以把指令複製下來後只截取後面 ey... 那段的 Token 保存即可，稍候設定會用到。 下一步後，設定 Public Hostnames，Domain 與剛才的設定相同，Service部分則填入 NAS 在內網的 IP 位址 (DSM 預設 HTTP 為 5000，HTTPS 則為 5001)。 接著點開 Additional application settings，若使用 Synology 預設的憑證則要開啟 No TLS Verify。 接著選擇 Access 套用剛才設定的 Access Application 即可儲存 Tunnel： 在 DSM 安裝 Cloudflare Tunnel新增套件來源首先透過內網登入 DSM，進入套件中心 (Package Center)，點選右上角的設定 (Settings) 並選擇套件來源 (Package Sources) 後按下新增 (Add)，輸入以下資訊 (名稱選用自己看的懂得即可)： 1https://packages.synocommunity.com/ 安裝 Cloudflare Tunnel接著在套件中心 (Package Center) 中搜尋 Cloudflare Tunnel 安裝： 安裝完成後按照提示輸入剛才取得的 Token 並執行即可。 完成 Tunnel 並測試接著就可以到瀏覽器中輸入剛才設定過的 Domain 測試看能不能成功進入 Cloudflare Access 的頁面(未設定第三方登入的話不會顯示 Github 的登入欄位)： 登入後即可透過外網輸入自訂的網址進入 DSM 跟各種 HTTP 服務囉！ (如 /file、/audio 等 DSM 上安裝的服務) 第三方登入驗證方式（可選）由於 OTP 每次都要透過 Email 接收相當麻煩，我們可以加入不同的第三方登入服務讓登入更方便！ 回到 Zero Trust Dashboard 選擇左側導覽的 Settings 後點選 Authentication 新增不同的驗證方式： 進入後選擇下方 Login methods 點選 Add new 新增不同的第三方登入設定： 選擇需要的第三方服務後就會出現各服務所需要的驗證資訊，Cloudflare 都有附上圖文操作安照對應的方式填入資訊即可啟用囉！設定完成後回到 Zero Trust Access 驗證頁面時就會出現 Sign in with 的欄位了。 設定 Cloudflare WARP 搭配 WARP Client 訪問內網 Non-HTTP 服務以上的設定能夠讓 HTTP 服務透過外網連入了，但由於 Tunnel 是透過 WebSocket 實現並不支援 Non-HTTP 的服務 (如 SMB 等)，同時官方的行動 App 會因為 Access 驗證被阻擋無法使用，所以如果需要連入其他協議的服務或訪問其他內網裝置的話，我們可以透過 WARP 這個服務建立一個 Private Network 解決。 路由設定首先從左側導覽的 Networks 進入 Routes，點選 + Create route： 我的內網環境是 192.168.1.0 ~ 192.168.255 故 CIDR 欄位需填入 192.168.1.0/24，描述可以任意填寫，Tunnel 則選擇剛才建立的 Tunnel 即可。 完成後點擊 Create 即可完成路由設定。 CIDR 相關可參考：WIKI - CIDR WARP Client 設定左側導覽選擇 Settings，點擊 WARP Client 子項目： 在 Device enrollment 點選 Manage 設定裝置驗證： 點擊 + Add a rule 加入驗證規則，這邊跟之前設定的驗證規則類似不再贅述，完成後點選 Save 即可。 接著回到上一頁的 WARP Client 設定頁面 (Settings &gt; WARP Client) 找到 Device settings 區塊，在 Default Profile 右側點擊 Configure： 找到 Split Tunnels，點擊 Manage： 找到包含自己網域的設定項目並把他刪除 (此為 Exclude 規則故需刪除要連線的網段) 接著從左側導覽 Settings 選擇 Network： 到 Firewall 把 Proxy 啟用，協議部分可以把 UDP 一併啟用： WARP Client 安裝接下來到 WARP Client 下載頁面下載對應的客戶端並安裝。 安裝 App 後按照只是填入 Team Name 進行驗證跟 VPN 安裝成功後會出現類似畫面 (原先顯示 WARP，完成後顯示 Zero Trust)： 我一開始在 iOS 安裝 VPN 時卡住導致無法驗證，建議先將系統內的原本使用的 VPN 等先關閉在進行設定 完成後點擊開關即可透過 WARP 連入區網，可以在外網透過 smb 等協議連上 NAS 測試是否設定成功。現在就可以透過 WARP Client 夠連入內網中的其他機器囉，另外 Synology 官方的 App 也能夠直接透過區網 IP 連入使用了！ 參考資料 用 Cloudflare Tunnel 打通 Synology NAS Securely access home network with Cloudflare Tunnel and WARP WIKI - CIDR 1.1.1.1","link":"/2024/06/cloudflare-zero-trust-for-synology-nas/"},{"title":"透過樹莓派 5 及 ZeroTier 幫 NAS 做異地備份","text":"這玩意看起來很適合做異地備份欸！ &lt;- 這是我某天看到樹莓派 5 的 PCIe 轉雙 M.2 HAT 推出之後的反應 XD 前陣子 (其實也挺久了) 樹莓派推出了第五代，這次終於提供了 PCIe 接口 真是振奮人心 😭 恰巧前陣子亂逛時發現有幾家廠商推出了雙 M.2 版本的 HAT，這個組合讓我想到可以拿來做因為種種原因而沒搞定的異地備份。 我看上樹莓派 5 來做異地備份主要有以下幾個原因： 體積小功耗低，適合放在各種地方 (放老家/辦公室/朋友家等) 價格(?)優勢，不含硬碟的核心的零件約 $100 美金能夠買到，加上現在供貨總算比較穩定了 硬體自訂性高，雖然現在有 N100 等 CP 值極高的 x86 小主機，但用樹莓派就是比較浪漫比較酷 效能足夠 (4G 足矣)，因為單純作為異地備份 Pi 5 的效能甚至有些過盛？ PCIe 插槽讓 SSD 不用再透過 USB，速度及穩定性 ⬆️⬆️ 這代加入了如官方主動散熱模組、電源開關等功能，除了安裝設定都更輕鬆，也可以縮小體積 (我能夠放異地備份的空間都不算很大，能省則省) 這邊可以參考我之前用 Pi 4 製作的 Pi-Dash 應該就會發現這代把一些我之前需要自幹的功能都已經內建或提供官方的整合方案了，不用自己弄一堆有的沒的還會減少原本就已經不多的 IO 🙏 當然你可能會說能用另一台更正式的 NAS 作為異地備份是最好的選擇，確實 (？ 但我最重要且需要異地備份的量也不多(可能頂多 2T 短期內就算綽綽有餘)，加上上述幾項優點我認為這是目前最適合的選擇了！ 2024/6/29 補充功耗參考： 可以看到上方是待機狀態，功耗大約 3.5 ~ 3.8W。下方為備份時的功耗，約 4.5 ~ 5W。 那麼如果你覺得這個方案不錯並有興趣，我也把軟硬體的一些設定寫成筆記分享給大家，歡迎繼續往下閱讀： 資料備份 3-2-1資料備份有個重要的 3-2-1 規則，相信應該不少人已經耳熟能詳，可以直接跳至 硬體 / 軟體需求，如果沒聽過的話也沒關係這邊簡單介紹一下： 3-2-1 代表 至少 3 份相同的備份資料 至少 2 種不同的儲存媒介 至少 1 分資料要存放在物理上不同的位置 並且這邊有些常見的誤區要注意： 重要資料對每個人定義不同，並不是所有資料都需要完整的備份處理 RAID (硬碟陣列) 上儲存的資料並不代表兩份資料，只能算一份，RAID 或 Snapshot 等只是降低了該份資料因為硬體損壞導致資料遺失的機率 資料存放在物理上不同的位置就是俗稱的異地備份，定義上通常是越遠越好，但也不用太誇張，通常放幾公里外的親友家中就是可以接受的選擇 (雲端儲存也可以算是一種) 異地備份主要保護的是同一個地點的事故可能會導致所有的備份同時被一波帶走，例如火災、雷擊、地震等災害，如果遇到這種事故在家放了幾百份資料可能也沒什麼用了 😭 那麼了解了備份的規則及重要性後我們廢話不多說進入本文的重點吧！ 硬體 &amp; 軟體需求硬體這邊列一下我所使用的硬體清單，當然可以針對個人需求做調整： Raspberry Pi 5 (4G RAM) (Pi 4 應該也沒什麼問題，但沒有 PCIe 只能透過 USB 連接硬碟) Geekworm (SupTronics) X1004 (撰文時雙 M.2 的還有 Pimoroni, WaveShare 等廠商可選，或是使用單 M.2 HAT 當然也是沒問題的) 一或兩條 HAT 支援的 M.2 NVMe SSD (注意必須要是 NVMe 協議才可以使用在 M.2 HAT 上) 一台 NAS，備份資料的來源 NAS 部分我所使用的是 Synology DS220+，其他 NAS 當然也可以，不過這篇文會以我自己使用的環境為主。外殼、散熱模組等非必要零件就不另外提到了，可以按照自己的需求喜好安裝 🙌 軟體 x86 DSM 7.2 (我自己 NAS 的環境) Raspberry Pi OS (Bookworm) rsync 作為備份同步用 ZeroTier 作虛擬內網的服務讓 NAS 能夠遠端訪問到 Pi ufw 安裝在 Pi 上的防火牆 由於在 DSM 上跑 ZeroTier 會使用到 Docker，之前聽說 ARM 的 DSM 容易遇到架構支援問題，這邊可能需要注意一下！ 完成之後異地備份的服務會如下圖執行： 運作方式相當簡單，DSM 這邊安裝 HyperBackup 後會定期透過 ZeroTier 連到樹莓派做備份而已。 在了解了基本服務架構之後，由於硬體安裝方式不難參照各家說明書即可，接下來為安裝軟體及設定的部分。 在 Pi 上安裝 rsync 伺服器rsync 伺服器的作用簡單來說其實有點像 SMB，但是專門設計為備份用途，完成後會讓 NAS 透過 Hyper Backup 連入樹莓派的 rsync 進行自動備份。當然 rsync 可以安裝在任何 Linux 主機上，只是本文會以樹莓派的 Raspberry Pi OS 來做設定 ⚡️ 首先會需要讓樹莓派能夠執行 Raspberry Pi OS，系統可以安裝在 NVMe SSD、USB 硬碟或是 SD 卡上 (有做好系統備份的話應該還可以，但還是要準備有 SSD 或 HDD 來儲存備份資料用)，這部份因為不是本次設定重點，還請參考樹莓派 OS 官方說明 將樹莓派安裝好系統並開機後，可以透過 GUI 或 SSH 進入 Terminal 開始安裝 rsync。 備份資料用硬碟分區及格式化首先執行 sudo fdisk -l (使用 sudo 會跳出要求管理員密碼，輸入後按 Enter 即可) 接著會出現一串硬碟資料，找到要當作備份用的目標硬碟，例如我的其中一段顯示 (輸出每個人會不同)： 123456789101112...Disk /dev/nvme0n1: 1.86 TiB, 2048408248320 bytes, 4000797360 sectorsDisk model: TEAM TM8FPD002TUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: gptDisk identifier: XXXDevice Start End Sectors Size Type/dev/nvme0n1p1 2048 4000796671 4000794624 1.9T [分區類型]... 這邊注意如果是 USB 外接硬碟可能會顯示 /dev/sda 、 /dev/sdb 等，若跟我一樣使用 Pi 5 的 PCIe 連接 SSD 則會顯示類似如上 /dev/nvme0n1 接著需要把硬碟格式化為 ext4 格式 此動作會清除硬碟上所有資料 1sudo fdisk /dev/nvme0n 進入後輸入指令 d 刪除分區 1Command (m for help): d 輸入指令 n 新增分區 1Command (m for help): n 最後輸入 w 完成操作 1Command (m for help): w 接下來格式化硬碟為 ext4 1sudo mkfs -t ext4 /dev/nvme0n1p1 等待跑完無錯誤後就代表成功把硬碟格式化為 ext4 了。 備份資料用硬碟分區掛載建立一個掛載分區用的資料夾 (名字可以自行挑選，後續的設定記得使用相同的路徑即可) 1sudo mkdir /mnt/backup 接下來要取得對應分區的 UUID： 1sudo blkid 在輸出的資料中找到對應的分區，例如： 123/dev/nvme0n1p1: UUID=&quot;539f659e-cd1d-4f81-9ea5-6ec0f1344c66&quot; BLOCK_SIZE=&quot;4096&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;1685ae4a-c0c5-4259-8f96-38a660deda8a&quot;/dev/nvme1n1p2: LABEL=&quot;rootfs&quot; UUID=&quot;d1f0e69f-2ab2-4f75-bbe1-84db9d036629&quot; BLOCK_SIZE=&quot;4096&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;423c4ab8-02&quot;/dev/nvme1n1p1: LABEL_FATBOOT=&quot;bootfs&quot; LABEL=&quot;bootfs&quot; UUID=&quot;50C8-AEAE&quot; BLOCK_SIZE=&quot;512&quot; TYPE=&quot;vfat&quot; PARTUUID=&quot;423c4ab8-01&quot; 由於我們的目標硬碟是 /dev/nvme0n1p1 所以複製對應的 UUID 539f659e-cd1d-4f81-9ea5-6ec0f1344c66 (此 UUID 為範例用) 接著我們要設定系統啟動時自動掛載這個分區 1sudo nano /etc/fstab 進去後將游標移到最下方 (不需理會井字號開頭的部分)，接著參考下方第四行 UUID=... 填入設定，空格部分用 Tab 或空白鍵分隔都可以 123456proc /proc proc defaults 0 0PARTUUID=423c4ab8-01 /boot/firmware vfat defaults 0 2PARTUUID=423c4ab8-02 / ext4 defaults,noatime 0 1UUID=539f659e-cd1d-4f81-9ea5-6ec0f1344c66 /mnt/backup ext4 defaults,auto,users,rw,nofail 0 0# a swapfile is not a swap partition, no line here# use dphys-swapfile swap[on|off] for that 完成後 Control + S &amp; Control + X 儲存並離開編輯器。 接下來就可以掛載所有硬碟： 1sudo mount -a 檢查掛載是否成功 1lsblk 如果能看到剛才設定的 /mnt/backup 就代表成功掛載了 123456NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTSnvme0n1 259:0 0 1.9T 0 disk└─nvme0n1p1 259:1 0 1.9T 0 part /mnt/backup &lt;- 這裡nvme1n1 259:2 0 476.9G 0 disk├─nvme1n1p1 259:3 0 512M 0 part /boot/firmware└─nvme1n1p2 259:4 0 476.4G 0 part / 接下來給予掛載路徑權限 (這邊給 777 是因為備份的檔案會加密所以沒有太大問題) 1sudo chmod -R 777 /mnt/backup 這邊測試建立一個資料夾 1touch /mnt/backup/test 如果沒有報錯代表設定無誤，可以刪除該測試檔案 1rm /mnt/backup/test 安裝 rsync 伺服器更新套件包 1sudo apt update 安裝 rsync 1sudo apt install rsync 建立 rsync 設定檔 1sudo nano /etc/rsyncd.conf 輸入以下設定 1234567[backup] path = /mnt/backup comment = For the rsync backup for Synology NAS read only = false timeout = 300 auth users = synology secrets file = /etc/rsyncd.secrets 完成後 Control + S &amp; Control + X 儲存並離開編輯器。 建立 rsync 密碼檔 1sudo nano /etc/rsyncd.secrets 輸入以下設定 1synology:[輸入 rsync 密碼] 完成後 Control + S &amp; Control + X 儲存並離開編輯器。 更新 secrets 檔案權限只有 root 能讀寫 1sudo chmod 600 /etc/rsyncd.secrets 進入 rsync 設定開啟服務 1sudo nano /etc/default/rsync 找到 RSYNC_ENABLE=false 並改為 1RSYNC_ENABLE=true 完成後 Control + S &amp; Control + X 儲存並離開編輯器。 最後重啟樹莓派檢查 rsync 服務是否自動啟動 1sudo reboot 重啟後輸入以下指令檢查是否成功啟動 rsync 1ps -ax | grep rsync 如果成功應該會有類似以下的輸出 12 860 ? Ss 0:01 /usr/bin/rsync --daemon --no-detach12942 pts/0 S+ 0:00 grep --color=auto rsync 恭喜完成！接下來可以準備前往 DSM 做設定並連到剛設定好的 rsync server 了！ 🙌 在 DSM 7 中安裝 Hyper Backup 並在區網中執行首次備份登入 DSM 後進入 Package Center 套件中心進行 Hyper Backup 的安裝 安裝完成後開啟 Hyper Backup 並使用第一個 Folders and Packages 按下一步 接下來拉到最下方的 File Server 區域，選擇 rsync 後下一步 這邊選擇 Multiple versions 即可，運作原理類似 Snapshot 會儲存不同的檔案更變，Single version 則是單純把檔案拷貝過去 接著在 Server name or IP address 輸入樹莓派所在的區網 IP Username 輸入剛才設定的 rsync 使用者名稱 synology Password 輸入剛才設定的 rsync 使用者密碼 (secrets) Transfer encryption 可以留著 OFF 即可，因為我們使用的 ZeroTier 連線方式已經有加密的功能，這樣可以讓備份速度更快一點。 以上設定正確的話應該就能在 Shared Folder 下拉選單選擇剛才在 rsync 伺服器建立的資料夾了！ 下一步之後就可以選擇我們在 NAS 中所需要備份的資料夾，在下一步會選擇想備份的應用程式，這邊按自己需求選擇即可。 最後進行備份任務的設定，這邊按自己需求調整，並記得開啟 Enable client-side encryption 並牢記密碼 下一步設定 Rotation 自動清除舊資料，選擇 Smart Recycle 即可 完成後就可以來執行第一次備份啦！建議第一次檔案比較大先在區網備份速度較快，之後只會做差異備份再移至異地即可！ 當檔案備份的時候，我們可以繼續往下設定 ZeroTier 的部分為外網連線做準備！ 設定 ZeroTier 虛擬區網服務簡單來說 ZeroTier 是一個虛擬區網的服務，可以讓處在不同網路的裝置加入這個虛擬區網透過 P2P 達成互相連線，就像在一個區網中一樣。在設定上相當簡易，而且作為個人備份是完全免費的 (免費版提供 25 個裝置加入，並且無限制流量)！我們可以透過這個功能讓 NAS 透過外網連到 Pi 上的 rsync 伺服器達成備份的任務。 首先需要先到 ZeroTier 註冊一個帳號並登入 成功進入控制面板後會看到如下畫面，一開始應該是沒有任何網路設定的，此時按 Create A Network 建立虛擬區網，並點新增的項目進入設定： 設定值基本上沒有特別需求用預設即可，點進此區網後我們先複製如圖中的 Network ID 的值方便設定 接著就可以準備把各個需要連線的設備加入這個區網中囉！ 在 DSM 7 上連入 ZeroTier首先先將 NAS 連入 ZeroTier 中，這部份也可以參考官方文件操作。 安裝 Docker (Container Manager)DSM 進入 Package Center (套件中心) 並搜尋 container 選擇 Container Manager 並安裝： 舊版 DSM 套件名稱為 Docker，新版已改名為 Container Manager，這兩個是相同的東西 👌 開啟 SSH接著我們先將 DSM 的 SSH 功能從控制台中打開，並記得點擊套用。 建立 Persistent TUNSSH 進入 DSM (macOS 及 Linux 透過 Terminal 即可，Windows 可使用 Putty 等軟體)，user 使用者及 local-ip 替換為自己設定的 DSM 使用者及區網 IP 1ssh user@local-ip 取得 root 權限 1sudo -i 加入啟動時的自動設定腳本 1echo -e '#!/bin/sh -e \\ninsmod /lib/modules/tun.ko' &gt; /usr/local/etc/rc.d/tun.sh 設定執行腳本所需的權限 1chmod a+x /usr/local/etc/rc.d/tun.sh 執行腳本 1/usr/local/etc/rc.d/tun.sh 測試通道是否建立 1ls /dev/net/tun 若輸出 /dev/net/tun 並無報錯代表成功。 設定容器建立資料夾儲存 ZeroTier 相關的檔案及設定 1mkdir /var/lib/zerotier-one 建立 Docker 容器 12345678docker run -d \\ --name zt \\ --restart=always \\ --device=/dev/net/tun \\ --net=host \\ --cap-add=NET_ADMIN \\ --cap-add=SYS_ADMIN \\ -v /var/lib/zerotier-one:/var/lib/zerotier-one zerotier/zerotier-synology:latest 跑完之後可以透過以下指令確認容器是否正常執行 1docker ps 若顯示類似如下圖即可 12CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES451a2e9d6d02 zerotier/zerotier-synology:latest &quot;/entrypoint.sh&quot; 2 weeks ago Up 2 weeks zt 接著我們要把 NAS 加入到 ZeroTier 的區網 ([Network_ID] 記得要換成自己的) 1docker exec -it zt zerotier-cli join [Network_ID] 成功的話會回應 200 join OK 此時我們可以回到 ZeroTier 的控制台拉到下方 Members 區塊查看 此時手動把前方的 Auth? 選取格打勾即可認證，過幾秒後 Managed IPs 下方應該就會出現該裝置在這個虛擬區網的 IP 了 (此範例為 192.168.193.78) 這邊建議可以在 Name 與 Description 中填入自己看的懂得名稱和描述方便辨認裝置喔！ 接著在 SSH 中可透過 sudo zerotier-cli listnetworks 來查看加入的區網狀態 最後我們還需要回到 DSM 中允許這個網域經過防火牆 從 控制台 &gt; 安全性 &gt; 防火牆 頁籤 &gt; 編輯規則 進入設定，並點擊 新增 增加規則 設定如下，連接埠看需求開啟， 來源 IP 選擇指定 IP，點擊選擇後輸入剛才 ZeroTier 中的 IP 範圍 (例如範例中的 192.168.193.0 ~ 192.168.193.255) 接著套用設定並確認 Enable 打勾即可，到這邊防火牆設定就完成了！ 在 Pi 上連入 ZeroTier最後我們需要讓 Pi 也連上 ZeroTier，連入 Pi SSH 透過 Github 安裝 ZeroTier 新增 GPG Key 1curl https://raw.githubusercontent.com/zerotier/ZeroTierOne/master/doc/contact%40zerotier.com.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/zerotierone-archive-keyring.gpg &gt;/dev/null 接著加入 Source List 到系統中 12RELEASE=$(lsb_release -cs)echo \"deb [signed-by=/usr/share/keyrings/zerotierone-archive-keyring.gpg] http://download.zerotier.com/debian/$RELEASE $RELEASE main\" | sudo tee /etc/apt/sources.list.d/zerotier.list 更新套件倉庫 1sudo apt update 即可安裝 ZeroTier 1sudo apt install -y zerotier-one 安裝完成後就可以讓樹莓派加入 ZeroTier 區網了 ([Network_ID] 記得要換成自己的) 1sudo zerotier-cli join [Network_ID] 成功的話會回應 200 join OK 此時操作與 DSM 加入後一致再次回到 ZeroTier 的控制台拉到下方 Members 區塊查看，並勾選 Auth? 方塊。 接著在 SSH 中可透過 sudo zerotier-cli listnetworks 來查看加入的區網狀態 上述步驟都成功完成後 ZeroTier 的控制面板 Member 區域應該會有類似下表的裝置設定 測試遠端備份恭喜！設定到這邊大致就完成了，最後只要把樹莓派在 ZeroTier 中的 IP 複製下來，並回到 DSM 的 HyperBackup 中更改任務中 Target 的 Server IP 即可。 完成後應該會顯示 Target On-line 綠色字樣，接著只要樹莓派在有網路的地方都能夠透過 ZeroTier 幫 NAS 做定期備份囉！ 啟用 UFW 防火牆 (可選)通常情況下 ZeroTier 區網應該是安全的，但如果有各種不同的設備使用者在同個虛擬區網的話可以設定一下樹莓派的防火牆比較令人安心，這邊使用的是 UFW 更新套件倉庫及系統 12sudo apt updatesudo apt full-upgrade 安裝 UFW 1sudo apt install ufw 接下來這部非常重要，我們要先設定讓 SSH 能夠通過防火牆，如果沒有設定的話就再也無法在透過 Headless (無頭) 模式連上樹莓派，需要接螢幕鍵盤等操作來恢復了 1sudo ufw allow 22 接著我們到 ZeroTier 主控台中找到 NAS 的 IP 並允許該 IP 的連線 ([YOUR_NAS_IP] 記得替換為實際的 IP) 1sudo ufw allow [YOUR_NAS_IP] 啟動防火牆 1sudo ufw enable 此時系統會提示如下啟用防火牆可能導致目前的 SSH Session 斷線，輸入 y 按下 Enter 即可啟用防火牆 Command may disrupt existing ssh connections. Proceed with operation (y|n)? 最後可以透過 sudo ufw status 確認防火牆的狀態，若要停用防火牆則使用 sudo ufw disable。 以上！ 接下來應該不用擔心資料安全的問題了 參考SpaceRex - Backup Synology NAS To a $35 RaspberryPi with HyperBackup and Rsync Daemon! | 4K TUTORIAL Running ZeroTier on the Raspberry Pi Using the UFW Firewall on the Raspberry Pi","link":"/2024/06/pi-remote-backup-for-synology-nas-using-zerotier/"},{"title":"30 款 macOS 生產力軟體推薦","text":"雖然 macOS 已經預設了不少實用的工具軟體，但還是有不少可以改善的空間。幸好相較 iOS 來說它有著更高的自由度，所以這篇就來推薦一下我自己在 macOS 中最常使用的第三方開發的生產力軟體吧！ 註：為方便閱讀尋找，每個軟體都只做簡短說明，並且價格未標明的話以美金為主。這份清單基本上是同類型中挑出我自己覺得最好用(或最符合需求的)，不一定適合每個人，建議付費軟體都可以先試用再做決定，本篇無任何廣告。 AdGuard 價格：浮動，常有特價 知名的全平台擋廣告軟體，功能多樣但使用簡單，還能夠掛 UserScript 等腳本 Airbuddy 價格：$10 讓 Airpods 在 macOS 中能有類似 iOS 上的連結動畫，並有支援藍芽裝置電量顯示等小功能 AlDente 價格：基本款免費 / Pro 版有分訂閱與買斷 電量限制軟體，雖然目前 macOS 已有充電最佳化功能，但此軟體可以更細節的控制電量，Pro 版有多一些自動化的電量控制 AppCleaner 價格：免費 移除軟體及關聯檔案用，若要乾淨移除相當方便 Bartender 4 價格：$16.80 如果跟我一樣狀態列東西很多，那這就是必備狀態列管理工具，可以有效隱藏不常使用的圖示 BetterTouchTool 價格：訂閱 \\$9 兩年(可停止升級續用) / 買斷 \\$21 手勢/快捷鍵自定軟體，支援執行 AppleScript/JavaScript，附帶各種方便小工具如視窗吸附等等。如果有 TouchBar 的話幾乎必裝，有這個軟體後自定 TouchBar 會變的非常方便 CheatSheet 價格：免費 按住 Command 可快速查看目前使用軟體的快捷鍵列表 coconutBattery 價格：免費 / Plus 版約 $10 可查看裝置電池的詳細資訊（包含 iOS 裝置） Dropzone 價格：訂閱 \\$1.99 / 買斷 \\$35 方便拖曳檔案的軟體，在全螢幕切換中很實用，也有附帶一些自動化的功能 Eagle 價格：$29.95 macOS/Windows 圖片/素材分類管理軟體 HEIC Converter 價格：免費 HEIC 格式圖片轉換軟體 iStat Menus 價格：$12.59 可查看電腦各種感測器的數值，硬體使用率等資訊 KeepingYouAwake 價格：免費 顧名思義，讓電腦不進入休眠模式 Keka 價格：免費 解壓縮軟體，相較原裝的 Archiver 支援更多格式 LinearMouse 價格：免費 關閉滑鼠加速功能(並且保持觸摸板不受影響) LyricsX 價格：免費 在狀態列/浮動視窗顯示動態歌詞 MenubarX 價格：免費(目前 Pro 版內購同樣免費) 藏在狀態列的小型懸浮瀏覽器，查資料/放小影片方便 Microsoft Remote Desktop 價格：免費 微軟的遠端桌面軟體 Microsoft To Do 價格：免費 微軟的全平台代辦事項軟體 Monitor Control 價格：免費 螢幕控制軟體，包含外接顯示器也能夠直接透過 DDC 調整亮度 Ohtipi 價格：自由贊助(最低 $5) 在瀏覽器中自動填入 iMessage 收到的 OTP 驗證碼 PasteNow 價格：$7.99 剪貼簿管理工具，自從 Paste 改為訂閱制後最推薦的一款 Raycast 價格：免費 Spotlight 替代工具，功能非常多樣，且比 Alfred 外觀更接近 macOS 設計語言 Rime/Squirrel 價格：免費 macOS 上自定性最高，最好用的中文輸入法(全平台)，但上手難度相對高需要自行設定 Rocket Typist 價格：$10 快速輸入字串/樣板等(Text expender)，至於我會用他主要是因為另外兩款不支援中文輸入法 SideNotes 價格：$19.99 可以隱藏在側欄的筆記軟體，支援 Markdown Toothfairy 價格：$2.99 快速連結藍芽裝置，可在狀態列顯示圖標/電量 TopNotch 價格：免費 隱藏 21 年後 Macbook 的瀏海(強制狀態列黑底) Typora 價格：$14.99 簡約美觀的全平台 Markdown 編輯器 UninstallPKG 價格：免費 移除 PKG 安裝之軟體","link":"/2022/04/macos-productivity-tools-recommendation/"}],"tags":[{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"express","slug":"express","link":"/tags/express/"},{"name":"Quick Fix","slug":"Quick-Fix","link":"/tags/Quick-Fix/"},{"name":"iPad","slug":"iPad","link":"/tags/iPad/"},{"name":"Affinity Photo","slug":"Affinity-Photo","link":"/tags/Affinity-Photo/"},{"name":"Fresco","slug":"Fresco","link":"/tags/Fresco/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"MacOS","slug":"MacOS","link":"/tags/MacOS/"},{"name":"WiFi","slug":"WiFi","link":"/tags/WiFi/"},{"name":"node-sass","slug":"node-sass","link":"/tags/node-sass/"},{"name":"pm2","slug":"pm2","link":"/tags/pm2/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"dotenv","slug":"dotenv","link":"/tags/dotenv/"},{"name":"vuetify","slug":"vuetify","link":"/tags/vuetify/"},{"name":"軟體應用","slug":"軟體應用","link":"/tags/軟體應用/"},{"name":"SketchUp","slug":"SketchUp","link":"/tags/SketchUp/"},{"name":"Raspberry Pi","slug":"Raspberry-Pi","link":"/tags/Raspberry-Pi/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"Keyboard","slug":"Keyboard","link":"/tags/Keyboard/"},{"name":"DIY","slug":"DIY","link":"/tags/DIY/"},{"name":"SIM-Racing","slug":"SIM-Racing","link":"/tags/SIM-Racing/"},{"name":"G27","slug":"G27","link":"/tags/G27/"},{"name":"維修筆記","slug":"維修筆記","link":"/tags/維修筆記/"},{"name":"開箱","slug":"開箱","link":"/tags/開箱/"},{"name":"illustration","slug":"illustration","link":"/tags/illustration/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"Laravel","slug":"Laravel","link":"/tags/Laravel/"},{"name":"XML","slug":"XML","link":"/tags/XML/"},{"name":"SSL","slug":"SSL","link":"/tags/SSL/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Win10","slug":"Win10","link":"/tags/Win10/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"Macbook Pro","slug":"Macbook-Pro","link":"/tags/Macbook-Pro/"},{"name":"螢幕","slug":"螢幕","link":"/tags/螢幕/"},{"name":"無線耳機","slug":"無線耳機","link":"/tags/無線耳機/"},{"name":"Touchbar","slug":"Touchbar","link":"/tags/Touchbar/"},{"name":"RaspberryPi/樹莓派","slug":"RaspberryPi-樹莓派","link":"/tags/RaspberryPi-樹莓派/"},{"name":"NAS","slug":"NAS","link":"/tags/NAS/"},{"name":"Google","slug":"Google","link":"/tags/Google/"},{"name":"SMB","slug":"SMB","link":"/tags/SMB/"},{"name":"SFTP","slug":"SFTP","link":"/tags/SFTP/"},{"name":"USB-C","slug":"USB-C","link":"/tags/USB-C/"},{"name":"TimeCapsule","slug":"TimeCapsule","link":"/tags/TimeCapsule/"},{"name":"TimeMachine","slug":"TimeMachine","link":"/tags/TimeMachine/"},{"name":"MonitoringTool/監控軟體","slug":"MonitoringTool-監控軟體","link":"/tags/MonitoringTool-監控軟體/"},{"name":"密碼","slug":"密碼","link":"/tags/密碼/"},{"name":"Ruby","slug":"Ruby","link":"/tags/Ruby/"},{"name":"Apple Silicon","slug":"Apple-Silicon","link":"/tags/Apple-Silicon/"},{"name":"macOS","slug":"macOS","link":"/tags/macOS/"},{"name":"DisplayCAL","slug":"DisplayCAL","link":"/tags/DisplayCAL/"},{"name":"valine","slug":"valine","link":"/tags/valine/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"Synology","slug":"Synology","link":"/tags/Synology/"},{"name":"DSM","slug":"DSM","link":"/tags/DSM/"},{"name":"Cloudflare","slug":"Cloudflare","link":"/tags/Cloudflare/"}],"categories":[]}