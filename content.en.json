{"pages":[{"title":"About","text":"Hi, DriftKingTW here. Welcome to my blog. I’m a junior web developer, and also a digital artist from Taiwan. Love to make stuff, especially electronic-related project. Not a native English speaker tho, but I’m trying to translate my post into English. If something looks odd, I apologize for that ｡ﾟ(ﾟ´ω`ﾟ)ﾟ｡ If you’re interested in my artwork, make sure to check out my Pixiv or DeviantArt. And the code I use in my project can be find on Github. BTW if you love EDM, go and check my friend’s music channel: Silaver. No doubt you’ll like it :D printf(“%s”, “Stay Curious, Stay Creative”)","link":"/en/about/index.html"}],"posts":[{"title":"Quick Fix - Can't import PSD on Affinity Photo iPad","text":"Q: I can’t import PSD file on Affinity Photo on my iPad? A: If you have Adobe Fresco installed, uninstall Fr and try it again. This probably is a bug in Affinity Photo, need to wait for developer to fix it. Quick Fix is a series of my solution for some random problem ReferenceCant import .psd file to Affinity designer/photo","link":"/en/QuickFix/cant-import-psd-on-affinity-photo-ipad/"},{"title":"Quick Fix - Navbar Covers Heading While Using Anchor Link","text":"Q: This is a common CSS issue. When using &lt;a href=&quot;#heading&quot;&gt;&lt;/a&gt; to navigate around the article, the Fixed or Sticky will coverd the heading like this CodePen A: There’s hundred of ways to fix it, but this is probably the easiest way to do it (CSS only): 123:root &#123; scroll-padding-top: 3rem;&#125; You need to replace 3rem with the height of your nav, play with it in CodePen! Quick Fix is a series of my solution for some random problem Reference3 More Life-Changing CSS Tips 5 More Must Know CSS Tricks That Almost Nobody Knows MDN: scroll-padding-top","link":"/en/QuickFix/navbar-covers-heading-with-anchor-link/"},{"title":"Quick-Fix node-sass no such file or directory error","text":"Q: Recently I run into this error whe create a vue project via Vue-Cli : 12345 ERROR Failed to compile with 1 error error in ./src/App.vue?vue&amp;type=style&amp;index=0&amp;lang=scss&amp;Syntax Error: Error: ENOENT: no such file or directory, scandir '/***/node_modules/node-sass/vendor' A: Simply rebuild wil do the tirck：npm rebuild node-sass ReferenceError: ENOENT: no such file or directory, scandir ‘**/node_modules/node-sass/vendor’ #1579","link":"/en/QuickFix/node-sass-error/"},{"title":"Quick Fix - macOS WiFi Captive Portal Broken","text":"Q: Why I got error on captive portal wifi? A: Create a file my.shim.catalina.captivenetworkassistant.plist in ~/Library/LaunchAgents 12345678910111213141516171819202122&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;&lt;plist version=\"1.0\"&gt; &lt;dict&gt; &lt;key&gt;Label&lt;/key&gt; &lt;string&gt;my.shim.catalina.captivenetworkassistant&lt;/string&gt; &lt;key&gt;LowPriorityIO&lt;/key&gt; &lt;true/&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt; &lt;string&gt;open&lt;/string&gt; &lt;string&gt;/System/Library/CoreServices/Captive Network Assistant.app&lt;/string&gt; &lt;/array&gt; &lt;key&gt;WatchPaths&lt;/key&gt; &lt;array&gt; &lt;string&gt;/Library/Preferences/SystemConfiguration&lt;/string&gt; &lt;/array&gt; &lt;key&gt;RunAtLoad&lt;/key&gt; &lt;true/&gt; &lt;/dict&gt;&lt;/plist&gt; Then run the command down below: 1cd ~/Library/LaunchAgents 1launchctl load my.shim.catalina.captivenetworkassistant.plist 1launchctl start my.shim.catalina.captivenetworkassistant Restart the macOS, the issue should be solved 👌 If you want to remove this daemon: 1cd ~/Library/LaunchAgents 1launchctl stop my.shim.catalina.captivenetworkassistant 1launchctl unload my.shim.catalina.captivenetworkassistant.plist 1rm my.shim.catalina.captivenetworkassistant.plist The post I reference says that this issue fixed on 10.15.1 update, but I still got this error on 11.2.3 😭 Quick Fix is a series of my solution for some random problem ReferencemacOS Catalina WiFi issue — captive portal broken","link":"/en/QuickFix/macos-wifi-captive-portal-broken/"},{"title":"SketchUp 2017 修復無法啟動問題","text":"今天打開SketchUp突然跳出這玩意… 試過重新安裝和網路上的各種方法也沒有效…就是開不了 弄了老半天簡直要發瘋直到我傳送了錯誤報告, 跳出這個頁面有推薦的解決方法OS:你怎麼不再錯誤頁面跟我說(#`Д´)ﾉ 按照上面的教學, 到設定程式那邊把Microsoft Visual C++ 2015相關的套件全數移除 然後把SketchUp卸載之後重新安裝一遍, 就成功解決問題囉(^u^)","link":"/en/2017/09/sketchup-2017-修復無法啟動問題/"},{"title":"Ducky ONE RGB 青軸 極簡易開箱","text":"之前跟朋友買的二手MK80開始連點, 到後面嚴重到不能用了, 於是決定來換個鍵盤hmm 我個人是要求蠻多的龜毛, 平常雖然盲打但是想要發光..然後不喜歡單色所以想用RGB, 又不希望白底座反光太亮之類…..(ry在各種需求考量下, 發現目前市面上比較接近我想要的就是Ducky ONE RGB版了(汗雖然跟理想中還差一截就是(欸 可能之後有錢得自己搞一把DIY相信介紹ONE RGB應該大家都稍微看過了, 就不多說, 跟Shine6比起來我喜歡她窄框的部分, 其他用料貌似差不多, 而且ONE還便宜一些就選她惹XDD(窮窮窮 外盒部分(抱歉只有手機能拍QQ 包裝內容(好像少拍了說明書來者) 背面 Cherry RGB青軸本體 對了 現在的ONE跟SHINE系列都改用PBT鍵帽了剛好我不喜歡太亮的, 然後PBT手感好又不容易打油, 太爽拉感謝Ducky努力的研發而且價格還不貴◝( ﾟ∀ ﾟ )◟佛心公司 佛心公司(? 接上電腦囉~(USB3.0) 拍起來比實際亮不少….手機相機太廢QQ, 各位大概當個參考就好XD詳細可能要參考一下其他人拍的或找原廠照片…..燈光設定的部分按照說明書教學, 蠻好上手的XDCal按鍵呼叫計算機超方便R, 大愛這功能 &lt;3 然後 青軸好爽阿阿阿阿阿阿阿阿阿XDDDDDDDDDD大家都說現在Cherry青好像品質不太穩, 不過我這把除了F7聲音特別小其他倒是沒問題, 感覺還OK, 不過要求嚴格的朋友們可能就要多加考慮惹(*ﾟーﾟ)~ 青軸好爽阿阿阿阿阿阿阿阿阿(被打感覺以後跟別人住會被人家揍 開箱文就到這, 诶 你說怎麼那麼少?因為極簡開箱阿XD 好啦 順便附一下新鍵盤試打成績 應該還OK, 現在還有點不習慣青軸以後看能不能到130WPM(欸感謝觀看 :3","link":"/en/2017/12/ducky-one-rgb-青軸-極簡易開箱/"},{"title":"Ducky ONE RGB 解決空白鍵漏光問題","text":"ONE RGB用到目前為止都很滿意, 不過有個小缺點就是看鍵盤角度太低的時候空白鍵下兩側的補光LED會閃到眼睛RRR雖然我自己的角度不常看到, 但有時候被閃一下還是不太爽(#`Д´)ﾉ這時候既然原廠沒有設計擋光板, 只好自己動手了 恩 拍起來還好, 可是實際被閃到就是這個樣子 要解決也不難就是, 當然首先把空白鍵拆下 然後裁個大概3x1.5cm的描圖紙(一個LED要兩層效果比較好) 接著找個無痕雙面膠之類的把它固定在定位板上, 光線就不會辣麼刺眼了(ﾟ∀ﾟ)這樣也不至於影響到燈光讓那邊變得比較暗d(`･∀･)b 大功告成!! 雖然不是什麼太麻煩的MOD不過希望Ducky以後設計這部分的燈光要注意一下啊XD","link":"/en/2018/01/ducky-one-rgb-解決空白鍵漏光問題/"},{"title":"Logitech G27方向盤 回正/校正問題維修","text":"大概九月時幸運用不錯的價格收了一套二手的G27, 對於車控來說簡直太爽拉, 每天必跑一趟Nurburgring(?雖然G27現在上面有Thrustmaster跟Fanatec等更高檔次的方向盤, 不過對我目前來說有G27就很棒了XDD 窮學生麻 不過就在約一個月前, 出了點小問題, 每次插上USB G27就會自檢之後回正, 但有時候卻回不到中間(角度也不大,約10度左右)雖然10度但是開起來超有感阿, 整個人都歪一邊拉!! 而且玩Project Cars 2的時候還會越歪越多(汗, 跑趟拉力賽下來整個方向盤歪了快90度QQ後來越來越容易出現這種問題, 於是上網查了下, 中文的資料不多(可能就是邊緣玩的設備…), 不過國外很多同好也都遇到了類似的問題。 只要是校正有問題/歪斜/檢測時打到底無法回正(轉速指示燈有亮)的話八九不離十都是內部光學編碼器(Optical Encoder)的部分出了問題, 也有人叫他光柵,如下圖這個 這個黑色小圓片就是處理G27判斷方向盤轉了多少的裝置, 然而我不知道為啥Logitech的工程師在設計的時候這塊用塑膠….熱漲冷縮呢www(可能才有機會送修吧, 不然其他的部份的品質都很牢靠, 金屬的部分也很厚實堅固) 仔細看圖片右下的那條裂痕, 這就是造成校正失準的原因(雖然很小但就是這樣沒錯QQ)原本想說按照網上一些說法拆下拿強力膠or三秒膠把縫隙補起來但是我這麼做的時候裝上去居然就, 啪的一聲又裂拉QQ, 而且裂更大惹……裝回去連校正都無法拉QQ於是, 只好想辦法去淘了個不鏽鋼製的光柵回來….等了幾天終於運來台灣惹(BTW這被官方認定是特貨,所以得找私人運)價格約NTD350~400左右, 之前看YT有人說澳洲有人在賣, 但出貨慢又貴….(1.5k)還好至少TB有賣, 不然就GG惹 收到貨發現賣家包的超仔細XDD我拆了好幾層, 最裡面還是用戒指盒包的簡直超用心阿XDDD 對了這邊提醒一下, G27有兩種光柵, 舊版的(綠盒包裝)是60柵跟G25共用新版的G27(黑盒裝)是30柵, G29跟G920應該也一樣?可能要拆開來看或查過比較好 2018/06/06 更新 可能要注意一下，上述的不鏽鋼光柵在幾個月之後居然也開始失靈了，又開始慢慢歪掉 Orz不知道是不是便宜了經度不夠或剛好瑕疵等…取出來的時候好像有些刮痕，也可能是我一開始沒裝好造成的淘寶有些評價都是正常使用的，如果要買可能自己先評估一下了 總之我換成YT上不少人買的泰國製黃銅製光柵(30USD一個+8USD運費) 黃銅光柵連結 接下來簡單紀錄一下維修的方法, 如果覺得我圖片不清楚或不懂可以去YT, 國外有不少拆解影片~ 首先拆下方向盤上的六角螺絲 打開的時候小心, 方向盤上的按鈕有連接線連到一張綠色的T型電路板上 後面有個連接端子把它小心的拔掉, 然後會變成這個樣子 記得順便把轉速指示燈的遮蓋拿起來放好 接著將紅圈的三個螺絲拆下(這螺絲要裝回去的時候莫名的難鎖,還很長……)PS下面那個螺絲被端子擋到周圍四個螺絲是鎖著撥片用的, 如果要換大撥片再拆那四個螺絲即可 拔下後的樣子 接著把G27翻到背面, 卸下螺絲(紅色), 綠圈處我建議晚點再拆,那邊是固定馬達跟旋轉軸的部分 放好螺絲後上蓋應該可以輕鬆的提起然後會看到電路板, 感測器在右方馬達的尾部(有個黑蓋子的)然後把電路板上有端子的連結都拆起來(別太暴力R 雖然我覺得還蠻堅固的)把周圍的螺絲(包含電路板下面的固定鋼板)卸下 (拍糊了QQ) 此時可以用一字起子沿著黑蓋邊緣撬開, 這部分沒拍到然後再把下面剛才提到的綠圈處的螺絲卸下小心這時候馬達中間那塊的軸心就會分離, 不要摔到了還有裡面有齒輪和一片固定位置用的金屬彈片小心不要搞飛上面都有塗潤滑油, 別雞婆把它擦掉阿XD接著我們就可以看到光學感測電路板了 可以先檢查一下是不是螺絲鬆掉, 鬆掉也可能會造成失準的問題, 如果鎖緊就好了可以不用換光柵~欸抱歉我發現細部的圖片沒拍到簡單敘述一下就是把綠色的電路板拆下(小心螺絲下面有華司別弄丟)如果要換就把黑色那片光柵拔下換上即可之後按照原本的動作組裝回去就沒問題記得電路板接線要檢查有沒有接穩QQ 我第一次裝回去有一個沒裝好結果又拆開來壓緊(ry 2018/06/06 更新 附上安裝上新光柵的大圖，可以讓光柵盡可能地靠近黑色(接收器)，但是注意不要摩擦到PCB就好 順便提醒一下把馬達齒輪組那一大塊安裝回去時要特別注意塑膠擋塊有沒有對齊，G27是靠那個判斷有沒有轉到底的如果沒對準也是沒法校正哦，建議可以卡上去後壓著把方向盤兩邊轉到底看有沒有卡好對齊(齒輪那也有個藍點可以對準) YA等了一個禮拜終於復活拉 趕緊飆車去囉","link":"/en/2018/01/logitech-g27-方向盤-回正-校正問題維修筆記/"},{"title":"Hexo Github deploy 問題修正","text":"今天用另一台電腦寫blog要用Powershell部屬到Github上時發生了錯誤 錯誤訊息如下 1234567891011121314151617181920212223PS C:\\Users\\DriftKingTW\\blog&gt; hexo dINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...On branch masternothing to commit, working tree cleanfatal: HttpRequestException encountered. An error occurred while sending the request.bash: /dev/tty: No such device or addresserror: failed to execute prompt script (exit code 1)fatal: could not read Username for 'https://github.com': No errorFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: fatal: HttpRequestException encountered. An error occurred while sending the request.bash: /dev/tty: No such device or addresserror: failed to execute prompt script (exit code 1)fatal: could not read Username for 'https://github.com': No error at ChildProcess.&lt;anonymous&gt; (C:\\Users\\DriftKingTW\\blog\\node_modules\\hexo-util\\lib\\spawn.js:37:17) at emitTwo (events.js:126:13) at ChildProcess.emit (events.js:214:7) at ChildProcess.cp.emit (C:\\Users\\DriftKingTW\\blog\\node_modules\\cross-spawn\\lib\\enoent.js:40:29) at maybeClose (internal/child_process.js:925:16) at Process.ChildProcess._handle.onexit (internal/child_process.js:209:5) 上網翻了不少資料, 一些git設定跟ssh設定也都測試過了依然無法解決問題後來使用了另一種設定方法 原本的_config.yml 1234deploy: type: git repo: https://github.com/username/your_repo.git branch: 修改成 1234deploy: type: git repo: git@github.com:username/your_repo.git branch: 就能夠正常Deploy, 不過在原本架設hexo的電腦上是能夠使用第一種方法的這裡放上我的解決方法, 提供參考 參考資料:Hexo + Github 簡單使用教學","link":"/en/2018/03/Hexo-Github-deploy-問題修正筆記/"},{"title":"DIY IR Tracker 紅外線頭戴追蹤器筆記","text":"用VR玩模擬駕駛之類的遊戲是很多玩家的夢想, 不過目前VR頭戴顯示器還不算相當成熟, 而且價格又偏高的情況下(對拉這才是重點), 不過窮人是很聰明的, 沒有VR我們當然有便宜的替代品!那就是IR Tracker(紅外線追蹤器, Infrared:紅外線縮寫為IR), 可以搭配OpenTrack等開源軟體, 利用IR攝影機拍攝IR LED做定位, 來達到偵測物體移動的功能材料買下來成本差不多可以控制在NTD500以內, 當然網路上也有賣現成的, 不過相對價格都比較高, 當然是選擇DIY既便宜又不失樂趣! Ready所需材料 PSEYE 攝影機 x 1 (注意!市面上有兩種版本, 我會在步驟中提及其中的差異) IR LED x 3 (推薦SFH485P, 亮度高效果較佳) 6.8Ω 1/4W電阻 x 1 (串聯5V, 每顆LED電流約75mA) 這邊可以用參考阻值計算機計算 5V電源(電池、USB, etc) 磁碟片一張 就是那個存檔圖案的實體拉 所需工具 烙鐵 焊錫 一些連接用線材 熱縮套/絕緣膠帶 Let’s Do It!PSEYE首先處理PSEYE, 也就是我們的IR攝影機, 他原本只是個普通的攝影機, 但是我們可以手動拆除IR濾鏡改造成IR攝影機小科普:CMOS感光元件對於IR的敏感度很高, 所以普通相機都會裝上IR濾鏡濾除大多數的紅外線(不是完全濾除, 所以可以利用手機鏡頭等去照IR遙控器, 就能夠透過相機看到IR了!)至於選PSEYE而不是其他WebCam的原因, 主要就是因為PSEYE的幀率可以高達100以上, 對於移動是非常靈敏的做IR Traceker也不需要很高的解析度, 有480P就已經綽綽有餘了, PSEYE價格也不高, 所以當然是首選囉!用其他的攝影機當然也可以, 原理都是一樣的, 只是大部分都會推薦PSEYE PSEYE比較不過問題來了, 在準備部分提及的有兩種PSEYE, 一種是能夠拆除IR濾鏡一種無法(放在夾層中) 從上圖中可以看到左邊的那種(應該是較新款), 鏡頭中有白圈的是無法拆除IR濾鏡的!不過不必太過擔心, 因為功能上基本也是沒問題的, 只是條件許可下最好能選到右邊這種, 能達到最好的效果(說真的我覺得使用上沒差多少就是) 拆解首先先把PSEYE後面的墊片拆起(新款的是軟墊, 舊款的是硬的要注意)由於舊款是塑膠墊片, 所以我直接用手鑽把它鑽出來(注意不要鑽到底下的螺絲) 接著把螺絲轉開, 然後沿著邊邊撬開後蓋(非常…難拆, 尤其到圓球那部分要很用力地把它暴力扯開) 小心拆解過程不要傷到手跟內部的PCB 接下來比較輕鬆, 把PCB上的螺絲都轉下來, 分離下方的支架, 並且拆下前鏡頭 接下來拆解IR濾鏡, 如果是買到無法拆IR濾鏡的可以直接跳到這繼續 拆解IR Filter這部分需要比較大的耐心, 除了拆背蓋在這裡也會有種讓人想去買成品的衝動 上圖中最外層的圓形玻璃小透鏡就是IR濾鏡, 我們要將它拆下才能達到最好的IR感測效果可以拿小刀或是像我沒耐心直接手鑽往旁邊鑽, 不過不管怎樣都要很小心而且要花些時間至於多難拆, 體驗一下就知道了(笑) 成功拆除! 過濾可見光接著我們拿出磁碟片, 然後把它給拆爆溫柔地拆開 拿出剪刀, 把磁片剪成跟鏡頭那塊方形差不多的大小並放上去 還原PSEYE好了, 此時完成IR攝影機的改裝, 現在按著步驟反向裝回去原本的樣子先丟一邊, 開始做IR Tracker的本體 可以順便通個電看剛才有沒有把它毀了 IR Tracker先來處理電路的部分, 電路很簡單就是單純串聯 5V-&gt;電阻-&gt;LED-&gt;LED-&gt;LED-&gt;GND 電源看想用電池或USB供電都可以(打算之後要用小型鋰聚電池供電, 目前先接USB) 此時我們要先準備個支架, 我直接用了YouTuber Seytonic (推薦去逛逛, 他的頻道有許多好玩的東西) 提供的版型去修改成3D列印檔案, 然後請人列印出來可以順便按照個人喜好在上面做裝飾, 這時候當然貼上Carbon紋路超輕量化 接著看要如何安裝固定, 我個人是綁在耳機上, 如圖(歪歪的沒關係 因為軟體可以校正) 軟體設定軟體的部分首先要下載CL-EYE DRIVER, 連結是Donate版, 免費版可以自己搜尋, 畢竟也不貴應該支持一下開發者安裝過程就是不斷的下一步就可以, 不多做說明, 裝好後可以開啟”CL-EYE TEST”這個程式看看有沒有正常(已經改裝好攝影機的話應該看不太到可見光, 所以可以拿剛才做好的頭戴追蹤器或遙控器之類對著鏡頭測試) 如上圖有看到亮點就代表驅動跟硬體都正常囉!注意!如果覺得亮點很模糊, 那是因為拔除IR濾鏡之後造成焦距改變, 這時候我們可以藉由轉動鏡頭調整卡在適合的焦距上另外也可以進入裝置的屬性設定裡調整曝光等參數, 我一開始身邊找不到磁碟片就是靠軟體改變曝光, 同樣也能夠正常使用哦! 接著安裝OpenTrack, 選擇最新版下載後一樣是無腦下一步安裝 接著開啟Input那欄右側的設定圖案 Device裝置的部分選擇你的攝影機(PSEYE), 下方可以調整解析度和FPS等(FPS盡量拉高)然後開啟右邊的設定對話框, 選擇Shortcuts快捷鍵, 在Center項目設定一個按鍵讓你可以在遊戲/模擬器中重新校正置中 接著切換到Output, 在這裡可以選擇要啟動的感測項目Yaw(偏擺), Pitch(俯仰), Roll(翻滾), XYZ(XYZ軸移動) 像是我開歐卡或賽車等, 只希望左右轉頭時候能看到左右的景物, 所以就單純開啟Yaw其他設定Disabled如果像Warthunder要看四面八方, 就需要開其他的選項, 這部分就看個人需求了 設定完成按下OK回到主畫面, 然後按Start就會啟動OpenTrack囉!此時可以看到三個IR LED的光點正確地出現在方框中只要做出動作旁邊的小章魚就會跟著做相同的動作 接著就可以開啟遊戲, 體驗窮人的半VR拉歐卡之類可以直接支援, 像Project CARS 2的話要開Steam VR模式才有用哦! 每個遊戲可能要自己另外注意一下雖然說價格不貴, 但是效果的確不錯呢!原先以為只有頭部轉動螢幕沒有跟上會很難用, 結果是多操心了基本上可以很自然地看向左右兩側, 也沒什麼延遲, 前面的辛苦值得啦! 參考資料$10 Gaming Head Tracker | DIY TutorialCL-EYE DRIVEROpenTrackEasy build setup with SFH485P, Anyone can build this ! LED Assembly Wizard","link":"/en/2018/03/DIY-IR-Tracker-紅外線頭戴追蹤器筆記/"},{"title":"iPad Pro 10.5 簡易開箱+繪圖心得","text":"有空先來記錄下年前買的iPad Pro，其實原本是想買New Surface Pro的想說有筆可以直接當繪圖螢幕，然後又是台Windows電腦，開發網頁寫寫code都很方便不過爬文過後發現M$的QC感覺實在有點問題，一個在賭人品的概念(ry實在不想買那麼貴的東西還要賭人品，加上Surface的繪圖功能雖然規格看上去不錯不過看到一些實際畫的影片，在延遲跟準度上都還有待加強的樣子(當然以普通書寫來說相當夠了 於是，就選了目前平板/筆電繪圖螢幕裡整體評價最高的iPad Pro拉~(開發之類的…到時候在買筆電吧，現在還沒能滿意的整合型產品，考慮MBP或XPS選擇10.5吋也是因為考量到攜帶的關係，多工的確12.9吋的比較爽，但是畫圖我是覺得還好XD 水果的開箱基本上就是長那樣，很有質感很爽，開箱也都有輔助拉條很方便這裡就簡單放個圖就好 然後我發現好像忘了拍裸機了，不過就是一如往常的，金屬的機身很有質感當然還有潮到爆炸的LOGO由於這玩意實在太貴了，而且又有帶著跑的需求怕會有灰塵刮傷玻璃(想說當成隨身的繪板看能不能逼自己產圖所以先幫他找了個家又貼了玻璃貼玻璃貼我是貼iMos的，目前iPad Pro評價最好的玻璃貼好像也就這個選擇不會影響Apple Pencil非常重要RR 有的太厚好像會有抖動的問題原本有考慮霧面增加手感…不過這樣太可惜那Retina螢幕了而且真要手感直接用Intuos Pro比較快XDD(有貼類似紙質的膜) 滿板的玻璃貼，很薄，官方說0.33mm 當然我也沒去量XD不仔細看也看不出有貼，另外也有順便貼上鏡頭跟Home鍵的保護貼 跟iPhone7相同的鏡頭，拍起來好但是也沒人會拿著平板到處拍吧XDD掃描文件之類很好用就是 然後外殼的部分，我翻遍了各種保護殼…要嘛是很醜要嘛太厚重或是沒有Studio Mode(接近平躺那種適合打字畫圖的角度)後來終於找到Speck出品的for 10.5”保護殼好看外也有1.2m防摔(當然我是不會無聊測試的)，重量也比UAG的輕價格1k多NTD，我覺得算挺不錯的原本因為不確定是否能相容滿板玻璃貼，所以特地跑去Studio A看，剛好他們剩下一個10.5吋的XDD 包裝 正面 背面 掀開裙子 立起來的樣子(有多段卡準可以調整角度) 然後這是剛才提到的Studio Mode 旁邊還有個小扣子 再來是那隻神奇的Apple Pencil有人說他很貴但是以壓感筆來說挺正常的價格官方沒給出壓感數據，聽說大概是1024，畫起來是挺夠了XD只是當然比不上Intuos Pro 8192壓感的爽感XDD 本體跟lightning轉接器+替換筆芯重量拿起來挺舒適的，大概是目前拿過最好拿的電池筆(Wacom基本上都是無電池)筆蓋是磁吸式的，吸力適中應該是不會隨便掉只是充電還要轉接，筆蓋得另外放就要比較小心了，東西都挺小的還會滾 然後這筆有個小彩蛋，裡面有特別配重，所以把筆放在桌上時會剛好讓Pencil的字樣朝上雖然只是小細節，不過可以感受的到設計師很用心啊XD 用轉接器充電 長雞雞充電法 雖然說真的我也想不到其他可以直接連接iPad又好看的充電法可是這樣看起來真的挺蠢糟的 配對的話就是開個藍芽，扶他一下就可以了，挺方便的之後直接畫就會自動連上了筆如果沒電只要充個15sec就可以畫30分鐘倒是挺不錯，在外面應急才不會太尷尬但是這充電法怎麼看就是很尷尬 替換筆芯的部分 先拿MediPaint來試畫一下，感覺很棒，玻璃滑我是覺得還好畢竟平常都在畫板子滑習慣了，如果平時是手繪的朋友可能就要注意一下了貼上玻璃貼比原本的滑一些，看過蠻多人說超不習慣然後又貼回普通保護貼了 所以我再畫什麼 試著上點色 真的有種拿著鉛筆的感覺，用Sketches的時候傾斜感應也很明顯，我覺得甚至比Wacom的傾斜手感還好XDD其他詳細的部分我會再多畫一陣子跟多嘗試各種繪圖軟體之後再寫一篇文章 iPad Pro除了當畫板也可以做些其他輔助的工作，加上iOS的多工功能非常方便要看參考圖也可以邊看邊畫(沒截到圖下次在一起寫心得好了)雖然貴但是真的好用啊推坑中，Pro終於讓人不會單純覺得iPad只是個玩具而已XD看來Apple也算是在生產力的部分往前了一大步了，希望之後會有更多方便的功能只是拜託先把系統做穩R Thx for watching (〃∀〃)","link":"/en/2018/02/iPad-Pro-10.5-簡易開箱+繪圖心得/"},{"title":"Windows 10 安裝 Ubuntu bash","text":"本篇記錄如何在 Windows10 上安裝 Ubuntu bash 在 Microsoft App 商店搜尋 “Ubuntu” 並安裝 開啟 “設定” -&gt; “App” -&gt; “應用程式與功能” 在最下方 “相關設定” -&gt; “程式與功能” -&gt; “開啟或關閉Windows功能” 確認 “適用於 Linux 的 Windwos 子系統” 已勾選(可能需要重新啟動) 再次打開 “設定” -&gt; “更新與安全性” -&gt; “開發人員專用” -&gt; 選擇 “開發人員模式” 開啟提示命令字元(系統管理員權限執行) -&gt; 輸入以下指令 1dism /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux 完成後執行 Ubuntu App, 即可開始使用","link":"/en/2018/03/Windows-10-安裝-Ubuntu-bash/"},{"title":"在Github-Page上免費使用自訂HTTPS網域名稱","text":"Why在Github上建好靜態網站後, 都是利用 username.github.io 進行瀏覽但是Github也有可以讓我們使用自己的域名(Domain Name)的設定假設選擇自訂域名就無法使用它所提供的SSL連線服務, 需要找第三方來使用HTTPS 為了達成HTTPS自訂域名, 需要要利用CloudFlare所提供的免費服務至於堅持使用HTTPS的原因, 我到時候再寫另外一篇文章詳細補充 How 確認已經註冊好一個域名 確認已經在Github上建立一個靜態網站 前往CloudFlare註冊然後按照指示加入你的站點 到Github靜態網站的Repo裡面點選設定, 然後往下拉找到自訂網域(Custom domain), 填上要設定的網域按下儲存 回到CloudFlare在DNS頁面新增CNAME連結到 username.github.io (username為Github用戶名)在這個範例設定中, 我要讓原本的主機名稱連到原先架設在GCP上的網站, 而blog子網域連到Github的靜態網頁 (第二個CNAME的紀錄是為了讓不論前面有沒有輸入www的網址都能連線到我的網站)確認成功連線應該會出現如下的Active字樣(設定完成需要等5~10分鐘生效) 如果原本有設定過DNS的部分, 要去把他們都替換成CloudFlare提供的DNS Server(在DNS設定頁籤中) 接著設定SSL的部分, 選擇加密(Crypto)頁籤SSL是否為FULL模式(若沒有手動設定成FULL)(設定完成需要等5~10分鐘)當畫面顯示Active Certificate字樣代表SSL已啟用 此時應該已經可以使用https訪問我們的Github page了, 但若是使用者輸入http則無效, 所以需要作強制導向HTTPS的設定選擇頁面規則(Page Rules)後點選新增規則在URL Match的部分打上http的網域名, 最後加上星號代表此網域底下通用規則, 然後設定選擇Always Use HTTPS強制導向 這時候就算URL輸入http也會自動連向https的頁面了, 設定完成! 備註 如果使用的是Jekyll, Hexo之類的靜態網站產生器(Static Site Generator)的話, 記得內容連結也都要是https,否則會出現Mix Content的問題, 這樣是無法看到SSL綠色鎖頭的哦 使用Hexo這種利用Push更新文章的靜態網站, 因為每次更新都會把全部檔案洗掉, 所以我們要把設定Github Custom Domain所產生的CNAME檔案(無附檔名), 複製一份放在Hexo的source資料夾, 才不會造成CNAME被覆蓋掉而要重新設定的情況CNAME內容就是Github Page的Custom Domain, 也可以自己建立一份, 例如 1blog.driftkingtw.me 可以在CloudFlare的Page Rules頁籤新增Cache規則, 加快網站載入速度 參考資料Secure and fast GitHub Pages with CloudFlareSetting up a custom subdomain","link":"/en/2018/03/在Github-Page上免費使用自訂HTTPS網域名稱/"},{"title":"iPad Pro 繪圖心得 (含其他繪圖螢幕簡易比較)","text":"iPad Pro入手也大概三個多月了，稍微詳細寫一下在繪圖方面的心得。先聲明一下畫圖只是我的業餘興趣，而且軟硬體使用上因人而異，所以內容僅供參考哦(´▽`) 硬體 軟體 總結 硬體P.S 在買iPad到寫這篇心得中間，Apple又推出了iPad 2018，讓iPad Pro不再是唯一支持Apple Pencil的裝置了，在硬體篇後面會提到一些差異。 硬體的部分，2017 iPad Pro 10.5”，A10X處理器在目前相關使用上都算相當順暢，畢竟4K影片剪輯都沒問題，不過在跑特效跟做些大量圖層變形的速度上當然還是比不上桌上型CPU，RAM 4G其實在iOS上用起來挺夠的，圖層開到上百(Clip Studio Paint, 畫布A4 350DPI)基本上都還是能跑，不過如果這時還要多選幾個圖層做特效或變形的話就會非常吃力(整個卡住等一陣子)，所以如果需要畫比較精細圖層又開多的話還是電腦畫起來舒服些。 BTW iOS11的多視窗跟Dock真的非常好用(雖然iOS11一開始bug還真不少)，iPhone上可能沒什麼感覺，不過在iPad上能大幅提升工作效率，畫圖弄個懸浮視窗放參考圖簡直不要太方便XD (不過還是有軟體尚未支援，這就得等開發者更新了) 螢幕的部分Retina(2224 x 1668, 264ppi) + P3 廣色域顯示效果自然不再話下，加上抗反射塗層降低螢幕反光，在大部分情況下還是能清楚看到螢幕(拿普通的iPad螢幕去比一下就很明顯了)，不過螢幕畢竟是玻璃做的，Apple Pencil的筆尖是塑膠，可以想見在玻璃上寫字畫圖真的挺滑的，貼霧面貼雖然可以增進摩擦力不過也會讓顯示效果下降，這部分可能要依照個人喜好做抉擇了，我個人還能夠適應咕溜的感覺，不過也是看過有人因為這樣畫不下去的XD 另外值得一提的就是ProMotion，在需要的時候會提升FPS到120Hz，所以Pro在滑動介面的時候會特別順暢，當然也讓繪圖筆跡能夠更及時的跟上筆尖，不過其實一般畫圖的速度是察覺不太到的(跟60FPS螢幕比較)TrueTone即時調整色調這部分跟繪圖相關度並不大就不另外多說了。 電池續航力方面，中間亮度，平時使用畫畫圖一天可以差不多至少8~10小時左右，算是挺夠了。你的筆可能沒電的比較快，不過可以插上iPad長ㄐㄐ15秒就能續命30分鐘，不成問題。 Apple Pencil 如同官網所廣告的，還真的是一隻魔法棒XD，寫下去真的有”Pencil”的感覺(當然除了紙的質感差了十萬八千里，玻璃很滑)。壓力感應等級普通，不過算是夠用了，靈敏度也相當不錯，而且傾斜感應意外的好，我用起來的感覺已經超越Wacom了(不過我覺得可能是軟體跟系統的問題讓Wacom的傾斜感應用起來不是那麼順手) 再來就是準確度，我只能說這是我用過最準確的螢幕繪圖筆(Cintiq的部分我會在下方對比提到)，基本畫下去就是再你想的那個位置，許多螢幕繪圖的問題就是準確度不是很完美，總會覺得下筆位置稍微落差或是接近螢幕邊緣會為一的更嚴重，不過對比Cintiq系列來說，缺點可能就是需要碰到板子才畫下去，Cintiq能在筆靠近螢幕時就顯示出筆刷的圓圈，能夠清楚知道落筆點跟筆刷大小。 外型就是水果風，重量OK好拿，電池筆續航算還可以，缺點估計是比一般的筆長了點，還有筆芯不像Wacom多元(至於充電方式我已經不想吐槽了)。 對比一般繪圖板Wacom Intuos Pro (2017) 這塊Intuos Pro是非螢幕繪圖板裡面我最喜歡的，目前顏值最高的板板，握筆相當舒適，還有那個8192的黑科技壓感，或是選擇Paper配件就可以獲得把一般紙張書寫轉成數位的更黑科技，跟那個摸起來很舒服但其實對我根本沒卵用的圓盤，板子的表面寫起來阻力適中也不滑控筆很穩，如果是和我一樣很習慣不看筆尖畫圖的真的是目前最好的選擇了。Wacom大法好! (不過吐槽一下Wacom你把無線連線方式從2.4GHz改成Bluetooth之後感覺更lag了，雖然上次更新韌體有改善可是還是…) Wacom的筆我基本上沒話說，沒電池拿再久都不累，按鍵好按握感舒適(入門Intuos的筆我覺得沒很舒服就是)，還有筆尾那個裝飾性質大於實用性的橡皮擦，壓感一流(同壓感不同廠牌裡面用起來還是覺得Wacom最好)，除了傾斜感測輸Apple Pencil外基本上沒什麼問題了。還有那個握套很容易留痕跡就是，雖然能換。 對比Wacom Cintiq Pro / MobileStudio Pro Cintiq系列我只有在Wacom展示間用過，就簡單說下試用心得。 恩…手邊拍的Cintiq剛好就只有這張(? 先講Cintiq Pro，他需要外接主機/筆電才能夠畫圖，相較iPad的優點除了螢幕大小外就是上述提到的落筆能看到範圍圓圈，iPad都要下筆才發現筆刷切太大，還有壓感很棒，Wacom的優良傳統。缺點沒法獨立使用，畫久了螢幕挺熱的…手放在上面不是很舒服(iPad頂多溫溫的)，最大的問題是由於螢幕不像iPad Pro的貼合螢幕…所以螢幕跟外層玻璃有一小層間隙，所以看的角度不是很正的話下筆會看起來稍微偏掉(其實位置沒偏)，撇除解析度跟P3的差距外，剩下的就是反應速度稍差(感覺還是軟體問題導致，不過Pro的120Hz應該也是關鍵之一)。 MobileStudio Pro基本就是繪圖平板，優點的話就是跑Windows系統，各種軟體支援，跟電腦操作基本上一樣,效能比iPad好(當然價格也是爆炸貴)，其他優點基本上跟Cintiq差不多，缺點是那螢幕又更燙了，後面還有個CPU在加熱，硬體效能麻…就是還可以，不過真的會很燙，其他問題跟上述一樣，差在可以獨立使用不必依賴主機。 跟iPad比起來，Wacom的繪圖螢幕是相對更專業很燙的工具選擇，不過我覺得還是有一定的缺點(尤其MobileStudio還聽說不少故障的問題…)，我個人是用Intuos更舒服習慣就是…除了打稿有螢幕更直覺會更快外其實對我而言效率並沒有特別顯著的提升。 對比iPad 2018 圖片取自: https://www.apple.com/tw/shop/buy-ipad/ipad-9-7 Apple前陣子推出的教育市場面向的新入門款iPad 2018，基本上就是2017 iPad升級了處理器到A10、支援了Apple Pencil，然後價格降到差不多一萬台幣起跳，個人認為有支援Apple Pencil的話這價格其實挺值得購買的，看了不少之前使用Pro的畫家/設計師跑去用2018的心得都是，除了螢幕(沒有P3沒有貼合螢幕沒有抗反射塗層沒有120Hz)，硬體(2G RAM)這些缺點外，對繪圖來說是非常不錯的選擇(而且價格只有Pro的一半左右，不過還是要算上還要另購Apple Pencil的資金)。 主要缺點沒有貼合螢幕所以下筆沒Pro那麼的爽(玻璃跟螢幕有間隙)，不過體驗看上去還是相當不錯，塗塗鴉的話RAM影響也不大，可能就是多工模式下只有單一視窗能夠使用比較可惜。 這價格對學生黨也是一大福音，當然有錢或想認真玩就上Pro，相信拿到之後不會後悔的(單指繪圖方面，目前除了繪圖跟當輕文書筆電外我認為還沒有必要上Pro的理由)。 不過這個時間點，Apple可能要出iPad Pro 2了，可以在觀望看看。 對比其他有繪圖功能的螢幕 像是Surface、Pixelbook之類的有壓感筆的平板筆電等，Pixelbook我借過朋友的試用過(軟體Sketchbook)，下筆算挺準的，不過就如同其他非Wacom的繪圖螢幕一樣明顯畫出來的線條跟不太上筆尖，還能夠畫不過可能需要習慣。 壓感部分還算及格，軟體的部分可能比較頭痛得灌Linux才有一些比較方便的軟體(而且支援性可能有問題)。至於Surface的話我沒實際用過，不過在Youtube的很多測試影片中明顯延遲是最高的(雖然數據上寫起來延遲比Apple還低…)，而且常看到各種下筆不準的問題，用起來可能不是很舒服。優點的話，Windows的繪圖軟體相當成熟了，而且做為筆電也更方便處理各項工作，希望微軟以後能改善這個產品，我個人認為挺有潛力的XD 硬體比較 比較的部分單純是我”個人的感覺”，不管效能等數據而是直接操作的第一感想(Other代表其餘上述有繪圖螢幕的產品) 測試項目 比較 壓感 Cintiq系列 &gt;&gt; iPad Pro = iPad 2018 &gt; Other 反應速度 iPad Pro ≥ iPad 2018 &gt; Cintiq系列 &gt;&gt;&gt; Other 攜帶方便性 iPad Pro = iPad 2018 &gt;&gt; MobileStudio ≌ Other (Cintiq Pro單純螢幕無法單獨使用) 價格部分可能就看自己能夠負擔接受的狀況，由於有些產品定位不一樣價格自然不同所以就不多做比較。 軟體當然硬體在好沒有好的軟體幫助，也只是中看不中用。軟體的部分主要就寫寫iOS上的繪圖軟體在Pro上的表現，畢竟Windows上的繪圖軟體大家應該都很熟了，就算不熟網路上也一卡車的資料能找。 以下是我試玩過的幾個繪圖APP，硬體都是Apple Pencil + iPad Pro 10.5”目前還沒很多時間把每個APP都摸得很透徹，基本只說些基本的心得。 CLIP STUDIO PAINT for manga 價格PRO: NTD 140/每月 NTD 780/每年 (每月NTD 65)EX: NTD 270/每月 NTD 2,090/每年 (每月NTD 174) CSP應該是日系插畫跟漫畫市占最高的軟體了(至少官網是這麼說的)，相信不少畫手都在PC上都用過，三不五時的特價也讓不少用SAI的跳槽了，SAI:你怎麼這麼熟練阿。畢竟除了一些筆刷上的設定跟效能優勢來說，CSP的功能跟資源還是更豐富些。 大約在去年(2017)CSP移植到了iOS上，對，完完全全的移植，除了各種好用的功能外連UI都原封不動的移植了XD，所以它的UI整個就是把桌面的樣子直接縮到iPad的小螢幕上，挺擠的又小，點擊不是很方便… 雖然在10.5吋螢幕上擠了點，不過他們對於鍵盤快捷鍵也是完全從PC版搬過來，所以接個藍芽鍵盤就可以用鍵盤操作畫起來也比較快，是目前用過的APP裡對鍵盤支援度最好的，不過可想而知帶出門畫世界麻煩。其他功能都跟桌面一樣了就不多說。手勢方面有支援(雙指回上一步等)，也有防掌觸(要在設定中設定)，Apple Pencil的支援度跟順暢度也完全沒問題。 除了UI外，功能上絕對是App Store裡面繪圖軟體數一數二的，另外又有大量的社群資源(筆刷,素材, etc)，熟悉PC軟體的話一定能快速的上手，畢竟就是完全一模一樣。現在也支援了各種素材筆刷作品同步的功能，只是目前UX設計還不是很好，有些地方讓人摸不著頭緒，希望之後會改善，我甚至有遇到作品同步不了的，同步速度也很慢。 再來就是月費可能很多人不喜歡, 不過一開始訂閱EX版的話有贈送6個月的試用期還算佛心，之後可以選擇要PRO版或EX(視個人需求)訂閱，年繳比較便宜(後來更新的，不然原本只有EX版月訂真的很貴)，不過應該很多人還是希望能夠買斷就是，看看那可憐的3.7評價。PRO的年繳價格我覺得還能接受就是，畢竟人家也是要賺錢的XD MediBang Paint for iPad 價格: 免費 知名的免費繪圖軟體，優點就是各平台都有，而且都免費! 功能上用起來也算挺齊全的，漫畫還沒畫過不確定，算是個資源跟功能稍微少些的CSP，UI設計上有針對隨身觸控裝置優化過所以不會像CSP那麼難按，對於手勢支援相當良好，也可以開防掌觸，只是對於鍵盤快捷鍵就沒有可以設定的地方，只能用他預設的(或是我沒找到?) 整體操作上流暢沒什麼毛病。 自訂筆刷等也跟桌面版一樣，沒什麼限制，開多圖層效能也不太會掉，對於那些不想花月費買CSP的，MediBang Paint是個值得一試的選擇，再說一次重點這玩意免費阿XD Procreate 價格: NTD 300 算的上iOS上UI最好同時功能也相當齊全的APP了，基本上很多人都會推薦的軟體，筆刷跟素材內建的就相當豐富，甚至有內建過程的錄影重播功能，防掌觸之類當然也是支援的。 UI操作超級流暢又很乾淨，不像CSP那樣擋東擋西又不好叫出來，忍不住一直縮放畫布，筆刷設定好的話搭配Apple Pencil有種飛天的感覺，傾斜感應非常的棒，所以這軟體我後來變成拿來寫藝術字，功能跟花樣搭配挺多的，目前還玩不多，有更多詳細的心得會再補充XD 缺點的話大概就是在同解析度同尺寸的話布上圖層上限記得比CSP低，我是習慣開很多圖層的所以可能比較有機會遇到這問題。 另外這軟體只有NT 300算是相當超值了，推薦如果可以就入手個玩玩，那些筆刷有時候好像撇一撇也很藝術的感覺，在外面可以拿出來撇幾筆裝逼。 Autodesk SketchBook 價格: 免費 我們偉大的Autodesk讓SketchBook的Pro也免費啦!!(要先註冊個免費帳號)前陣子Pro版好像要NT30還90，也沒多貴所以乾脆免費了嗎? 優點基本上就是界面簡潔，有防掌觸(跟下面要介紹的Tayasui Sketches差不多)，手勢跟一些壓感也能夠設定，不過整體功能就是比較適合拿來塗鴉、隨興創作，筆刷能夠調整不過應該無法自行製作筆刷，一些特效調整也不如上述幾個軟體。 還有它也提供了過程錄影的功能，不過要自己手動去開，不像Procreate本身預設就有錄下過程了。 發現我沒在這軟體上畫出個有樣子的東西，放個有趣的鏡像工具好了 Tayasui Sketches 價格: 免費 (Pro版NTD 180) 使用跟功能上其實跟SketchBook大同小異，UI的操作上也差不多，價格也不貴(不過Sketchbook已經免費了)。 值得一提的是我特別喜歡這APP的鉛筆，原始設定畫出來就挺像真的鉛筆XD，丟圖給別人看甚至會誤認為是手繪的，目前用過的APP裡面就它的鉛筆最棒了! 其他優缺就參考SketchBook的吧，反正就是很像除了Pro要錢外。 Adobe Photoshop Sketch 價格: 免費 Adobe出品，居然免費而且不會lag或死機???目前還沒玩很久，不過我認為他應該很適合畫一些素描或背景的草圖，或是一些設計構想的塗鴉，剩下在輸出到其他軟體處理，尺規相當豐富而且操作直覺，不過筆刷那些能玩的就相對少了，防掌觸跟手勢也都有支援，方便的打稿APP。 軟體比較 測試項目 比較 功能 CSP &gt; Procreate ≥ MBP &gt; SketchBook = Sketches = PS Sketch 操作方便性 Procreate &gt; SketchBook = Sketches = PS Sketch = MBP &gt; CSP(無鍵盤) 流暢性 目前使用下來感覺差不多，都算流暢，不過Procreate的UI動畫做得特別好。 總結如果是個非專業的學生黨，想買繪圖螢幕玩玩或提升畫圖效率，我會推薦iPad 2018，有錢的話能上Pro會讓你的體驗更舒適，但那價差就看自己評估值不值得了(而且Pro 2可能快出了可以等一波)，並不會說買普通iPad讓你畫得很不舒服之類，平板帶著到處塗鴉或寫生很有意思的XD。 至於Cintiq的價格更高，優缺就如硬體篇所述，如果是職業的選專業螢幕繪圖板可以大幅提升效率，而且Cintiq很耐用聽說可以戰十幾年之類，不常出門的可以直上Cintiq接電腦不用買iPad了(MobileStudio看上去故障率實在太高，不是很推薦)。 想買平板筆電畫圖的可能可以跟人借來試試看能不能夠接受，像是Surface的優勢就是它本身是台電腦，還可以做很多iPad做不到的事情(iOS目前頂多輕文書，說要當成筆電替代對我這種需求比較高的還有一段路要走)，目前有出繪圖筆電的廠商基本上都還做不到Apple或Wacom的順暢度跟準度，隨筆塗鴉倒是還能接受就是。 iOS的軟體上述那幾個我都蠻喜歡的，真要說的話如果你平常就有再用CSP而且用得很順，那麼CSP是一定要入手的(雖然說是訂閱制)。Procreate也非常值得一玩，畢竟CSP是把電腦的軟體縮小來畫而已，它能讓你體驗到在平板上繪圖的感覺，搭配各種手勢相當方便，還有不少神奇功能，價格才NTD300，好APP不買嗎XD 什麼你說其他軟體呢?免費的當然直接載來玩啊XD 最後老話一句，不管什麼硬體或軟體，你的畫技才是決定畫的好不好的關鍵，也是有人用Surface用小畫家畫出很棒的作品，當然也有拿Cintiq畫的慘不忍睹的，工具只能讓人更舒服的創作，所以不管用什麼軟硬體… 現在就趕快去努力畫圖吧! 只是想放個Meme然後我要去摸魚了 Thanks for watching (´▽`)","link":"/en/2018/05/iPad-Pro-繪圖心得/"},{"title":"Raspberry Zero W Headless 自動連上無線網路與開啟SSH","text":"沒想到一拖就拖到12月才更新了, 應該勤奮點的(ry之前因緣際會下, 請朋友從英國帶回來了觀望已久的 RPI ZERO W ✧◝(⁰▿⁰)◜✧先上張美圖 原本想多帶幾張回來的, 想說台灣代理的都好貴…但是發現一單只能買一張, 只好先收一張回來玩, 看來真的很搶手阿QQ加碼自然風外殼!! 這簡直超棒阿XDDD 雖然我也有買官方的Zero殼, 以後如果要用到攝影機相關的project會比較方便(^u^) 好了, 廢話少說, 立刻進入正題：雖然RPI有HDMI跟USB接口, 但我就是很懶得接東接西, 希望能夠直接在PC上控制他, 這種叫做Headless的啟動設定 沒裝螢幕 稱為無頭Zero W跟普通PI3的差異除了外觀還有就是Zero W並沒有乙太網路口 所以平常把PI3接上路由器設定的方法是沒辦法直接移植到Zero W身上的不過Zero W有內建WIFI晶片, 所以我們可以設定一下讓Zero自動連上家中的WIFI來進行操作, 而不需要外接螢幕鍵盤或OTG轉乙太再接路由器如此麻煩 先將要裝的系統image燒錄到SD卡中, 然後在Windows下應該能看到一個label為BOOT, 且檔案格式為FAT32的分區(另一個為ext4, Windows下無法讀取) 首先開啟SSH功能, 記得很久以前Raspbian預設是開的, 但後來關掉了, 不過我們還是能手動開啟他首先打開Notepad++之類的軟體, 新增一個完全空白的檔案, 然後另存在boot根目錄, 存檔時選擇所有類型, 檔名”ssh” (注意 無副檔名) 這樣就會啟動SSH的功能 接著要設定無線網路, 首先新建一個名為”wpa_supplicant.conf”的檔案, 一樣另存在boot的根目錄, 接著在內容打上： 1234567ctrl_interface=/var/run/wpa_supplicant update_config=1network=&#123; ssid=\"SSID\" //打上要連的無線網路SSID psk=\"PASSWORD\" //打上要連的無線網路的密碼&#125; 這樣開機的時候, 系統就會去把設定檔抓到 /etc/wpa_supplicant/底下, 開機自動連線 接著就可以把SD卡插進RPI裡面接上電源囉稍等幾秒後, 打開提示命令字元, 輸入 arp -a 查看有沒有多出一組新的連線(或是到路由器的管理頁面找), 然後再將IP打上putty等SSH軟體就大功告成拉！ 備註開機後可使用 sudo raspi-config 進入 Boot Option 啟動 Wait for network at Boot ，這樣 Pi 啟動時會先嘗試啟動網路在進行後續的開機，如果打算 headless 使用建議開啟。","link":"/en/2017/12/raspberry-zero-w-headless-自動連上無線網路與開啟SSH筆記/"},{"title":"Laravel Linux 佈署問題筆記","text":"整理了自己在佈署Laravel專案到Server時(Linux)所遇到的一些問題處理方式。環境若沒特別說明就代表使用的OS為Ubuntu Q1. 如何設定Laravel .env檔的APP_KEY?Ans：在專案跟目錄執行 php artisan key:generate Q2. 如何從Github上Clone私人專案到網站目錄Ans： 1git clone https://username@github.com/username/repo 其中username 為Github帳號名稱，repo 為專案名稱。 Q3. 在瀏覽器開啟網頁時出現以下錯誤訊息Error in exception handler: The stream or file &quot;/var/www/laravel/app/storage/logs/laravel.log&quot; could not be opened: failed to open stream: Permission denie Ans：( Apache ) 目錄權限不足，在專案目錄執行 sudo chmod -R 777 storage (注意，此方法較不安全) 安全的做法是把不同的權限分開，使用ACL(Access Control List)設定 1234// nginx = web server user// systemuser = your local user which you use to login via sshsudo setfacl -Rdm u:nginx:rwx,u:systemuser:rwx storagesudo setfacl -Rm u:nginx:rwx,u:systemuser:rwx storage 如果沒有ACL的設定方法 12sudo chgrp -R www-data storage bootstrap/cachesudo chmod -R ug+rwx storage bootstrap/cache Ans：( Nginx ) 1sudo chown USERNAME:USERNAME /var/www/html/SITE_FOLDER Q4. 如何切換不同的PHP版本 ( Apache )Ans： 安裝好需要的版本後執行以下指令 (範例為 7.0 =&gt; 7.2) 停用先前的PHP版本(重要) 1sudo a2dismod php7.0 啟動所需的PHP版本 1sudo a2enmod php7.2 重啟Apache2服務 1sudo service apache2 restart ( Nginx ) 設定預設PHP版本 1update-alternatives --set php /usr/bin/php7.0 Q5. 首頁能夠正常顯示，但切換不同的 Get 路徑顯示 404 Not Found (Ex: www.domainname.com/login)Ans：( Apache ) 啟動Rewrite模組 1sudo a2enmod rewrite 重啟Apache2服務 1sudo service apache2 restart 重啟後還是顯示404錯誤，使用文字編輯器開啟 000-default.conf 設定檔 (個人習慣使用vim) 1sudo vim /etc/apache2/sites-available/000-default.conf 在 DocumentRoot /var/www/html 下方新增以下設定 123&lt;Directory /var/www/html&gt; AllowOverride All&lt;/Directory&gt; 儲存設定後，重啟Apache2服務，這時就能正常顯示 GET 路徑了 1sudo service apache2 restart Ans：( Nginx ) 以文字編輯器下列設定檔 /etc/nginx/sites-enabled/default 新增下列設定 123456789server &#123; ... location / &#123; try_files $uri $uri/ /index.php?$query_string; &#125; ...&#125; 重整Nginx服務 1sudo systemctl reload nginx Q6. Bitnami LAMP Stack 更換DocumentRoot目錄？Ans： 更改以下檔案的DocumentRoot，80與443(有SSL的話)。 YOUR_INSTALLATION_DIRECTORY/apache2/conf/bitnami/bitnami.conf 重啓Apache 1sudo /opt/bitnami/ctlscript.sh restart apache Q7. 上傳檔案移動到只訂資料夾時出現權限不足單純使用chmod無效(由於改變的權限爲user非操作移動的www-data)\b\b，需要使用以下方法給予權限。 1sudo chown -R www-data:www-data /path/to/folder Q8. 利用 Laravel Installer 新增 Laravel 專案 [MacOS]MacOS 環境變數設定： 1export PATH=~/.composer/vendor/bin:$PATH 參考資料Cloning a private Github repo Laravel framework file permission - Security Laravel 5.4 problem - Wrong Route (Not Found) on Ubuntu 16.04 How To Deploy a Laravel Application with Nginx on Ubuntu 16.04 How to install PHP (7 or 7.2) on Ubuntu Changes to Apache httpd.conf not applying on WAMP stack Unable to write in directory Laravel Mac $PATH 環境變量設置及查詢 日後遇到其他問題會再持續更新","link":"/en/2018/07/Laravel-Linux-佈署問題筆記/"},{"title":"Laravel 產生簡易XML筆記","text":"最近在寫串接功能時，遇到需要使用Laravel動態產生XML的功能，完成後做個筆記，除此之外也能拿來產生網站組織架構的Sitemap，讓Google等搜尋引擎能夠更有效率的爬你的網站頁面。 How假設要使用Laravel產生如下的簡易產品清單XML： 123456789101112131415&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;products&gt; &lt;Product&gt; &lt;Name&gt;Product_1&lt;/Name&gt; &lt;Description&gt;Product_Description&lt;/Description&gt; &lt;URL&gt;https://mywebsite.com/Product_URL/&lt;/URL&gt; &lt;Price&gt;1000&lt;/Price&gt; &lt;/Product&gt; &lt;Product&gt; &lt;Name&gt;Product_2&lt;/Name&gt; &lt;Description&gt;Product_Description&lt;/Description&gt; &lt;URL&gt;https://mywebsite.com/Product_URL/&lt;/URL&gt; &lt;Price&gt;1500&lt;/Price&gt; &lt;/Product&gt;&lt;/products&gt; 首先在 resources/views 裡建立一個 product_list.blade.php 視圖，用來顯示XML的內容 (“product_list”名稱可自訂)。 內容如下： 12345678910111213&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;products&gt; &lt;!-- 利用foreach印出所有產品資訊 --&gt; @foreach($products as $product) &lt;Product&gt; &lt;Name&gt;&#123;&#123; $product-&gt;name &#125;&#125;&lt;/Name&gt; &lt;Description&gt;&#123;&#123; $product-&gt;description &#125;&#125;&lt;/Description&gt; &lt;!-- 利用 Request::root() 取得網站URL --&gt; &lt;URL&gt;&#123;&#123; Request::root() &#125;&#125;/product/&#123;&#123; $product-&gt;id &#125;&#125;&lt;/URL&gt; &lt;Price&gt;&#123;&#123; $product-&gt;price &#125;&#125;&lt;/Price&gt; &lt;/Product&gt; @endforeach&lt;/products&gt; 然後建立一個Controller(名稱自訂，這裡範例使用ProductController，跟處理顯示商品同樣的控制器)。在Controller裡建立Function用來取得資料並傳送給View裡的視圖顯示。 123456public function productList() &#123; // 取得商品資訊, 並以id作降冪排序 $products = Product::orderBy('id', 'DESC')-&gt;get(); // 將資料交給product_list.blade.php產生XML內容 return response()-&gt;view('product_list', compact('products'))-&gt;header('Content-Type', 'text/xml');&#125; 最後在route/web.php裡加上路徑 1Route::get('/product_list.xml', 'ProductController@productList'); 到這邊大功告成，打上網域名+/product_list.xml就可以查看XML所產生的XML了！ 注意事項如果像此方法利用Blade模板產生XML要注意在PHP的php.ini 設定中 Short Open Tag (&lt;?) 選項要關閉，如果必須打開此選項的話可以改用以下寫法來產生XML Header： 1&lt;?php echo '&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;'; ?&gt; 參考資料Generate a Simple XML Sitemap Using Laravel","link":"/en/2018/06/Laravel-產生簡易XML筆記/"},{"title":"Brainwavz B2 BeatsX W1晶片無線改裝","text":"前陣子買了Airpods來玩玩，發現Apple的W1晶片真心強大, 連接方便穩定, 延遲非常低(可以看影片的那種), 續航力優秀 不過音質就只能說比Earpods好一點點，然後貴了五倍價格。 Beats被Apple收購後他們的無線耳機也都使用了W1晶片，聲音也提升了(說好當然CP值也是沒多高，不過至少不是只會發出聲音的髮箍(笑)，之前BTS買電腦時剛好送了Solo 3 Wireless，試聽了一下聲音真是跌破眼鏡 其實是之前太差，靈光一閃想到如果把W1晶片改裝到一般耳機上或許能解決平常市面上大多數藍芽耳機續航&amp;音質&amp;穩定延遲的問題。 Google了一下相關資料，果然Head-Fi上有人也有這個想法並且實踐成功了，他用的是BeatsX，後來在考慮價格與改裝方便性上的確是BeatsX最適合做入耳式的改造，於是我也去收了個二手的BeatsX。 利申一下我不算是多專業的燒友，以前稍微玩過而已，現在已經少碰。聲音相關感覺因人而異本文章僅提供改裝技術交流 過程紀錄首先確認好BeatsX能發出聲音後，從音控後方爽快的剪下去吧！ 破壞東西就式特別的爽 這次要變成無線的是伴我多年的Brainwavz B2(不知道的童鞋，這隻聲音跟DBA-02一樣，同一家代工廠)。 很久以前因為線材掛了所以我把它做成可換線式的(MMCX接口)，想法很簡單，BeatsX的W1晶片與線控區後面先接上CM插座-&gt;自製CM公 to MMCX公線材-&gt;B2單體(MMCX母)，有人可能想問為何中間要多一段CM，主要是希望以後能夠做擴充(CMtoCM)這樣兩種都能使用，至於稍微影響的音質，藍芽耳機要求的是方便不是嗎lol? 剪開麵條線材後發現裡面有五條漆包線+兩條強化抗拉線材在一旁，不是很好處理所以撥線長度大概要1~1.5CM會比較好操作。 線材定義在測量過後發現在最外兩側的分別是紅色信號輸入跟黑色GND(不算強化線材)，中間三條應該是線控的，不過兩邊都有可以不理會直接剪掉。 接著焊接上其他測試用單體試試看有沒有接錯，聲音是否正常。 焊上CM母座。 CM公插。 同場加映幫朋友改的CM公插，太久沒焊了，有點傷眼sry囉。 完成！ 眼尖的童鞋可能發現了，由於發生了點小插曲所以之前買的MMCX插針沒法用，只好把一條幾年前去Oyaide買材料的自製線拆了撐一下，到時候在幫他買個殼QwQ。 幫朋友改的CM版BeatsX 感想聲音挺不錯的，不過也是不建議給阻抗大或不好推的耳機使用，除了耗電外可能聲音也推不太開。 有W1晶片，續航延遲都比市面上絕大多數的藍芽耳機好不少，此改造又兼顧了一定的音質，可謂大成功啊！ 參考資料Head-Fi - Apple Beats X mod for IEM","link":"/en/2018/09/Brainwavz-B2-BeatsX-W1晶片無線改裝/"},{"title":"MacOS強制外接螢幕輸出RGB","text":"之前發現Mac外接螢幕的灰階有點奇怪，感覺反而沒在Windows上順暢，於是Google了一下發現原來MacOS用HDMI接非Apple官方認可的螢幕時會當成電視用YCbCr輸出而不是RGB，所以會造成顯示器顏色上出現問題或是字體渲染不清的情況。人性化的系統 一開始想說Retina用的字體到1080p上會比較糢糊是正常的就沒特別注意到，顏色部分因爲我的螢幕（EIZO EV2450）也有支援YCbCr 4:4:4輸入又開著TrueTone，所以平常也沒特別看出有問題。既然是電腦螢幕那還是乖乖修改成RGB輸出吧嗯！ How下圖是初始的顏色設\b定： 在做之前我們需要先關閉 MacOS 的 Rootless 功能（如果會用\b sudo 也可以不關，直接往下的步驟） 關閉 MacOS 後，按住 CMD+R 開機，上方Utilities選單找到Terminal開啓，輸入 csrutil disable \b，在重新開機就可以了，做完步驟後\b可以再用一樣的方法開啓（改成輸入 csrutil enable ）。 首先下載 \bEdid-Patch 確定外接螢幕接上 Mac 打開Terminal，進入下載\b edid-patch 的資料夾（不會的可以直接放在家目錄），然後執行 ruby patch-edid.rb 。 然後會在同目錄下產生一個資料夾 DisplayVenderID-xxx\b ， 打開Finder按 Cmd+Shift+G 前往目錄 /System/Library/Displays/Contents/Resources/Overrides，把\b剛才產生的資料夾放進去。(沒有關閉Rootless的話可以用 sudo cp 移動資料夾) 重開機，看一下\b顏色設定確認\b強制RGB後就完成了！（有\b關Rootless記得開回來） P.S. 我的EV2450強制RGB後發現對比很奇怪，後來螢幕上的設定看了一下原來Range Extension預設Auto，設定成關閉後，螢幕就正常了\b！ 經過強制RGB後灰階也正常囉。 參考資料Github - adaugherity/patch-edid.rb Force RGB mode in Mac OS X to fix the picture quality of an external monitor","link":"/en/2018/10/MacOS強制外接螢幕輸出RGB/"},{"title":"Macbook Pro 2018 Color Banding 問題","text":"在測試螢幕RGB設定時順便測試了一下MBP2018的螢幕效能（一開始來只有看有無亮暗點），發現了在Gradient測試下居然出現了明顯的Banding現象…如下圖。 Gradient Test都有在瀏覽器跟Photoshop內做測試，MacOS部分有另外在Safari測試 測試時皆爲最大亮度 自己的MBP2018 13”預設色彩設定檔測試值RGB(0,0,0)-&gt;RGB(100,100,100) 朋友的MBP2018 13”預設色彩設定檔測試值RGB(0,0,0)-&gt;RGB(100,100,100) 借來的MBP2017 15”預設色彩設定檔測試值RGB(0,0,0)-&gt;RGB(100,100,100) 工作螢幕EIZO EV2450，接MacOS 強制sRGB色彩設定檔（非YCbCr）測試值RGB(0,0,0)-&gt;RGB(100,100,100) 副螢幕DELL P2214H，接Windows10 預設sRGB色彩設定檔測試值RGB(0,0,0)-&gt;RGB(255,255,255) iPad Pro 2017 10.5”測試值RGB(0,0,0)-&gt;RGB(255,255,255) 另外上面兩台18年MBP查詢發現應該都是三星的面板，不確定供應商是否影響，有待\b\b確認。 查詢面板方法(Pro Retina)： \bioreg -lw0 | grep -i &quot;DisplayVendorID&quot; Mojave若遇到錯誤可以安裝XCode開發工具解決 xcode-select --install Samsung ID：1552 LG ID：7789 以上結果可以看出現Color Banding應該也不是個案，而且iPad螢幕雖然開到最亮也會有稍微的Banding情況，但都沒有MBP嚴重，雖然平時外接不影響但是這價格的筆電螢幕出現這種問題還是令人不太舒服啊……上網找都是2010左右的討論，後來好像都沒聽說有人提起(ry 參考資料\b測試網站 The Lagom LCD monitor test 檢查MacBook的LCD面板製造廠商（包含Air &amp; Pro Retina） macOS Mojave: invalid active developer path","link":"/en/2018/10/Macbook-Pro-2018-Color-Banding-問題/"},{"title":"YD68藍牙機械鍵盤組裝及心得","text":"最近想找一把60%的機械鍵盤來換掉之前的Ducky One RGB，當然Ducky One還是一把不錯的鍵盤，主要考慮到想弄個Mac/Win通用配置的，以及我桌子上東西有點多（繪圖板跟筆電）60%可以省下桌面不少空間。 #需求 這次選鍵盤的主要需求是 60% 藍牙雙模 可自定鍵位 需要有正常配置的方向鍵（Win下需要，之前用過Shift當up的很不習慣） 希望除了60%能有多幾個按鍵，繪圖時Del之類可以不用組合鍵就能完成 翻找了一下發現YD68是目前最接近我需求的，而且接口是Type-C，不過比較可惜的是藍牙只有3.0（有看到GH60 BLE4.0的），也支援單色背光跟底部有RGB燈，不過這次不打算搭配透光鍵帽所以背光功能就先放一邊了。 以下是收到的YD68套件，PCB本體、腳墊螺絲、定位版、塑膠外殼、衛星軸、另購的櫻桃軸（青與茶）、電池（我買的時候賣家少寄）。 過程 鍵盤軸體佈局。 記得要先裝衛星軸。 PCB背面，把軸體焊上。 接下來準備加上電池。 要先把塑膠殼的加強筋剪掉一部分，先量好長度，剪下去之後再直接推斷即可。 最後在旁邊加上緩衝，將電池黏上。 上鍵帽！完成！ 這次用的是KBDfans買的Dolch配色PBT鍵帽（OEM高度），市面上看到的好像大部分Dolch都是原廠高度，比較喜歡OEM，覺得原廠高度太平了。不過感覺這個ESC字體顏色可以再深一點更好，還有Shift的圖案感覺跟字體有些不搭。 因爲是要給Mac用的，所以順便買了Mac的增補鍵，（補充下YD68的一些規格可以跟TADA68規格共用），也是除了字體不太統一（我說怎麽連Opt跟Cmd都能不太一樣XDD），其他基本上都不錯。 刷鍵位的線上工具在這裡 http://ydkb.io/ ，網站上也有教學就不細說了。目前RGB LED的顏色控制我自己試不太出來，不確定是Bug或是我操作太差，有後續心得再回來補充。 藍牙部分連接穩定度與雙模切換速度都還不錯，不過有少數時候會稍微明顯一些的Lag不確定是我這邊干擾多的原因還是怎樣，可能還要多測試才能確定。 關於在Win跟Mac之間切換，我建議鍵盤直接按照Win的設定，然後到Mac內對調Cmd與Opt的位置，這麼做的原因是因爲改Mac鍵位會比Win上要來的簡單很多。 （另外我也順便把Ctrl跟Caps Lock對調了，類似HHKB配置） 同場加映鍵盤包！感謝觀看！ 目前遇到了點小問題，不確定是個案或是PCB設計問題，R1那排有機率發生連點，原因還在調查中，想入坑的可以多考慮一下（國外跟對岸都沒看到有相關案例）","link":"/en/2018/10/YD68藍牙機械鍵盤組裝及心得/"},{"title":"利用 BetterTouchTool 在 Touchbar 上顯示 CPU 溫度","text":"TouchBar?覺得很雞肋的話，不如手動讓他實用吧！ How 下載 osx-cpu-temp 。 進入下載的資料夾後執行 sudo make install 安裝。 在 BetterTouchTool 裡新增 Widget/Gesture，選擇 ‘Run Shell Script and Show Return Value’。 雙擊打開進階設定，更改 LaunchPath /usr/local/bin/osx-cpu-temp ，下方可以調整更新間隔（預設5秒）。 選擇要不要新增icon跟其他外觀設定，完成！ 參考資料Display CPU Temp","link":"/en/2018/10/利用BetterTouchTool在Touchbar上顯示CPU溫度/"},{"title":"Delux Designer 單手機械鍵盤使用心得","text":"個人平常電繪認爲最不可或缺的就是快捷鍵，可以在各種工具間快速切換也是電繪能夠大幅提升效率的原因之一。不過因爲繪圖板有一定大小，加上鍵盤螢幕桌面空間不夠大的可能會不好調整，尤其用繪圖螢幕的更難舒適的擺放鍵盤，所以很多人會希望有個小的單手鍵盤可以在狹小的空間也能輕鬆的按快捷鍵來提升工作效率。 Designer 單手機械鍵盤目前市面上最多人用的單手鍵盤應該是某蛇的單手遊戲鍵盤，不過我覺得價格有點高加上有點醜，雖然是\b比較符合人體工學，但還是想找個便宜又好看的玩玩。之後在社群網站上發現了今天的主角「 Delux Designer 」單手鍵盤的廣告，後來\b在Kickstarter上集資我就衝去\bBack一個，記得Super Early Bird價格約60USD的樣子，相對於其他單手鍵盤算是便宜了不少，外觀也不錯（當然某寶上也有不少便宜的單手鍵盤，不過就方方正正的一堆按鍵\b不是很喜歡）。\b\b這邊附上KS募資頁面裡面也有產品介紹：Delux Designer - The Perfect Assistant for Designers 辛苦的群募過程一開始感覺挺順利，24H內就募得所需的\b資金，然而原本預計7月能拿到，卻硬生生的拖了一陣子。我的贊助編號是個位數的，卻等到8月初才拿到，想想就算了反正募資有風險，如果不是詐騙那晚一點\b還是能夠接受。但是拿到後才是麻煩的開始……\b \b當我興奮的打開包裝才發現原本問卷選的黑灰色版本，居然成了白色（包裝外註解還寫着BLACK），不得不說是看到有深色可選才決定下單試水溫的，這下要處理國際運算又很麻煩，沒想到的是看了看討論區居然許多人遇到跟我一樣的錯色問題，而且留言\b還被募資者無視（ry 再過了一個月後，看著許多人顏色收錯就算了，居然很多人都還沒收到，回應也相當緩慢，甚至我都拿到東西隔了很久才收到寄件編號，徹底無語。就在準備放棄之時他們終於回了Mail，表示因爲是初次群募所以處理的不是很好（可是他們介紹自己是創立逾十年的公司了？），希望收錯顏色的能夠理解看能不能\b接受不同的顏色，寄錯顏色又被放了鴿子一個月才回覆當然受不了，表示希望還是想要深色版本，橋了橋才終於讓對方寄正確的顏色過來，算是告了個段落（雖然我看討論區還有人沒收到……） 外觀聽了上面的碎碎唸，現在來看看產品本身吧。 簡單拍個包裝以及內容物： 內容物有：\bDesigner鍵盤本體、USB-C\b編織\b網傳輸線、說明書、募資達$100,000(HKD？)目標的收納袋 \b \b目前階段只有一種軸體可選：凱華巧克力白軸，之前沒碰過這種Low Profile軸，打起來還不錯，類似青軸，有段落，但也是挺吵的，\b如果想要安靜使用可能不適合（咖啡廳之類，絕壁會被白眼XD），除非之後有其他軸體可選。目前我還不敢拆來看\b，理論上能拆是能換軸就是。 鍵帽的部分也是意外的不錯，我原本以爲是廉價ABS感，結果摸起來是霧面但很滑順也挺有質感的，不過用久了會不會打油之類可能要過陣子才能知道了。 背光只有白光，發光\b模式\b目前有三種：全亮、呼吸、點擊發光，用Fn+Mode鍵切換\b，Fn+Esc可以關閉背光，轉盤部分\b只能常亮或關閉，\b角度小一點看其實轉盤挺刺眼的……希望之後的更新能夠調整亮度。 本體的做工還算\b不錯，這價格用鋁製機身已經不錯了，雖然我原本以爲鋁材表面打磨的會更細膩些。側邊\b是塑膠圍繞，邊上\b鑲着\b\b銀邊挺有水果風（類似iPad那種），白色的邊緣摸起來有種滑順的觸感，黑色就是普通的霧面塑膠，底部也有\b六個防滑腳墊。 對於線材不是隨便給條看起來廉價的塑膠線這點我是挺驚訝的，不過我自己喜歡用L插所以還是換成自己的USB線。 搭個Macbook很適合，尤其在沒辦法放整把鍵盤的地方這東西簡直是蝶式鍵盤救星！（看那閃瞎的轉盤……） 目前只有設計給右撇子用的，如果左手拿筆可能得在等等看之後會不會出了。 使用心得手感使用上其實比較適合手小的，手大點放不到掌托，而且因爲鍵帽幾乎是平的又比較緊密，手感一定沒有傳統高度機械鍵盤按起來舒服，\b爲了輕薄好攜帶還是得犧牲點東西。 \b 鍵區Layout部分（參考設定圖），上方是模式控制區：Num（數字區）、M1～M3（模式1～3）下方除了修飾鍵（Modifer）外都能自定義，支援巨集設定（Macro），然而這部分就出現了個問題，在MacOS下沒辦法使用Command鍵……這點就神奇了，他們的目標客群是\b創作者跟設計師，相關人士使用MacOS的不少，然而這設定讓這鍵盤在MacOS下幾乎沒法用，而且也無法像Windows上那樣修改設定（有不少人提及此問題，目前是說下一版本驅動會改善），然後Windows上驅動有時也會出現Bug，不過至少算是堪用。 雖然有問題但是MacOS目前有個方法能使用，由於修改鍵位比Windows方便不少，所以可以參考下圖改變該鍵盤的Modifer位置就可以暫時撐著用： 然後\b驅動無法設定可能就要去Windows設定鍵位以及巨集了（ry 轉盤部分無法自定義是硬傷，也是許多\b贊助者詬病之處，目前只能長按轉盤中間按鈕叫出下圖的選項來選擇預設的幾種功能（同樣說下版本驅動會提供自定義轉盤功能）。 還有\b看不少人討論目前不支援4k解析，也得等更新了。 其他基本功能上是沒什麼大問題，也不會有延遲的情況，若上述問題能改善其實整體算是相當不錯的單手鍵盤，而且能夠接上iPad使用沒問題呢！（iOS11、12皆可）雖然要買轉USB，但這樣用CSP時終於不用另外在找藍牙鍵盤囉XD而且新的iPad Pro\u001d換成USB-C應該更方便了，\b跟我一樣離不開快捷鍵的同學們可以考慮看看這種方式。 之後在考慮看看要不要自幹改藍牙好了，不然iPad轉接也是不太理想。 結論Designer的想法不錯，不過執行力欠佳，驅動草率尤其MacOS部分，但若\b修正上述軟體跟自定義問題，我覺得這價格算是挺值得一試的。硬體還有些許改善空間，轉盤感覺穩定度跟轉動的手感可以更好，若是未來能加入藍牙功能那操作自由度會更高更方便。某蛇的單手鍵盤，如果預算夠、需要長時間使用、沒有攜帶需求，還是可以的，反之可以考慮Designer這種。 至於單手鍵盤用一用的心得，很適合用繪圖螢幕的人使用節省桌面空間，或是鍵盤跟繪圖板位置不好擺放的使用者。當然這種可自定也支援各種軟體，利用巨集做workflow，只要你能按快捷鍵的軟體都行，畢竟說到底還是個鍵盤，要拿來畫2D3D、玩遊戲之類能想到都行（雖然我覺得這東西拿來玩遊戲根本：要玩去買某蛇吧），雖然官方說用這個能提升80%生產力我是不信啦XD大概有個40~60%左右就很好了。 至於募資的部分，這次募資的售後方面實在感受不好回應又慢，雖然都算客氣，但下次如果要贊助他們家的商品可能就要多多考慮了吧。 感謝觀看！","link":"/en/2018/11/Delux_Designer_單手機械鍵盤使用心得/"},{"title":"Google Pixel USB-C Earbuds 耳機開箱","text":"前陣子Google\u001c發表會發佈了Pixel 3的消息，這次臺灣也在上市清單中，雖然買不起不過上Google Store晃了下發現這次手機附的Pixel\b USB-C耳機也有單獨販賣，售價NT990跟Apple的\bEarpods差不多，身爲G粉雖然買不起手機（還有XL的瀏海好醜我實在太失望了）但是這還是能充值一下信仰的！二話不說就跟朋友一起下訂，\b但是送貨過程坎坷，一下是延期出貨一下是卡海關，\b硬是等了兩個多禮拜才終於收到(ry 開箱簡單拍一下包裝： 順帶一提，這防僞標籤找個角度就會出現Google的經典配色，很有趣。 拆箱！ 接着把上蓋提起，下面是一些安全跟保固說明小冊子，說明書在裝耳機的蓋子上。 本體，耳機的部分除了最外面圓形那片蓋子是霧面的大部分是亮面，上方有G字樣Logo，不過不仔細看不清楚就是了，耳殼外觀其實挺像Apple的設計。 BTW上面耳機線套了\b透明軟管繞個小圈可以調整大小，符合各種耳型。 佩戴方面相當的輕，比Airpods戴起來更無感，很舒服，甩動\b跑跳也不容易掉落！線材部分比我想象中細了點，大概跟Earpods差不多吧，不知道用久會不會發黃。 線控部分一面是亮面，按鈕側是霧面，中間除了接聽電話跟播放暫停音樂外，長按可以呼叫Google Assistant，但我覺得中間按鈕設計不是很好，太小容易按到音量控制，一開始測試的時候不小心按到增加音量差點被\b嚇到XD。 \b雖然官方網頁上寫著搭配Pixel才能發揮最大功能，但是我接在Asus Zenfone 4 Pro上也沒有任何問題，GA呼叫也OK。所以看來搭配Pixel什麼的果然只是話術 按理說只要有Type-C音訊輸出的裝置都能用，所以我順便裝上MBP試試，功能也完全支援！呼叫Siri也沒問題，而且甚至比Airpods好，我用Airpods在MBP上叫Siri是聽不到Siri說話的，要從螢幕看，但Pixel Earuds就可以直接聽到Siri與其對話。 另外在iPad上用Airpods呼叫Siri時雖然聽的到Siri說話，但聽起來會變成單聲道而且音質變差，Pixel Earuds叫Siri聽起來很正常（接Macbook Pro）不知道是不是有線耳機的關係。還有一點：Airpods在切換音樂跟語音助理的過程是很僵硬的停掉音樂，Pixel Earuds卻有FadeIn、FadOut的效果，跟在Android上叫Google Assistant體驗一樣好，\b小細節聽起來舒服多了。 說完優點也該說說缺點了：音質不怎麼樣，Airpods的音質普普差不多1k左右的價位，Pixel Earbuds聽起來更差，低頻下潛、高頻跟人聲等幾乎全輸Airpods，\b對一般人聽起來可能\b還行或普普就是，但CP值相比之下確實不高，當然也有可能是因爲初開聲還沒RunIn的關係，不過在意音質的朋友基本上不用考慮了。 雖然早料到音質不怎麼樣，但畢竟爲了細信仰嘛沒什麼大不了能不能聽其次有Logo最重要\b。 最後來張\b跟Airpods的合照，作爲一個NT990的Google線控Type-C耳機我覺得還是可以考慮的，雖然我沒用過其他的Type-C耳機，\b不過不用說”Hey Google”就能直接呼叫GA\b真的挺方便的，不用像Airpods\b敲了還要”Hey Siri”才會理你，在外面尷尬度破錶（後來發現都是按鍵或敲擊就有了，不用另外呼叫），可惜以音質來說的確是不怎麼突出就是。 結論：有需要Type-C耳機或呼叫GA功能、而且對音質沒那麼要求的朋友可以考慮看看Pixel Earbuds，還有\bGoogle信仰者不收說不過去啊，價格適中，音質殘念（BTW耳塞式基本上不用考慮隔音了，有降噪需求的也可以跳過），防水部分沒測試不過我覺得戴着運動\b基本上也蠻適合的！ 有興趣的可以自行去Google Store看看，感謝觀看！","link":"/en/2018/11/Google-Pixel-USB-C-耳機開箱/"},{"title":"利用Applescript快速切換TrueTone","text":"2018 Macbook Pro終於可以使用原先發佈在iPad Pro的True Tone功能，讓螢幕偵測周圍的光線來改變螢幕顏色，使用上相當舒服。不過如果要使用影像處理\b\b或繪圖等對顏色準確度有需求的工作時就得把它暫時關掉才不會影響，然而每次都要進入設定調整也是挺麻煩的，不如利用Applescript爲我們代勞。 How\bGithub - Ture Tone Toggler \b目前還找不到如何透過command line設定True Tone，所以用Applescript控制設定，可以把它跟BetterTouchTool結合，利用快捷鍵或Touchbar之類快速開關True Tone功能。 此程式碼修改自Reddit上的一篇討論，我加上判斷以及提示的功能，讓使用者可以明確知道現在操作是開啓或關閉True Tone。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647tell application \"System Preferences\" if it is running then quit end if end telldelay 0.2activate application \"System Preferences\"tell application \"System Events\" tell process \"System Preferences\" click button \"Displays\" of scroll area 1 of window \"System Preferences\" delay 0.8 click radio button \"Display\" of tab group 1 of window \"Built-in Retina Display\" set TrueToneCheckbox to checkbox \"True Tone\" of tab group 1 of window \"Built-in Retina Display\" click TrueToneCheckbox set TrueToneState to \"ON\" tell TrueToneCheckbox if not (its value as boolean) then set TrueToneState to \"OFF\" end tell end tell quit application \"System Preferences\" end telldisplay notification \"True Tone \" &amp; TrueToneState with title \"True Tone Script\" sound name \"Submarine\"delay 0.8say \"True Tone has been turned \" &amp; TrueToneState 有需要自定義通知的部分可以修改 display notification 的部分，不想要語音提示可以註解掉 say 那行。 參考資料Reddit: Has anyone figured out how to return the true/false status for True Tone with AppleScript Displaying Notifications","link":"/en/2018/12/利用Applescript快速切換TrueTone/"},{"title":"利用 SFTP 在 Android 上存取 MacOS 檔案","text":"上一篇提到了如何利用 M\bacOS 本身自帶的檔案分享功能搭建 SMB 進行分享，不過因為一些 MacOS 自帶 SMB 的一些 bug 所以 Android 的用戶就沒那麼方便了(\bApple你到底修不修)，幸好有另一種方法\b，也就是本文的主題：利用 SFTP\b 在 MacOS 上搭建檔案分享伺服器。 MacOS 搭建 SFTP \b伺服器\b首先同樣進到系統設定(System Preferences)，接著選擇分享(Sharing) 在這邊我們不選擇檔案分享 (File Sharing) ，而是選擇遠端登入 (Remote Login) 這時我們會看到下方有一行資訊顯示”ssh username@192.168.xxx.xxx“類似的相關字串(\b依照IP跟使用者而定)，這邊先記下我們的區網IP。 接著就可以切換到 Android 端，這邊用 ES File\b Explorer 做示範 側邊欄選擇 FTP\b ，接著按右下角加號新增伺服器 Server\b 欄\b輸入剛才記下的區網 IP，Port 預設 22 沒改動就維持原樣然後填入\b電腦帳號密碼按下 OK 就能夠成功連上看到 MacOS 裡的內容囉。 \b 參考How to Browse/Share Files on Mac and Android with ES File Explorer SFTP","link":"/en/2019/09/利用SFTP在Android上存取MacOS檔案/"},{"title":"在 MacOS 上搭建 SMB 簡易檔案分享伺服器","text":"有時候會想要在iPad上無線存取一些電腦裡的檔案，卻沒有NAS或在外面不方便，其實 MacOS 也有提供像 Windows 網路芳鄰的檔案分享功能，而且設定操作非常簡單，步驟如下。 MacOS 搭建 SMB \b伺服器首先開啟系統設定(System Preferences)，接著選擇分享(Sharing) 接著勾選左邊的檔案分享(File Sharing) 在分享資料夾列表下面，點選\b\b”+”符號可以新增要分享的資料夾 接著其他電腦就會像網路上的芳鄰一樣，能夠存取分享的檔案了！行動裝置的話，iOS可以利用檔案管理的App來進行存取，這邊用的是Documents來做示範。 開啟 Documents 後，選擇附近的裝置(Nearby)，可以看到同網域下的電腦(SMB Server)列表，點進去登入電腦上的帳號就可以對分享檔案進行存取了！ 備註要特別注意，如果使用的是 Android 系統，利用 MacOS 本身自帶的\b SMB Server 是無法連上的，一開始我以為是設定錯誤，結果爬了文才發現原來這問題已經存在很久了，不過 Apple 看起來沒要修復的打算(ry 所以下一篇就要來介紹如何利用 SFTP 讓 Android 也能同樣輕鬆存取 MacOS 上的分享檔案囉！ 參考How to connect with File Sharing on your Mac","link":"/en/2019/09/在MacOS上搭建SMB簡易檔案分享伺服器/"},{"title":"利用 Raspberry Pi 搭建 NAS","text":"Sorry, this post in currently in Chinese only :( 就只是個基於 Samba 的簡易 NAS 架設過程，沒有任何動靜。 BTW 目前還是使用 Pi3B ，升級後會在補上 Pi4B 速度的差異心得。未來打算再裝上 Aria2 讓 Pi 具有下載機的功能。 準備工作首先安裝好最新的 Raspbian Lite 版本，開機後先進行基本設定（ 可以單純ssh操作省去外接的麻煩，關於headless可以參考我之前的文章：Raspberry Zero W Headless 自動連上無線網路與開啟SSH ） sudo raspi-config 把預設密碼之類改一改，還有地區之類等基本設定。設定完後先更新一下套件。 sudo apt-get update &amp;&amp; sudo apt-get upgrade 外接硬碟設定首先用 lsblk 找到要當 NAS 硬碟及分區(這邊是 sda2 代表 a 磁碟的 2 號分區) 格式化為 ext4 格式，這邊推薦用 ext4 效能最好（最近在做 NAS 優化，發現XFS的效果會更提升一些，可以參考XFS 檔案格式） sudo mkfs.ext4 /dev/sda2 有些人可能會有疑問，如果用 ext4 會不會讓我無法在其他系統上讀取，這部分並不用擔心，因為這個硬碟格式只是給 Server 讀取寫入用的，客戶端支援的檔案格式不會影響到 建立掛載點 sudo mkdir /mnt/Share 查看硬碟分區的 UUID 並把它複製下來 sudo blkid 編輯 fstab 添加掛載資訊 sudo vim /etc/fstab 在最底行填上（”YOUR_UUID”替換成剛才複製的UUID） UUID=YOUR_UUID /mnt/Share ext4 defaults 0 2 掛載硬碟(分區) sudo mount -a 查看掛載狀態是否正確 df -h 最後開啟硬碟權限 chmod 777 /mnt/Share 設定 Samba Server接著安裝 Samba sudo apt-get install samba samba-common-bin 完成後編輯 /etc/samba/smb.conf sudo vim /etc/samba/smb.conf Global 部分填入限制使用者登入才能存取的設定 12[global] security = user 在文件最下面填入如下的分享目錄設定 1234567[share] Comment = Pi Shared Folder Path = /mnt/Share Browseable = yes Writable = yes guest ok = no valid users = username PS：valid users 後面替換成自己的 username。 接著我們要加入 smb 的登入帳號： sudo smbpasswd -a username 依照提示輸入密碼設定完成，最後重啟 Samba 服務完成設定。 sudo service smbd restart 都設定完成後就可以在 Windows 網路芳鄰上看到 NAS 了（由於有限定使用者，要同樣帳號名稱密碼才能進的去，若要不希望限定帳號記得在 smb.conf 把 guest 功能打開） MacOS 的話則在 Finder 下按 CMD+K 填入 smb://raspberrypi.local/Share ，輸入剛才設定的 smb 使用者帳號密碼即可連入 NAS 。 補充XFS 檔案格式安裝 XFS 工具 sudo apt-get install xfsprogs 格式化 sda 硬碟為 xfs 格式 sudo mkfs.xfs -f /dev/sda 查看掛載狀態 df -h 本地硬碟讀取速度測試安裝 hdparm sudo apt-get install hdparm 測試讀取： hdparm -t /dev/sda 測試寫入： hdparm -t --direct /dev/sda 參考Browse Raspberry Pi in OSX Finder via Samba How to restart samba server? How to create and mount an XFS file system on Linux hdparm 測試硬碟讀寫速度","link":"/en/2019/10/利用RaspberryPi搭建NAS/"},{"title":"Why_My_Account_Got_Hacked_-_The_Password_Security_and_Physical_Key","text":"Sorry, this post in currently in Chinese only :(","link":"/en/2020/02/Why-My-Account-Got-Hacked-The-Password-Security-and-Physical-Key/"},{"title":"Logitech_Master_2S_Gesture_Button_Fix","text":"Sorry, this post in currently in Chinese only :(","link":"/en/2020/02/Logitech-Master-2S-Gesture-Button-Fix/"},{"title":"macos-app-cant-be-opened","text":"Sorry, this post in currently in Chinese only :(","link":"/en/2020/06/macos-app-cant-be-opened/"},{"title":"A Better Server Status Monitoring Tool - Glances (htop/top Alternative)","text":"Recently, I’m looking for a temperture and cpu status monitor for my Pi nas server. vcgencmd command and htop get the jobs done, but it’s always better to have them in the same window (htop can’t show temperture which bothers me alot). So I found an cross-platform, python-based htop alternative - Glances, it’s easy to install and super handy. The only downside is that it uses a bit more cpu resources than I expected (on Pi4 4GB version). InstallationIn Linux (Debian, Ubuntu, etc.) you can simply use apt-get to install. sudo apt-get install glances If you have Homebrew installed on MacOS, use brew to install. brew install glances Note that I have run into some trouble when installing on MacOS, it shows the error message like this: 1234Traceback (most recent call last): File \"/usr/local/Cellar/glances/3.1.3/libexec/bin/glances\", line 6, in &lt;module&gt; from pkg_resources import load_entry_pointModuleNotFoundError: No module named 'pkg_resources' After googling, post-install should solved the problem. brew postinstall python3 Windows need to install python first, and use pip to get glances pip install glances UsageHost modeOpen Terminal and run glances glances Show RAW JSON status glances --stdout cpu.user,mem.used,load or in CSV format glances --stdout-csv now,cpu.user,mem.used,load Enter q or Esc to quit Server/Client ModeServer side: glances -s Client side (change SERVER-IP to your own server ip): glances -s SERVER-IP Remote mode (Web-UI)Server side: glances -w Client side (change SERVER-IP to your own server ip, default port 61208): http://SERVER-IP:61208 Done! Now you can monitoring all status (including cpu-temperture) in comfort! (Image shows my Pi nas’ status) ReferenceGlances fails after brew installation: ModuleNotFoundError: No module named ‘pkg_resources’ #260","link":"/en/2019/11/A-Better-Server-Status-Monitoring-Tool-Glances-htop-top-Alternative/"},{"title":"Use Raspberry Pi to build a FAKE TimeCapsule (and NAS) - Hardware","text":"There are plenty of Mac mini case modification projects on the internet. Though the unibody aluminum housing design had been there for almost a decade, it’s still the best looking mini computer case on the market imo. In mid 2019, Raspberry Pi receive a huge update - the Pi 4. We finally got true gigabit ethernet, USB3.0 support, and a lot more. This makes Pi 4 suitable for simple NAS project (also for TimeMachine backup). So I decide to build a fake(?) TimeCapsule with Pi (at least the case is real, or should I just call it “Fake Mac mini” ? lol) This article will show how I build this project, and the issue that I ran into (hardware side, the software configuration can be found at: Use Raspberry Pi to build a FAKE TimeCapsule - Software, Use Raspberry Pi as a NAS)(haven’t translate to English yet). Idea &amp;&amp; Design I bought this used Mac mini case for cheap (around 20USD), it still in very good shape. You can buy it from ebay or AliExpress. First, let’s do some simple measure. The maximum motherboard you can put inside is around 17cm*17inch (lots of people use Mini-ITX in Mac mini’s case.) Height is about 2.5cm, for our Pi project is more than enough. Here’s the first design diagram (the hub will cause some issue so I connect the HDDs direct to Pi in final product, see Troubleshooting): All I need to do is mount these things up. So I decide to draw some 3D printed files to do the job. And here’s the diagram that shows each mounting hole’s distance I measured. Next, the HDD mount. The arm on both side aren’t strong enough, so I just cut them off. Here comes the tricky part. Unfortunately, there’s no information about the mounting screw for Mac mini case. ifixit only says it’s four 7.9mm long Torx screw, didn’t mention the shaft diameter. I tried several screw that I have, luckily, one screw can screw in and quite stable. So I can use caliper to measure it’s size: 1.7mm (You can use M1.7 phillips tapping screw instead of official torx screw) Pi mounting plate. An isolation brick to protect GPIO pins is nice to have: Make some feet under the mounting plate. The I/O shield (the plastic frame for Mini-ITX I/O shield is brought from other maker) Left side is for USB-C female connector and ethernet extender cable, right side for momentary power switch. I made some mistake about the side mounting holes on I/O shield, so just ignore it. (The ethernet extender cable’ screw can hold I/O shield in place) Also need to cut the Pi mounting plate to fit in the case. Finally, the 30mm fan mount: The STL files I used in this project can be download at: PiMacMiniCaseSTLFiles InstallationAlright, here’s the finished 3D printed items. (SLA Resin) I’ve found that the holes on I/O shield are a bit too small. So need to enlarge the Type-C and switch hole for a better fit. Sand down the surface and paint them in matte black. Ouch! There’s a crack on the edge when I try to trim it. But since it’s hide in the case, not a big deal. And I forgot the Micro SD on pi protrudes from the edge, so more trimming work need to be done. Then opens up the USB to SATA cable and cut out the VCC connect on board. Use some electrical tape to cover the board. Remember to check the pins with multimeter, make sure we didn’t ruined the cable. Screw in HDDs and test the mount. And solder the power line to Type-C connector. One for HDDs, other for Pi. Momentary switch with LED. I use 1k Ohm resistor here. About the wiring diagram you can check my other article: Raspberry Pi - Power switch, External power LED, SD Act LED(Haven’t translate to English yet) Test it! Glue the power switch and Type-C connector in place. Some simple wiring. Put on the bottom cover. Done! Bay ~ OK I think it just looks like a real Mac mini PS The max cpu temperature is around 50°C (room temp:26~28°C) TroubleshootingMac mini housing screw spec?I use phillips M1.7 x 6mm tapping screw. USB powered hub issueSome usb 3 powered hub will prevent Pi 4 from booting, here’s some discussion on Pi’s official forum: Pi 4 fails to boot when active USB switch attached. You can unplug the powered hub and plug it back. Pi will starts to boot and everything worked fine, but it’s really annoying. Some people reports that cut out the Vcc on hub can solve the issue, but I tried and nothing happened :( So I end up modify the USB to SATA cable instead. HDD and pi both using a 3A Official Power Supply？I actually connect 2 HDD and Pi to the same power source, which is an official power supply. The main reason I do this is to avoid Pi’s USB port maximum 1.2A downstream limit. I’ve measure the current drain on both HDD(w/ USB to SATA cable) and Pi, and it’s enough to be powered by a 3A power supply (my WD HDD’s peak current when activating is about 750mA) but can’t be power direct through Pi’s USB port due to 1.2A current limit. (I tried to connect direct to Pi’s USB, and one HDD fail to mount) Note that 1 HDD is fine to direct plug it into Pi’s USB port. Item list 1 x Pi 4 4GB 1 x 8G MicroSD Card for boot 1 x A1347 Apple Mac mini Case (Mid 2010) 2 x 2.5” HDD 2 x SATA to USB3 Cable 3D Printed Mount / IO Panel 1 x 30mm Fan 1 x Momentary Switch w/ LED &amp; Cap 1 x 3mm Front Panel LED 2 x Current-limiting Resistor (330Ω ~ 1kΩ) 1 x Gigabit Ethernet Network Extension Cable 1 x USB Type-C Male Connector w/ PCB 1 x USB Type-C Female Connector w/ PCB Some USB Cable (Current support 3A at least) 3 x M3 Screw &amp;&amp; M3 Hex Nut for Fan Mounting 4 x M3 Screw for HDD Mounting 2 x M3 Screw for Ethernet Port Mounting 3 x M1.7 Tapping Screw for Case Mounting w/ M2 Washer Some DuPont Line ReferenceMac Mini Mid 2010 Teardown Raspberry Pi GPIO Pinout Raspberry Pi 4 Tech Specs Power Supply Pi 4 fails to boot when active USB switch attached","link":"/en/2019/11/Use-RaspberryPi-to-build-a-FAKE-TimeCapsule-and-NAS-Hardware/"},{"title":"Using Raspberry Pi to Control a PWM Fan and Monitor its Speed","text":"A lot of people uses fan to cool down their Raspberry Pi 4, but the fan’s noise is quiet problem (in a quiet room). In most case pi didn’t need that amount of cooling performance, so we can use PWM (Pulse Width Modulation) to control fan speed and reduce the noise. WiringI use Noctua NF-A4 5V PWM, a 40mm, 5V PWM fan. Here’s the wiring diagram: Yellow: 5V Black: GND Green: RPM signal Blue: PWM signal input If your fan doesn’t support PWM control, then you can see #138 Variable Speed Cooling Fan for Raspberry Pi using PWM and PID controller or PWM Regulated Fan Based on CPU Temperature for Raspberry Pi to use a BJT transistor to use PWM control. The fan’s RPM signal is an OC(Open-Collector) circuit design (in most fan), so you’ll need a pull-up resistor to measure output waveform according to Noctua PWM white paper. Warning! The Pi has 3.3V GPIO, so your pull-up resistor must be connect to 3.3V ONLY! You will fry your Pi if Vcc is connected to 5V. The pull-up resistor that I use is 1kΩ 1/4W. The white paper says the maximum current is 5mA. According to Ohm’s Law: $V=IR$, the resistor should be 660Ω or larger to protect your fan. Most micro-controller or SBC already have a decent circuit to generate PWM signal, you don’t need special circuit to generate it. I use a Molex 2510 4PIN (2.54mm) connector to connect the fan. (Need to cut out some fool-proof board to fit.) Here’s a photo testing hardware and program on Pi 3B.` Control ScriptPWM GPIO TestI use Wiring Pi to test PWM signal. If you don’t want to test it, jump to Use PWM to Control Fan Speed. The Pi4 haven’t update to latest version of wiring-pi yet, need to update it manually. 123cd /tmpwget https://project-downloads.drogon.net/wiringpi-latest.debsudo dpkg -i wiringpi-latest.deb Version check： gpio -v The latest version when I write this post is 2.52 Read GPIO status： gpio readall Set pin 1 to PWM mode (using wiring-pi pin number: Pi GPIO Pinout). gpio mode 1 pwm Set PWM signal (number from 0~1023) gpio pwm 1 [number] Check the fan is working as you expect. Use PWM to Control Fan SpeedThe control script is on: DriftKingTW/Raspberry-Pi-PWM-Fan-Control I use GPIO18 which is the hardware PWM(12/13 and 18/19) and all other pins are software PWM. Hardware PWM and the headphone jack use the same circuits, don’t use them at the smae time. mkdir -p Scripts cd Scripts/ Download the python script: 1wget https://raw.githubusercontent.com/DriftKingTW/Raspberry-Pi-PWM-Fan-Control/master/fan_control.py python fan_control.py And make it auto start: Edit rc.local 1sudo vim /etc/rc.local Add the following line before exit 0 : 1python /home/pi/Scripts/fan_control.py &amp; The route might be different for you. Make sure you’re using absolute path. The ‘&amp;’ symbol means this script runs in background. If you don’t want to know the theory part, than go ahead to: Reading RPM Signal PWM uses square wave’s duty-cycle to reduce the average value of voltage, if the duty cycle is 50%, the fan will spin at 50% of it’s full speed; duty cycle 75%, fan 75%, and so on. More detail: Pulse-width modulation And we can take a look at the control script: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465import RPi.GPIO as GPIOimport timeimport signalimport sysimport os# ConfigurationFAN_PIN = 18 # BCM pin used to drive PWM fanWAIT_TIME = 1 # [s] Time to wait between each refreshPWM_FREQ = 25 # [kHz] 25kHz for Noctua PWM control# Configurable temperature and fan speedMIN_TEMP = 40MAX_TEMP = 70FAN_LOW = 40FAN_HIGH = 100FAN_OFF = 0FAN_MAX = 100# Get CPU's temperaturedef getCpuTemperature(): res = os.popen('vcgencmd measure_temp').readline() temp =(res.replace(\"temp=\",\"\").replace(\"'C\\n\",\"\")) #print(\"temp is &#123;0&#125;\".format(temp)) # Uncomment for testing return temp# Set fan speeddef setFanSpeed(speed): fan.start(speed) return()# Handle fan speeddef handleFanSpeed(): temp = float(getCpuTemperature()) # Turn off the fan if temperature is below MIN_TEMP if temp &lt; MIN_TEMP: setFanSpeed(FAN_OFF) #print(\"Fan OFF\") # Uncomment for testing # Set fan speed to MAXIMUM if the temperature is above MAX_TEMP elif temp &gt; MAX_TEMP: setFanSpeed(FAN_MAX) #print(\"Fan MAX\") # Uncomment for testing # Caculate dynamic fan speed else: step = (FAN_HIGH - FAN_LOW)/(MAX_TEMP - MIN_TEMP) temp -= MIN_TEMP setFanSpeed(FAN_LOW + ( round(temp) * step )) #print(FAN_LOW + ( round(temp) * step )) # Uncomment for testing return ()try: # Setup GPIO pin GPIO.setwarnings(False) GPIO.setmode(GPIO.BCM) GPIO.setup(FAN_PIN, GPIO.OUT, initial=GPIO.LOW) fan = GPIO.PWM(FAN_PIN,PWM_FREQ) setFanSpeed(FAN_OFF) # Handle fan speed every WAIT_TIME sec while True: handleFanSpeed() time.sleep(WAIT_TIME)except KeyboardInterrupt: # trap a CTRL+C keyboard interrupt setFanSpeed(FAN_HIGH) #GPIO.cleanup() # resets all GPIO ports used by this function Reading RPM SignalGithub: DriftKingTW/Raspberry-Pi-PWM-Fan-Control 1wget https://raw.githubusercontent.com/DriftKingTW/Raspberry-Pi-PWM-Fan-Control/master/read_fan_speed.py Run script and you will get RPM value every second: python read_fan_speed.py 12345678910111213141516171819202122232425262728293031323334353637383940import RPi.GPIO as GPIOimport time# Pin configurationTACH = 24 # Fan's tachometer output pinPULSE = 2 # Noctua fans puts out two pluses per revolutionWAIT_TIME = 1 # [s] Time to wait between each refresh# Setup GPIOGPIO.setmode(GPIO.BCM)GPIO.setwarnings(False)GPIO.setup(TACH, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Pull up to 3.3V# Setup variablest = time.time()rpm = 0# Caculate pulse frequency and RPMdef fell(n): global t global rpm dt = time.time() - t if dt &lt; 0.005: return # Reject spuriously short pulses freq = 1 / dt rpm = (freq / PULSE) * 60 t = time.time()# Add event to detectGPIO.add_event_detect(TACH, GPIO.FALLING, fell)try: while True: print \"%.f RPM\" % rpm rpm = 0 time.sleep(1) # Detect every secondexcept KeyboardInterrupt: # trap a CTRL+C keyboard interrupt GPIO.cleanup() # resets all GPIO ports used by this function ReferenceNoctua PWM specifications white paper NF A4x10 5V PWM Wiring Pi wiringPi updated to 2.52 for the Raspberry Pi 4B #138 Variable Speed Cooling Fan for Raspberry Pi using PWM and PID controller rxseger/tachfan.py raspberry-gpio-python","link":"/en/2019/11/Using-Raspberry-Pi-to-Control-a-PWM-Fan-and-Monitor-its-Speed/"},{"title":"替 Raspberry Pi 添加開關、外接電源燈、狀態燈，以及風扇控制","text":"Sorry, this post in currently in Chinese only :( 用 Headless 方式玩樹莓派的朋友肯定都遇過一個問題，就是每次關機都要登入 ssh 才能正常關機，懶一點的直接拔電源，就算沒問題也很麻煩（ 懶到過去延長線切電源都不肯 （欸），所以不如加個開關吧，不僅省時省力還能用正常的 shutdown 程序關機，一石二鳥豈不美哉 (:3[__]4 還有很多時候因為 Pi 裝著殼，要得知是否開機、狀態燈有沒有在閃爍並不是那麼方便，本篇也一並記錄了裝上外接電源燈、狀態燈的步驟！ 最後另外在補上風扇的控制方式（ Pi 4 工作時很熱情，大部分人可能會選擇上風扇XD ）但是溫度也不是隨時都那麼高，有了風扇控制可以依照溫度所需啟動，不但降低噪音也能增加風扇使用壽命，順便省一點點電，拯救北極熊（？）（風扇控制目前還在準備中，測試完成後會在更新電路圖） 硬體設定開關 &amp;&amp; 電源燈線路圖 SD讀取燈 &amp;&amp; 風扇（控制電路待補） 軟體設定開關（正常軟體關機程序）這邊開關的部分參考了 howchoo 上的一篇文章：How to Add a Power Button to Your Raspberry Pi，以下是直接使用作者所寫好的 Script 安裝，詳細背後的 Code 以及原理可以點進連結裡查看（英文）。 安裝 Git sudo apt-get install git 接著 clone 作者所寫好的 Script Howchoo/pi-power-button git clone https://github.com/Howchoo/pi-power-button.git 安裝即可 ./pi-power-button/script/install 電源燈進入樹莓派設定界面 sudo raspi-config 選擇 Interface Options 開啟 Serial 來允許串列讀取，這樣我們就可以利用 GPIO 上的 TXD 來讓 LED 顯示目前是否為開機狀態（直接接 5V 的話只要插上電就會亮，沒辦法判斷樹莓派是否在開機狀態） 接著重啟樹莓派即可看到電源燈正常運作了 sudo reboot SD 卡讀取燈將 SD 卡插入電腦中，打開至根目錄找到一個叫做 config.txt 的設定檔，在底部添加以下設定。最後的 GPIO 選擇自己要用的腳位即可（腳位參考） 12# Use external LED as ACT LEDdtoverlay=pi3-act-led,gpio=19 風扇控制待補 參考Add An External Sd Activity Light Raspberry Pi 3 Retropie Or Raspbian How to Add a Power Button to Your Raspberry Pi #131 Pimp my Raspberry: Automatic fan, automatic shutdown, automatic Python Build a Simple Raspberry Pi LED Power/Status Indicator IRL530N Datasheet #131 Pimp my Raspberry: Automatic fan, automatic shutdown, automatic Python","link":"/en/2019/11/替RaspberryPi添加開關_電源燈_硬碟燈/"},{"title":"Make an iPad Drawing Board That Improves Your Drawing Experience","text":"iPad and Apple Pencil combo probably has the best drawing experience in the tablet market for now, tons of people love using their iPad to create amazing artworks, but you might encounter an common issue (especially for 11 inch user): The iPad’s bezel is way too small for your hand to rest on, even it’s laid down flat on the table. Though the iPad is already very thin (5.9mm on pro model), the drawing experience is still far from drawing on a flat thin paper, and putting hand on iPad just waste a large portion of the screen, which is the main reason I come up with this project today. The result was quite good, it’s very easy to make and costs under 35 dollar, so I want to share with you today. DraftingFirst, this project is design to create a flat surface for your hand to rest on when drawing on an iPad. Most drawing tablets on the market always have some sort of bezel for hands to rest on, but it’s imaginable that Apple will never design like this on a consumption/portable tablet. Since iPad is not only for drawing purpose, so I came up with this idea: I can make myself an iPad drawing board, that is detachable when you don’t need it (like when you go on a trip and just want to watch Netflix on it), which sounds great right? Of course I’m not the first one trying to solve this issue, there’s already similar products on the market: Sketch Board Pro but the $120’s price tag is just a bit too high, and the size is too large for my table. The other one I found on Taobao is pretty cheap like around 30~40USD, but it’s very thick, heavy and most importantly, the size is too large for my table too. So I decide to make one fits myself. The goals for this project: The hand can rest on the same level with iPad’s screen Design for iPad Pro 11 inch and iPad Air 4 Won’t block any feature on iPad (buttons, speaker, etc.) iPad can attach on it with magnet As portable as possible Can use both in portrait and landscape mode The cheaper the better After serious thought, here’s my solution: The material I plan to use is linden plywood, 4 layers in total. The reason that I make the USB C slot facing outside is because it can be used with any accessory, like a Type-C hub for example. The magnet part to hold iPad is actually pretty easy to deal with, I just use third-party magnet folio cover and cut it in half, then glued onto the plate and that’s it. You can use the Apple official folio cover to get the best result but I think that’s an over kill LOL. BTW for those who interest, the folio cover I use is from UGreen, I’ve seen ESR has the same kind of product too. All of them works I think. Then use Illustrator to draw the outline of the board. 5mm Bottom plate, about $31cm * 24.5cm$ and have a notch for Apple Pencil. 3mm Bottom plate, it will glue to the top of 5mm one, it has a camera hole to fit the camera bump. The hand rest has 2 layers too, one for 3mm the other is 5mm. 8mm total is about as same thickness as the iPad plus the folio cover. And there’s a cutout at the bottom right for power button or Air 4’s finger print reader. You can support me and download the *.ai files from here 😉 Material/Tool Laser cutting linden plywood Adhesive for wood (I use 3M Scotch, you can use white glue but needs more time to dry) Folio cover Black tape (fix the cover edge after cutting) File (smooth down the edge of woods) Make it realIt’s actually almost done after we got the laser cutting plywood. Cut the folio cover and glue them together, done! You can use it with any tablet/laptop stand you want! Landscape mode: Portrait mode: It’s just what we want right? And iPad is very stable thanks to the magnet cover underneath it, the speaker and buttons works just like normal, and the cutout for the Apple Pencil works as intended, it’s very easy to take it down and start drawing. Plus the size isn’t crazy big so we can take it to the coffee shop just like taking a 13 inch laptop. The best of all, it just cost less than 35 dollar! Improvement/TodoWell, there’s still some improvement that I think is great: VESA Mount Support (many drawing stand has VESA support) More easy way to dismount the iPad Add light-weight built-in stand Thanks for reading! (〃＾＾〃) Reference Accessory Design Guidelines for Apple Devices","link":"/en/2021/03/Make-an-iPad-Drawing-Board-That-Improve-Your Drawing-Experience/"},{"title":"add-email-notification-to-valine","text":"Sorry, this post in currently in Chinese only :(","link":"/en/2021/04/add-email-notification-to-valine/"},{"title":"在 macOS 上安裝 Ruby","text":"Sorry, this post in currently in Chinese only :( 雖然 macOS 已預裝了 Ruby ，但我在使用 gem install 時遇到了個問題： 1You don&apos;t have write permissions for the XXX directory. 後來發現是 macOS 不讓使用者更變預設 Ruby 相關的玩意，用 sudo 去跑安裝當然也不是個選項，所以還是另外獨立安裝一個，再把 PATH 設定到另一個 Ruby 比較方便。 獨立安裝方法利用 Homebrew 安裝 chruby 與 ruby-install （此方法屆時可自由切換所需要的 Ruby 版本） 1brew install chruby ruby-install 接著用 ruby-install 安裝 Ruby： 1ruby-install ruby ruby-install 會自動使用 Homebrew 安裝各種需要的 dependencies，然後從 source 編譯 Ruby，所以需要等個一陣子，可以先去泡壺茶休息下 安裝完後在 ~/.zshrc 或 ~/.bashrc 中新增以下兩條路徑（看自己用的是那種 shell，macOS Catalina 之後預設皆為 zsh ） 12source /usr/local/opt/chruby/share/chruby/chruby.shsource /usr/local/opt/chruby/share/chruby/auto.sh 完成後重啟 Terminal 輸入 which ruby，若不是顯示 /usr/bin/ruby 則代表預設的 Ruby 已經不是 macOS 預設的了！ 接著我們可以利用 chruby 選擇 ruby 版本： 1chruby 3.0.0 提供給遇到相同問題的朋友們參考 參考How to Install Ruby on a Mac with chruby, rbenv, or RVM You don’t have write permissions for the /Library/Ruby/Gems/2.3.0 directory. (mac user)","link":"/en/2021/04/Install-Ruby-On-macOS/"},{"title":"Using DisplayCAL to Calibrate External Monitor on Apple Silicon Mac","text":"I’ve got myself an Apple Silicon Mac last year, although it’s really amazing but still have some compatibility issues. When I want to use DisplayCAL to recalibrate my external monitor, but the it didn’t recognize both of my external monitor. Here’s the workaround for this issue: Wrong ArgyllCMS VersionDisplayCAL will install ArgyllCMS when first launch, but it won’t recognize my external monitor: The reason why is DisplayCAL actually not install the latest version of ArgyllCMS (though it says it’s the latest) So we need to install the latest version of ArgyllCMS by ourselves and replace it (v2.3.0 when I writing this) Go to DisplayCAL and download the latest version of DisplayCAL Plug in your monitor calibrator (SpyderX in my case) It will prompt you to download the “latest version” of ArgyllCMS Cancel it and download Intel OS X 10.6 64 bit or later from ArgyllCMS Unzip the .tgz archive, and move Argyll_V2.3.0 folder to ~/Library/Application Support/DisplayCAL/dl (version might be different) Go back to DisplayCAL and choose File &gt; Locate ArgyllCMS executables... from menu bar. Set ArgyllCMS location to ~/Library/Application Support/DisplayCAL/dl/Argyll_V2.3.0/bin/ The external monitor should appear in list after restarting DisplayCAL, macOS might prompt you to prevent from unauthorized app to run,remember to force open all executables from Security and Privacy settings. I’ve ran into some glitches with this solution, it will turn the monitor black when the calibration is completed at first time, I need to re-plug the monitor cable to lit up again and allow macOS to run the last step to finish install ICC profile. It’s better to run a quick calibration at first to see if there’s any problem. Reference Mac Mini M1 color calibration DisplayCAL ArgyllCMS","link":"/en/2022/02/calibrate-external-monitor-on-apple-silicon-mac-by-displaycal/"},{"title":"安裝 Aria2 在 RaspberryPi 上搭建低耗下載機","text":"Sorry, this post in currently in Chinese only :( Aria2 是一個超輕量但功能的強大開源下載器，支援多點下載、多種協定、檔案分割下載、可透過 JSON-PRC 或 XML-PRC 遠端控制等功能。 Aria2 的特性讓他非常適合放在樹莓派等單晶片上執行，輕量不耗資源、又能遠端操作，我的 Pi 剛好作為 NAS，搭配下載器可以直接存入 NAS 硬碟中，在做遠端存取且不用關機非常方便，本篇將會記錄安裝 Aria2 在 Pi 上的過程。 安裝 Aria2sudo apt-get update sudo apt-get install aria2 設定 Aria2建立設定資料夾與檔案(注意這邊不用 sudo，否則還要回過頭來改資料夾權限給 user) mkdir -p ~/.aria2/ touch ~/.aria2/aria2.session vim ~/.aria2/aria2.conf 12345678910111213141516171819202122232425262728293031323334## Filesdir=/mnt/Share/Downloadsdisk-cache=32Mfile-allocation=trunccontinue=true## Downloadsmax-concurrent-downloads=10max-connection-per-server=16min-split-size=10Msplit=5max-overall-download-limit=0#max-download-limit=0#max-overall-upload-limit=0#max-upload-limit=0disable-ipv6=false## Sessionssave-session=/home/pi/.aria2/aria2.sessioninput-file=/home/pi/.aria2/aria2.sessionsave-session-interval=60## RPC Settingsenable-rpc=truerpc-allow-origin-all=truerpc-listen-all=true#rpc-secret=secret#event-poll=select#rpc-listen-port=6800## Othersenable-dht=trueenable-dht6=trueenable-peer-exchange=true 在 Files 部分的 dir 是指檔案下載路徑，這裡我把它掛在外接硬碟上方便存取。 接著啟動 aria2c 並指定設定文件所在位置。 aria2c --conf-path=/home/pi/.aria2/aria2.conf 看一下進程有沒有成功 ps aux | grep aria2 設定開機啟動服務建立設定文件 sudo vim /lib/systemd/system/aria2.service 12345678910111213141516[Unit]Description=Aria2 ServiceRequires=network.targetAfter=dhcpcd.service[Service]User=piRemainAfterExit=yesExecStart=/usr/bin/aria2c --conf-path=/home/pi/.aria2/aria2.confExecReload=/usr/bin/kill -HUP $MAINPIDExecStop=/usr/bin/kill -s STOP $MAINPIDRestartSec=1minRestart=on-failure[Install]WantedBy=multi-user.target 接著載入服務並啟動檢查是否成功： sudo systemctl daemon-reload sudo systemctl enable aria2 sudo systemctl start aria2 sudo systemctl status aria2 成功的話會顯示類似下方狀態 12345678910111213● aria2.service - Aria2 Service Loaded: loaded (/lib/systemd/system/aria2.service; enabled; vendor preset: enabled) Active: active (running) since Fri 2019-11-15 16:01:37 GMT; 4s ago Main PID: 1509 (aria2c) Tasks: 1 (limit: 4915) Memory: 3.4M CGroup: /system.slice/aria2.service └─1509 /usr/bin/aria2c --conf-path=/home/pi/.aria2/aria2.confNov 15 16:01:37 pinas systemd[1]: Started Aria2 Service.Nov 15 16:01:37 pinas aria2c[1509]: 11/15 16:01:37 [WARN] Neither --rpc-secret nor a combination of --rpc-user and --rpcNov 15 16:01:37 pinas aria2c[1509]: 11/15 16:01:37 [NOTICE] IPv4 RPC: listening on TCP port 6800Nov 15 16:01:37 pinas aria2c[1509]: 11/15 16:01:37 [NOTICE] IPv6 RPC: listening on TCP port 6800 安裝 Nginx 網頁伺服器安裝 nginx （若有其他網頁伺服器也可以，如 Apache 等） sudo apt install nginx 啟動服務 sudo /etc/init.d/nginx start 在瀏覽器輸入 http://RASPBERRYPI-IP/ 看到 Welcome to nginx! 等字樣代表伺服器成功安裝並且正常執行了 安裝 AriaNG 網頁操作界面下載 AriaNG，撰文時最新版為1.1.4，有更新版可以自行檢查。 wget https://github.com/mayswind/AriaNg/releases/download/1.1.4/AriaNg-1.1.4.zip 解壓縮 unzip AriaNg-1.1.4.zip -d aria-ng 把資料夾搬去伺服器的網頁目錄底下（ nginx 預設為 /var/www/html ） sudo mv aria-ng /var/www/html/ 此時瀏覽器輸入 http://RASPBERRYPI-IP/aria-ng 即可看到 AriaNG 的界面了。 在如下設定分頁內填入相關設定（ IP 或 hostname，預設 Port 為 6800 ），看到 Connected 即可開始遠端操作下載等任務了！ 參考aria2 AriaNG Remote Download Server in Linux using Aria2 用树莓派 Raspberry Pi 远程下载 (aria2) Setting up an NGINX web server on a Raspberry Pi","link":"/en/2019/11/安裝 Aria2 在 RaspberryPi 上搭建低耗下載機安裝 Aria2 在 RaspberryPi 上搭建低耗下載機/"},{"title":"Logitech Master 3 Gesture Button Modification","text":"Logitech’s Master/Anywhere series has been my favorite mice for years. But recently I don’t feel very comfortable when using my Master 3 with multiple devices, because the only button that switches device is located under the mouse. Since my 2 devices aren’t in the same network so Logitech Flow won’t work either. Not really sure why Logitech doesn’t allow user to configure gesture button to switch devices :( so I came up with an idea to solve it. ModificationThe idea is actually quite simple. I can connect the device switch button to thumb gesture button, and configure it to do nothing when pressed in Logitech Options. Here’s how I do it: Remove mouse feet and screws (1 x T5 and 5 #0 Philips Screws) Be careful with the ribbon when open the top case Unscrew all components (battery, scrolling wheel) (Optional) I also change the momentary switch by the way, Kailh silent mouse switches were used this time Wired up the switch device button with thumb gesture button Set gesture button to Do Nothing in Logitech Options Finish! It’s quite easy if you have experience with soldering. Now when I need to switch device I can just use the thumb gesture button instead of keep fliping the mouse :D And here’s some minor issue I want to mention about this mod: You’ll need to press gesture buttton once before start to switching the device. (probably because there’re some energy saving mechanism) If you have thinner wire the better, mine is a bit too thick so the original switch device button get stuck. Since I don’t use that button to switch device so it’s not really a issue for me, just be aware. Thanks for your reading 😊 ReferenceHow to Open the Logitech MX Master 3","link":"/en/2022/04/logitech-master-3-gesture-button-modify/"},{"title":"理解 Raspberry 4 Type C 設計問題","text":"Sorry, this post in currently in Chinese only :( 今年(2019)樹莓派基金會發表了久違的硬體更新，升級到了4代，相信有在關注的朋友們都知道，本次供電設計終於換成了 Type-C (終於有種進化成現代化單片機的感覺)不過也因為電源電路設計的一些問題導致了有 E-Mark 晶片的 USB-C 線材無法為樹莓派供電（例如 Apple 的 Macbook USB-C 充電線、Google Pixel 3 附帶的 USB-C 線材等），反倒是便宜的一般線材能夠正常運作XD 證明樹莓派是給窮人家的玩具 。 出於好奇我搜尋研究了一下原因，並且想了解決方法記錄在這篇文章中，本人不是這方面的專業人士，若有錯誤歡迎指出討論。 Type-C 供電定義及設計下圖是 Type-C 的腳位圖，這次設計出現問題是位於兩個 CC 腳位的部分（ CC1 &amp; CC2 ），CC (Configuration Channel) 腳位是 Type-C 重要的設定通道，可以利用不同的 CC 電阻設定判斷裝置資訊、決定模式，以及藉此支援正反插。 根據 Type-C 定義文件，藉由 CC 腳位的設定我們可以有以下不同的狀態： 樹莓派所需要的是從供電端拉 5V/3A 的電力，為接受電力的設備（ Sink Device ）（這裡我不知道怎麽翻譯比較適當XD），由圖表可知我們應該要將 CC 設定在第二或第三種狀態才能正常為樹莓派提供正確的電壓。 瞭解接腳定義後來看供電端與設備端連線時的簡化電路圖： 上圖為一般 Type-C 線材連接時的樣子，可以看到只有一條 CC 線接通兩邊，並且在右側設備端有接一個下拉電阻（ Pull-down Resistor：簡稱Rd ），供電端會藉由偵測到的阻值判斷所需要的 USB-C 狀態。 接著看看連上 E-mark 線材時的電路圖：（ E-mark 是在線裡的 IC ，可以提供 PD 通訊以及宣告這條線的資訊 ） 由上圖可以看到，線材內會有一個 Ra 下拉電阻，可以告訴供電端（DFP：Downstream-Facing Port ）在 CC2 上對 E-mark IC 提供 Vconn 電力。 簡單理解了 Type-C 的供電定義後，接著看樹莓派4的電源電路設計。 Raspberry Pi 4 電源電路樹莓派基金會已經釋出了除了 SoC 以外的電路設計圖，首先來看看電源電路的部分： 左側是 Type-C 的母座，接著把注意力放到 CC1 以及 CC2 兩隻腳位上，這裡的設計是把 CC1 及 CC2 短路後共同接一個 5k1Ω Rd 下拉電阻，在普通的線材下這個設計是完全沒問題的，PD 供電端因為線材只有一條 CC 相連，只會偵測到Rd電阻，另一條 CC 空接，按照前面的圖表可以看到樹莓派狀態是 Sink attached ，可以對其供電 5V/3A。 但是這設計接到 E-mark 線材的時候就不一樣了，由於 E-mark 線材裡面的 CC2 會有 Ra 下拉電阻，連接後 Ra(1kΩ) 會跟電源電路裡的 Rd(5k1Ω) 電阻並聯，分壓後變成 836Ω 等效電阻，供電端偵測到這阻值會把它當成 Ra（ 836Ω 屬於 Ra 的許可誤差範圍），參照上面 Type-C 狀態表可以發現，此時樹莓派被當成了音訊裝置（ Audio Adapter Accessory ，例如 USB-C 轉 3.5mm 音訊轉接器等裝置），於是供電端就不會對樹莓派輸出任何電力了！這就是為什麼普通線材可以正常使用，反而是較高級(?)的 E-mark 線材無法使用的原因。 順帶補充一下必須使用 E-mark 晶片的時機（ 只要滿足其中一項就需要 E-mark ）： VBUS 需要提供 3A 以上的電流 USB 3.1 Gen1 或 Gen2 協定 需要用到 Alternate Modes 時 修正方法理論上來說，應該要將樹莓派電源電路中的 CC1 以及 CC2 隔開後各接一個 5k1Ω 的 Rd 即可正常使用 E-mark 充電線了，但是由於那部分的電路設計在 Type-C 連接器下方，所以不容易施工，需要找另外的解決方案： 翹起 Type-C 連接器上的 CC1 腳讓他另外接一個 Rd 電阻到 GND 請參考此樹莓派論壇文章 另外做一條 Type-C 延長線，自行在中間切斷 CC1 及 CC2 連接並自行接 Rd電阻到 GND 實際操作待補上（買的材料還沒來，無法測試，等測試後在詳細記錄QQ） PS. 有風聲說之後會有小改 PCB 解決此問題，不過那麼久了都沒消息，不知道何時才會改善 結論因為設計上的瑕疵，所以無法使用 E-mark 線材來為樹莓派供電，網路上有些說 PD 充電器無法使用其實算是不夠嚴謹的說法，因為若搭上無 E-mark 的線材還是能夠正常使用的（ 因為只有一條 CC 連通，且線材內沒有 Ra 並聯電源電路裡的 Rd，不會造成識別錯誤 ），省了一個 Rd 電阻但造成 E-mark 線材無法使用，真是這次樹莓派4最可惜的部分了。 參考EXPLORING THE RASPBERRY PI 4 USB-C ISSUE IN-DEPTH USB Type-C® Cable and Connector Specification Revision 2.0, August 2019 SCHEMATIC1 : REDUCED SCHEMATICS Fixing the Pi 4 usb C issue by hand Designing a Type-C Electronically Marked Cable - Part 1","link":"/en/2019/10/理解_Raspberry_Pi_4_Type_C_設計問題/"},{"title":"利用 Raspberry Pi 搭建 TimeCapsule（仮）- 軟體篇","text":"Sorry, this post in currently in Chinese only :( 相信 MacOS 的使用者應該都熟悉官方提供的備份軟體「TimeMachine」，不過如果是 Macbook 等筆電就比較麻煩了，三不五時就要接上隨身硬碟來備份對於我這種懶人來說，定時備份根本是不可能的任務。 不過備份依然是相當重要的，除了升級系統有機會用到，再來就是現在的 Macbook 硬體如此不可靠你敢不備份嗎(笑)。為了解決懶的問題，我想用無線的方式進行備份。停產的 Airport ，或是群輝（Synology）的 NAS 都有提供 TimeMachine 無線備份的功能，然而這兩者的價格都還是偏高的QwQ 所以在一輪 Google 後，我的解決方法就是利用此篇的主角：樹莓派（Raspberry Pi）來完成這項任務，在 Pi 4 推出後，硬體規格升級到了USB3.0、Gigabit Ethrnet，做個人用的簡易 NAS 已經算是堪用，更不用說對速度要求不高的 TimeMachine 了！ 準備工作首先安裝好最新的 Raspbian Lite 版本，開機後先進行基本設定（ 可以單純ssh操作省去外接的麻煩，關於headless可以參考我之前的文章：Raspberry Zero W Headless 自動連上無線網路與開啟SSH ） sudo raspi-config 把預設密碼之類改一改，還有地區之類等基本設定。設定完後先更新一下套件。 sudo apt-get update &amp;&amp; sudo apt-get upgrade 接著重啟樹莓派。 sudo reboot 分割磁碟(可選)如果整顆硬碟都是要拿來做 TimeCapsule 的話此步驟可以跳過，直接續讀安裝過程。 首先列出硬碟情況： lsblk 找到硬碟代號，例如這邊sda是我的外接硬碟，裡面有之前的分區。首先用 fdisk 重新分割這顆硬碟： sudo fdisk /dev/sda 進入 fdisk 可以按 m 顯示使用說明，這邊簡述我的硬碟分割過程： 輸入兩次 d 刪除兩個原先的分區 n 新增分區，分區代號以及起始區塊預設，結束區塊 +450G (這樣會建立一個代號1，450G大小的分區) 再次用 n 新增第二分區，一路 Enter 完成剩下硬碟空間的分區 w 寫入硬碟分區資料並退出 fdisk 接著再次查看分割結果是否正確 lsblk 圖中可以看到硬碟已經成功分割成希望的數量以及大小(注意：fdisk 僅支援分割2TB內的硬碟，若要分割更大的需要安裝 gparted 在桌面環境下操作) 安裝過程準備硬碟首先格式化硬碟(sda1是我要格式化的分區，請依照lsblk顯示的自行更換) sudo mkfs.ext4 /dev/sda1 這邊建議以 ext4 格式化達到最佳效能，雖然有工具可以讓 Linux 讀取 hfsplus 等蘋果檔案格式，但是我測試之後速度慢到想哭(／‵Д′)／~ ╧╧（這邊不太確定是不是我不會設定問題，若有錯誤歡迎指正 而且 hfsplus 也無法把硬碟拆下來接上 MacOS 就直接兩邊互通，索性直接用 ext4，以後連復原都透過網路了。 建立掛載點 sudo mkdir /mnt/TimeCapsule 查看分區的 UUID 並把它複製下來 sudo blkid 編輯 fstab 添加掛載資訊 sudo vim /etc/fstab 在最底行填上（”YOUR_UUID”替換成剛才複製的UUID） UUID=YOUR_UUID /mnt/TimeCapsule ext4 defaults 0 2 掛載硬碟(分區) sudo mount -a 查看掛載狀態 df -h 可以看到 sda1 已成功掛載到 /mnt/TimeCapsule 了 最後開啟硬碟權限 chmod 777 /mnt/TimeCapsule 安裝及設定 Netatalk安裝 Netatalk sudo apt-get install netatalk 安裝完成後用 netatalk -v 查看版本以及設定檔位置 接著編輯 nsswitch.conf sudo vim /etc/nsswitch.conf 在 host 那行的最後加上 mdns4 mdns 如下 hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4 mdns 設定 afp.conf sudo vim /etc/netatalk/afp.conf 內容如下 123456[Global] mimic model = TimeCapsule6,106[Time Machine] path = /mnt/TimeCapsule time machine = yes 保存後退出，最後啟動服務： sudo service avahi-daemon start sudo service netatalk start 這時應該能在 MacOS 看到你的網路硬碟了！ 為了確定開機時會自動啟動服務，輸入以下指令： sudo systemctl enable avahi-daemon sudo systemctl enable netatalk MacOS 端設定接著打開 TimeMachine 設定，按選擇備份碟之後就能夠看到我們用 Raspberry Pi 的備份硬碟囉！選擇它之後輸入 Pi 的帳號密碼即可開始備份（第一次備份時間通常較長，如果開啟加密會更久），完成首次備份後接著以後就是差異備份，只要連上就會自動定期執行，在也不用怕麻煩或忘記備份了！ 進階設定Raspberry Pi 端用戶管理新增用戶（username改成自己需要的使用者名稱） useradd --create-home --groups users --user-group username 建立密碼 passwd username 編輯 afp.conf sudo vim /etc/netatalk/afp.conf 在 [Time Machine] (顯示名稱依照之前設定的可能會有不同)新增使用者 1234[Time Machine] path = /mnt/TimeCapsule time machine = yes valid user = username 靜態 IP固定 Pi 的 IP，這部分可以前往路由器設定，由於每家路由器不一定相同，所以另外依照各廠商提供的說明設定。 Mac 端首次備份時若覺得備份速度太慢可以執行以下 Script 關閉限流： sudo sysctl debug.lowpri_throttle_enabled=0 恢復方式： sudo sysctl debug.lowpri_throttle_enabled=1 參考替 Linux 新增硬碟（磁碟分割、格式化與掛載） How to Use Your Raspberry Pi as a Time Machine Backup Server for macOS How to speed up your Time Machine backups AFP Netatalk share configuration (aka Apple Time Machine). Raspberry Pi Time Machine (2019 update) How to use a Raspberry Pi for your Time Machine backups Apple Time machine on RaspberryPI How to use a Raspberry Pi for your Time Machine backups 利用 Raspberry Pi（树莓派）打造 Time Capsule（时间胶囊） PS 因為各種文章新舊版本問題，所以參考了不少資料才整理出一個目前可以使用，快速的設定過程。","link":"/en/2019/10/利用RaspberryPi搭建TimeCapsule仮-軟體篇/"}],"tags":[{"name":"Quick Fix","slug":"Quick-Fix","link":"/en/tags/Quick-Fix/"},{"name":"iPad","slug":"iPad","link":"/en/tags/iPad/"},{"name":"Affinity Photo","slug":"Affinity-Photo","link":"/en/tags/Affinity-Photo/"},{"name":"Fresco","slug":"Fresco","link":"/en/tags/Fresco/"},{"name":"vue","slug":"vue","link":"/en/tags/vue/"},{"name":"MacOS","slug":"MacOS","link":"/en/tags/MacOS/"},{"name":"WiFi","slug":"WiFi","link":"/en/tags/WiFi/"},{"name":"CSS","slug":"CSS","link":"/en/tags/CSS/"},{"name":"node-sass","slug":"node-sass","link":"/en/tags/node-sass/"},{"name":"Keyboard","slug":"Keyboard","link":"/en/tags/Keyboard/"},{"name":"開箱","slug":"開箱","link":"/en/tags/開箱/"},{"name":"Raspberry Pi","slug":"Raspberry-Pi","link":"/en/tags/Raspberry-Pi/"},{"name":"DIY","slug":"DIY","link":"/en/tags/DIY/"},{"name":"SIM-Racing","slug":"SIM-Racing","link":"/en/tags/SIM-Racing/"},{"name":"G27","slug":"G27","link":"/en/tags/G27/"},{"name":"illustration","slug":"illustration","link":"/en/tags/illustration/"},{"name":"Win10","slug":"Win10","link":"/en/tags/Win10/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/en/tags/Ubuntu/"},{"name":"Github","slug":"Github","link":"/en/tags/Github/"},{"name":"SSL","slug":"SSL","link":"/en/tags/SSL/"},{"name":"PHP","slug":"PHP","link":"/en/tags/PHP/"},{"name":"Laravel","slug":"Laravel","link":"/en/tags/Laravel/"},{"name":"XML","slug":"XML","link":"/en/tags/XML/"},{"name":"Linux","slug":"Linux","link":"/en/tags/Linux/"},{"name":"hexo","slug":"hexo","link":"/en/tags/hexo/"},{"name":"無線耳機","slug":"無線耳機","link":"/en/tags/無線耳機/"},{"name":"Macbook Pro","slug":"Macbook-Pro","link":"/en/tags/Macbook-Pro/"},{"name":"螢幕","slug":"螢幕","link":"/en/tags/螢幕/"},{"name":"Touchbar","slug":"Touchbar","link":"/en/tags/Touchbar/"},{"name":"Google","slug":"Google","link":"/en/tags/Google/"},{"name":"SMB","slug":"SMB","link":"/en/tags/SMB/"},{"name":"SFTP","slug":"SFTP","link":"/en/tags/SFTP/"},{"name":"RaspberryPi/樹莓派","slug":"RaspberryPi-樹莓派","link":"/en/tags/RaspberryPi-樹莓派/"},{"name":"NAS","slug":"NAS","link":"/en/tags/NAS/"},{"name":"TimeCapsule","slug":"TimeCapsule","link":"/en/tags/TimeCapsule/"},{"name":"TimeMachine","slug":"TimeMachine","link":"/en/tags/TimeMachine/"},{"name":"USB-C","slug":"USB-C","link":"/en/tags/USB-C/"},{"name":"軟體應用","slug":"軟體應用","link":"/en/tags/軟體應用/"},{"name":"SketchUp","slug":"SketchUp","link":"/en/tags/SketchUp/"},{"name":"Ruby","slug":"Ruby","link":"/en/tags/Ruby/"},{"name":"valine","slug":"valine","link":"/en/tags/valine/"},{"name":"blog","slug":"blog","link":"/en/tags/blog/"},{"name":"Apple Silicon","slug":"Apple-Silicon","link":"/en/tags/Apple-Silicon/"},{"name":"macOS","slug":"macOS","link":"/en/tags/macOS/"},{"name":"DisplayCAL","slug":"DisplayCAL","link":"/en/tags/DisplayCAL/"},{"name":"RaspberryPi","slug":"RaspberryPi","link":"/en/tags/RaspberryPi/"},{"name":"StatusMonitor","slug":"StatusMonitor","link":"/en/tags/StatusMonitor/"}],"categories":[]}